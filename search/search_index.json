{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Python Mastery \ud83d\udc0d","text":"<p>Welcome to Python Mastery, your one-stop platform to learn, practice, and master Python programming. Whether you're a beginner just getting started or preparing for interviews, we've got you covered.</p>"},{"location":"#what-youll-find-here","title":"\ud83d\ude80 What You'll Find Here","text":"<ul> <li>\ud83d\udc68\u200d\ud83c\udfeb Tutorials: Step-by-step Python lessons with examples and explanations.</li> <li>\ud83d\udcdd Assignments: Practice problems and coding assignments to test your skills.</li> <li>\ud83d\udcbc Interview Questions: Curated Python interview questions and answers to help you prepare confidently.</li> </ul>"},{"location":"#quick-navigation","title":"\ud83d\udd0d Quick Navigation","text":"<ul> <li>Start Learning Python</li> <li>View Assignments</li> <li>Interview Prep</li> </ul>"},{"location":"#why-learn-python","title":"\ud83d\udccc Why Learn Python?","text":"<p>Python is one of the most in-demand programming languages used in web development, data science, machine learning, automation, and more. Learning Python opens doors to a wide range of career opportunities.</p>"},{"location":"#built-with-mkdocs","title":"\ud83d\udee0 Built with MkDocs","text":"<p>This site is built using MkDocs \u2014 a fast, simple static site generator for building project documentation.</p>"},{"location":"#join-the-community","title":"\ud83d\udc65 Join the Community","text":"<p>Have questions, feedback, or want to contribute? Join our discussion board or contact us.</p> <p>Tip: Bookmark this page and check back often \u2014 we're regularly updating with new tutorials and questions!</p>"},{"location":"uv/","title":"UV","text":"<p>An extremely fast Python package and project manager, written in Rust. </p> <p>\ud83d\ude80 A single tool to replace pip, pip-tools, pipx, poetry, pyenv, twine, virtualenv, and more.</p> <p>installtion</p> <p><code>pip install uv</code></p>"},{"location":"uv/#comparision","title":"comparision","text":""},{"location":"uv/#old-way","title":"old way","text":"<p>make a folder</p> <pre><code>mkdir old_way\ncd old_way\npython -m venv .venv\n\nvenv\\Screipt|activate\npip install flask requests\n\npip freeze &gt; requirments.txt\n</code></pre>"},{"location":"uv/#using-uv","title":"using UV","text":"<pre><code>uv init new_app\nor\nuv init\nor \nuv init --app \nor \nuv init --lib \n\ncd new_app\n</code></pre> <p>by default it create following files</p> <p>uv atomatically insilize a .git repostory for us  .python-version file it also have python version file, which conatian consist python version <pre><code>\n</code></pre></p>"},{"location":"DSA/","title":"DSA","text":""},{"location":"DSA/#1-two-sum-hash-map-approach","title":"\ud83d\udd22 1. Two Sum \u2014 Hash Map Approach","text":""},{"location":"DSA/#question","title":"\ud83e\udde9 Question","text":"<p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return the indices of the two numbers such that they add up to the target.</p> <p>\u2757 You may assume that each input has exactly one solution, and you may not use the same element twice.</p>"},{"location":"DSA/#example","title":"\ud83d\udce5 Example","text":"<pre><code>Input: nums = [2, 7, 11, 15], target = 9  \nOutput: [0, 1]  \nExplanation: nums[0] + nums[1] = 2 + 7 = 9\n</code></pre>"},{"location":"DSA/#why-is-this-asked","title":"\ud83e\udde0 Why Is This Asked?","text":"<ul> <li>Tests understanding of hash maps (dictionaries).</li> <li>Shows your ability to optimize brute force to linear time.</li> <li>Frequently asked in Google, Amazon, Microsoft.</li> </ul>"},{"location":"DSA/#brute-force-not-recommended","title":"\ud83e\udde9 Brute Force (NOT Recommended)","text":"<pre><code>for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n        if nums[i] + nums[j] == target:\n            return [i, j]\n</code></pre> <p>\u23f1 Time: O(n\u00b2)</p>"},{"location":"DSA/#optimal-solution-hash-map","title":"\u2705 Optimal Solution (Hash Map)","text":"<pre><code>def two_sum(nums, target):\n    hash_map = {}  # key: number, value: index\n\n    for i, num in enumerate(nums):\n        diff = target - num\n        if diff in hash_map:\n            return [hash_map[diff], i]\n        hash_map[num] = i\n</code></pre>"},{"location":"DSA/#time-and-space-complexity","title":"\ud83e\uddee Time and Space Complexity","text":"Operation Complexity Time O(n) Space O(n)"},{"location":"DSA/#how-it-works-step-by-step-with-nums-2-7-11-15-target-9","title":"\ud83e\uddf0 How It Works (Step-by-step with nums = [2, 7, 11, 15], target = 9)","text":"i num diff = target - num hash_map result 0 2 7 {} - {2: 0} - 1 7 2 {2: 0} \u2705 [0, 1] found"},{"location":"DSA/#key-concepts","title":"\ud83d\udd0d Key Concepts","text":"<ul> <li>Dictionary lookups are O(1).</li> <li>One-pass scan with early exit.</li> </ul>"},{"location":"DSA/#real-world-applications","title":"\ud83e\uddea Real-World Applications","text":"<ul> <li>Finding 2 products whose prices add to a budget.</li> <li>Matching pairs in analytics or stock price differences.</li> </ul> <pre><code>def two_sum(lis, target):\n    temp_dict = {}\n\n    for i, num in enumerate(lis):\n\n        diff = target - num\n        if diff in temp_dict:\n            return temp_dict[diff], i\n        temp_dict[num] = i\n        # print(diff)\n    # print(temp_dict)\nnums = [2, 7, 11, 15]\ntarget = 9  \n\nresult = two_sum(nums,target)   \nresult\n</code></pre>"},{"location":"DSA/Array_coding_question/","title":"Array","text":""},{"location":"DSA/Array_coding_question/#1-removing-duplicate-entries-from-database","title":"1. Removing Duplicate Entries from Database","text":"<p>As a startup, you have a database of customer information sorted in non-decreasing order. However, there are duplicate entries that need to be removed in-place such that each unique customer appears only once. The relative order of the customers should be kept the same. Write a function that takes in the database as an integer array and returns the number of unique customers in the database after removing duplicates.</p> <p>Python Function Signature:</p> <pre><code>def remove_duplicates(database: List[int]) -&gt; int:\n# Example 1:\n\ndatabase = [1, 2, 2, 3, 4, 4, 4, 5, 5, 6]\nassert remove_duplicates(database) == 6\n\n# Explanation: After removing duplicates, the unique customers are [1, 2, 3, 4, 5, 6], so the function should return 6.\n\n# Example 2:\ndatabase = [1, 1, 1, 1, 1, 1, 1]\nassert remove_duplicates(database) == 1\n\n# Explanation: After removing duplicates, the unique customer is [1], so the function should return 1.\n</code></pre> <p>Solution</p> <pre><code>from typing import List\ndef remove_duplicates(database: List[int]) -&gt; int:\n    # return len(set(database)) \n    t = []\n    for i in database:\n        if i not in t:\n            t.append(i)\n    return len(t)\n\ndatabase = [1, 2, 2, 3, 4, 4, 4, 5, 5, 6]\nassert remove_duplicates(database) == 6\n\ndatabase = [1, 1, 1, 1, 1, 1, 1]\nassert remove_duplicates(database) == 1\n</code></pre>"},{"location":"DSA/Array_coding_question/#2-stock-trading-profit-maximization","title":"2. Stock Trading Profit Maximization","text":"<p>You have been given a list of stock prices of a particular stock. You want to maximize your profit by buying and selling the stock at the right time. On each day, you can either buy the stock, sell the stock, or do nothing. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day. Write a function that takes in a list of stock prices and returns the maximum profit you can achieve. If no profit can be made, return 0.</p> <p>Python function signature:</p> <pre><code>def max_profit(prices: List[float]) -&gt; float:\n</code></pre> <p>Example 1:</p> <pre><code>prices = [7, 1, 5, 3, 6, 4] \nassert max_profit(prices) == 4.0\n</code></pre> <p>Example 2:</p> <pre><code>prices = [7, 6, 4, 3, 1] \nassert max_profit(prices) == 0.0\n</code></pre> <p>The function should take in a list of stock prices as input and return the maximum profit that can be achieved by buying and selling the stock at the right time. If no profit can be made, the function should return 0.</p> <pre><code>from typing import List\n\ndef max_profit(prices: List[int|float]) -&gt; float:\n    if len(prices) &lt; 1:\n        return 0.0\n\n    max_diff = 0\n    pre = prices[0]\n\n    for price in prices:\n        diff = price - pre\n        if diff &gt; max_diff:\n            max_diff = diff + 1\n        pre = price\n    return float(max_diff)\n\n\n\n\nprices = [7, 1, 5, 3, 6, 4] \nassert max_profit(prices) == 5.0\n\nprices = [7, 6, 4, 3, 1] \nassert max_profit(prices) == 0.0\n</code></pre>"},{"location":"DSA/Array_coding_question/#array-rotation","title":"Array Rotation","text":"<p>Write a function that takes an array and an integer n as input and shifts the array to the right by n steps. Return the shifted array.</p> <p>Python Function Signature:</p> <pre><code>def shift_array(arr: List[int], n: int) -&gt; List[int]:\n\n# Example 1:\narr = [1, 2, 3, 4, 5]\nn = 2\nassert shift_array(arr, n) == [4, 5, 1, 2, 3]\n\n# Example 2: \narr = [0, 1, 2, 3, 4, 5]\nn = 4\nassert shift_array(arr, n) == [2, 3, 4, 5, 0, 1]\n</code></pre>"},{"location":"DSA/Array_coding_question/#gfg-neetcode","title":"GFG | neetcode","text":""},{"location":"DSA/Array_coding_question/#union-of-arrays-with-duplicates-zoho-rockstand-easy","title":"Union of Arrays with Duplicates (Zoho, Rockstand)- Easy","text":"<p>You are given two arrays a[] and b[], return the Union of both the arrays in any order.</p> <p>The Union of two arrays is a collection of all distinct elements present in either of the arrays. If an element appears more than once in one or both arrays, it should be included only once in the result.</p> <p>Note: Elements of a[] and b[] are not necessarily distinct. Note that, You can return the Union in any order but the driver code will print the result in sorted order only.</p> <p>Examples</p> <pre><code>nput: a[] = [1, 2, 3, 2, 1], b[] = [3, 2, 2, 3, 3, 2]\nOutput: [1, 2, 3]\nExplanation: Union set of both the arrays will be 1, 2 and 3.\n\nInput: a[] = [1, 2, 3], b[] = [4, 5, 6] \nOutput: [1, 2, 3, 4, 5, 6]\nExplanation: Union set of both the arrays will be 1, 2, 3, 4, 5 and 6.\n\nInput: a[] = [1, 2, 1, 1, 2], b[] = [2, 2, 1, 2, 1] \nOutput: [1, 2]\nExplanation: Union set of both the arrays will be 1 and 2.\n</code></pre> <pre><code>class Solution:    \n    def findUnion(self, a, b):\n\n        return list(set(a)|set(b))\n</code></pre>"},{"location":"DSA/Array_coding_question/#intersection-of-two-sorted-arrays","title":"Intersection of two sorted arrays","text":"<pre><code>Input: arr1[] = [1, 2, 3, 4], arr2[] = [2, 4, 6, 7, 8]\nOutput: [2, 4]\nExplanation: 2 and 4 are only common elements in both the arrays.\n</code></pre> <pre><code>class Solution:\n    def intersection(self, arr1, arr2):\n        return list(sorted(set(arr1) &amp; set(arr2)))\n</code></pre>"},{"location":"DSA/neetcode/","title":"neetcode150","text":""},{"location":"DSA/neetcode/#array","title":"Array","text":""},{"location":"DSA/neetcode/#1-contains-duplicate-easy","title":"1. Contains Duplicate (Easy)","text":"<p>link: https://neetcode.io/problems/duplicate-integer?list=neetcode150</p> <p>Given an integer array nums, return true if any value appears more than once in the array, otherwise return false.</p> <pre><code>Example 1:\nInput: nums = [1, 2, 3, 3]\nOutput: true\n\nExample 2:\nInput: nums = [1, 2, 3, 4]\nOutput: false\n</code></pre> <p>My solution</p> <pre><code>class Solution:\n    def hasDuplicate(self, nums: List[int]) -&gt; bool:\n        new = set(nums)\n        if len(nums) == len(new):\n            return False\n        return True\n</code></pre> <pre><code>class Solution:\n    def hasDuplicate(self, nums: List[int]) -&gt; bool:\n        hashset = set()\n        for n in nums:\n            if n in hashset:\n                return True\n            hashset.add(n)\n        return False\n</code></pre> <pre><code>class Solution:\n    def hasDuplicate(self, nums: List[int]) -&gt; bool:\n        return len(set(nums)) &lt; len(nums)\n</code></pre> <pre><code>class Solution:\n    def hasDuplicate(self, nums: List[int]) -&gt; bool:\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                return True\n        return False\n</code></pre> <pre><code>class Solution:\n    def hasDuplicate(self, nums: List[int]) -&gt; bool:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] == nums[j]:\n                    return True\n        return False\n</code></pre> <pre><code>import java.io.*;\nimport java.lang.*;\n\nclass Solution{\n\n    public boolean containsDuplicate(int[] nums) {\n\n        for(int i = 0; i &lt; nums.length; i++) {\n            for(int j = i + 1; j &lt; nums.length; j++) {\n                if(nums[i] == nums[j]) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public static void main (String[] args) {\n\n     Solution sol = new Solution();\n\n     int nums[]= {1, 2, 3, 1};\n\n     boolean res = sol.containsDuplicate(nums);\n\n     // printing the result\n     System.out.println(res);\n    }\n}\n</code></pre>"},{"location":"DSA/neetcode/#2-valid-anagram-easy","title":"2. Valid Anagram (Easy)","text":"<p>Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false.</p> <p>An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.</p> <pre><code>Example 1:\nInput: s = \"racecar\", t = \"carrace\"\nOutput: true\n\nExample 2:\nInput: s = \"jar\", t = \"jam\"\nOutput: false\n\nConstraints:\ns and t consist of lowercase English letters.\n</code></pre> <p>Solution</p> <pre><code>class Solution:\n    def isAnagram(self, s: str, t: str) -&gt; bool:\n        d1,d2 = {},{}\n\n        for _ in s:\n            d1[_] = d1.get(_,0) + 1\n        for _ in t:\n            d2[_] = d2.get(_,0) + 1\n        if d1 == d2:\n            return True\n        return False\n</code></pre> <pre><code>class Solution:\n    def isAnagram(self, s: str, t: str) -&gt; bool:\n        if len(s) != len(t):\n            return False\n\n        countS, countT = {}, {}\n\n        for i in range(len(s)):\n            countS[s[i]] = 1 + countS.get(s[i], 0)\n            countT[t[i]] = 1 + countT.get(t[i], 0)\n        return countS == countT\n</code></pre> <pre><code>class Solution:\n    def isAnagram(self, s: str, t: str) -&gt; bool:\n        ns = len(s)\n        if ns!= len(t):\n            return False\n\n        d1,d2 = {},{}\n\n        for _ in range(ns):\n            d1[s[_]] = d1.get(s[_],0) + 1\n            d2[t[_]] = d2.get(t[_],0) + 1\n        return d1 == d2\n</code></pre> <pre><code>class Solution:\n    def isAnagram(self, s: str, t: str) -&gt; bool:\n        if len(s)!= len(t):\n            return False\n\n        return sorted(s) == sorted(t)\n</code></pre>"},{"location":"DSA/neetcode/#3-two-sum-easy","title":"3. Two Sum (Easy)","text":"<p>Given an array of integers nums and an integer target, return the indices i and j such that nums[i] + nums[j] == target and i != j. You may assume that every input has exactly one pair of indices i and j that satisfy the condition. Return the answer with the smaller index first.</p> <pre><code>Example 1:\nInput:\nnums = [3,4,5,6], target = 7\nOutput: [0,1]\nExplanation: nums[0] + nums[1] == 7, so we return [0, 1].\n\nExample 2:\nInput: nums = [4,5,6], target = 10\nOutput: [0,2]\n\nExample 3:\nInput: nums = [5,5], target = 10\nOutput: [0,1]\n\nConstraints:\n\n2 &lt;= nums.length &lt;= 1000\n-10,000,000 &lt;= nums[i] &lt;= 10,000,000\n-10,000,000 &lt;= target &lt;= 10,000,000\n</code></pre> <p>Solutions</p> <pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        prevMap = {}  # val -&gt; index\n\n        for i, n in enumerate(nums):\n            diff = target - n\n            if diff in prevMap:\n                return [prevMap[diff], i]\n            prevMap[n] = i\n</code></pre> <pre><code>class Solution:\n    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]\n        return []\n</code></pre>"},{"location":"DSA/stack/","title":"Stack","text":"<p>A stack is a linear data structure that follows the Last-In/First-Out (LIFO) principle, also known as First-In/Last-Out (FILO).</p> <ul> <li>This means that the last element added is the first one to be removed.</li> </ul> <p>This means that the last element added is the first one to be removed.</p> <p>Stack Operations Stacks support a small set of basic operations, all of which run in O (1) time:</p> <p>empty (): checks if the stack is empty size (): returns the number of elements in the stack top () / peek (): shows the top element without removing it push(a): adds an element a at the top pop (): removes the top element</p> <p>Python does not have a built-in stack type, but stacks can be implemented in different ways using different data structures, let's look at some of the implementations:</p> <ol> <li>Using a List</li> <li>Using collections.deque</li> </ol> <p>Stack Implementation using some other Data Structures</p> <ul> <li>Using queue</li> <li>Using Linked-List</li> </ul> <ol> <li>Using a List Python lists provide built-in methods that make them suitable for stack operations. The append () method adds an element to the end of the list. The pop () method removes and returns the last element from the list. These operations allow a list to directly support stack-like behavior.</li> </ol> <pre><code>stack = []\n\nstack.append(10)\nstack.append(20)\nstack.append(30)\nstack.append(40)\nstack.append(50)\n\nprint(stack)\n\ntop = stack[-1]\n\nprint(top, len(stack))\n\nprint(stack.pop())\nprint(stack)\n</code></pre> <p>[10, 20, 30, 40, 50] 50 5 50 [10, 20, 30, 40]</p> <ol> <li>Using collections.deque Python\ufffds collections module provides a deque (double-ended queue) for efficient insertions and deletions. The append () method adds an element to the right end of the deque. The pop () method removes and returns the element from the right end. Since deque is optimized for fast appends and pops, it is often preferred over lists for stack implementation.</li> </ol> <pre><code>from collections import deque\nstack = deque()\n\n# append() function to push element in the stack\nstack.append('a')\nstack.append('b')\nstack.append('c')\n\nprint('Initial stack:')\nprint(stack)\n\n# pop() function to pop element from stack in LIFO order\nprint('\\nElements popped from stack:')\nprint(stack.pop())\nprint(stack.pop())\nprint(stack.pop())\n\nprint('\\nStack after elements are popped:')\nprint(stack)\n\n# uncommenting print(stack.pop()) will cause an IndexError as the stack is now empty\n</code></pre> <p>List is cash friedly where as deque is not https://www.geeksforgeeks.org/python/stack-in-python/</p>"},{"location":"DSA/stack/#stack-linked-list-implementation","title":"Stack - Linked List Implementation","text":"<ul> <li>A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle</li> <li>It can be implemented using a linked list, where each element of the stack is represented as a node.</li> <li>The head of the linked list acts as the top of the stack.</li> </ul>"},{"location":"DSA/stack/#declaration-of-stack-using-linked-list","title":"Declaration of Stack using Linked List","text":"<p>A stack can be implemented using a linked list where we maintain:</p> <ul> <li>A Node structure/class that contains:</li> <li>data \u2192 to store the element.</li> <li> <p>next \u2192 pointer/reference to the next node in the stack.</p> </li> <li> <p>A pointer/reference top that always points to the current top node of the stack. Initially, top = null to represent an empty stack.</p> </li> </ul> <pre><code># Node structure\nclass Node:\n    def __init__(self, x):\n        self.data = x\n        self.next = None\n\n\n# Stack class\nclass myStack:\n    def __init__(self):\n\n        # initially stack is empty\n        self.top = None\n</code></pre> <p>Operations on Stack using Linked List</p> <ol> <li>Push Operation</li> <li>Pop Operation</li> <li>Peek (or Top) Operation</li> <li>isEmpty Operation</li> </ol> <ol> <li>Push Operation Adds an item to the stack. Unlike array implementation, there is no fixed capacity in linked list. Overflow occurs only when memory is exhausted.</li> </ol> <ul> <li>A new node is created with the given value.</li> <li>The new node\u2019s next pointer is set to the current top.</li> <li>The top pointer is updated to point to this new node.</li> </ul> <p></p> <pre><code>def push(self, x):\n    temp = Node(x)\n    temp.next = self.top\n    self.top = temp\n</code></pre> <p>Time Complexity: O(1) Auxiliary Space: O(1)</p> <ol> <li>Pop Operation</li> </ol> <p>Removes the top item from the stack. If the stack is empty, it is said to be an Underflow condition.</p> <p>Before deleting, we check if the stack is empty (top == NULL). If the stack is empty, underflow occurs and deletion is not possible. Otherwise, we store the current top node in a temporary pointer. Move the top pointer to the next node. Delete the temporary node to free memory.</p> <p></p> <p><pre><code>def pop(self):\n\n    if self.top is None:\n        print(\"Stack Underflow\")\n        return -1\n\n    temp = self.top\n    self.top = self.top.next\n    val = temp.data\n\n    del temp\n    return val\n</code></pre> Peek (or Top) Operation Returns the value of the top item without removing it from the stack.</p> <p>If the stack is empty (top == NULL), then no element exists. Otherwise, simply return the data of the node pointed by top.</p> <p><pre><code>def peek(self):\n\n    if self.top is None:\n        print(\"Stack is Empty\")\n        return -1\n\n    return self.top.data\n</code></pre> Time Complexity: O(1) Auxiliary Space: O(1)</p> <p>isEmpty Operation Checks whether the stack has no elements.</p> <p>If the top pointer is NULL, it means the stack is empty and the function returns true. Otherwise, it returns false.</p> <pre><code>def isEmpty(self):\n    return self.top is None\n</code></pre>"},{"location":"assignments/","title":"Python Assignments","text":"<p>Practice problems to reinforce what you've learned.</p>"},{"location":"assignments/Assignment-fresher/","title":"Assignment fresher","text":""},{"location":"assignments/Assignment-fresher/#assigments","title":"Assigments","text":""},{"location":"assignments/Assignment-fresher/#q1-write-a-program-to-reverse-content-of-the-given-string-by-using-while-loop","title":"Q1. Write a Program To REVERSE content of the given String by using while loop","text":""},{"location":"assignments/Assignment-fresher/#q2-sort-characters-of-the-string-first-alphabet-symbols-followed-by-digits","title":"Q2. Sort characters of the string, first alphabet symbols followed by digits","text":""},{"location":"assignments/Assignment-fresher/#q3-program-for-the-requirementinput-a3z2b4-and-expected-output-aaabbbbzz","title":"Q3. Program for the requirement,input a3z2b4 and expected output aaabbbbzz","text":""},{"location":"assignments/Assignment-fresher/#q4-program-to-remove-duplicate-characters-from-the-given-input-string","title":"Q4. Program to remove duplicate characters from the given input String","text":""},{"location":"assignments/Assignment-fresher/#q5-find-no-of-occurrences-of-each-character-present-in-given-string-with-count","title":"Q5. Find no of occurrences of each character present in given string with count( )","text":""},{"location":"assignments/Assignment-fresher/#q6-program-to-check-whether-the-given-string-is-palindrome-or-not","title":"Q6. Program to check whether the given string is palindrome or not?\"","text":""},{"location":"assignments/Assignment-fresher/#q7-no-of-occurrences-of-each-character-present-in-given-string-without-count","title":"Q7. No of occurrences of each character present in given string without count()","text":""},{"location":"assignments/Assignment-fresher/#q8-program-to-check-whether-the-given-two-strings-are-anagrams-or-not","title":"Q8. Program to check whether the given two strings are anagrams or not?","text":""},{"location":"assignments/Assignment-fresher/#q9-program-to-find-the-number-of-occurrences-of-each-vowel-present-in-given-string","title":"Q9. Program to find the number of occurrences of each vowel present in given string","text":""},{"location":"assignments/Assignment-fresher/#q10-youre-a-restaurant-owner-and-want-to-calculate-the-final-bill-including-a-service-charge-and-tax-write-a-program-that-asks-for-the-base-bill-amount-and-applies-a-5-service-charge-and-10-tax","title":"Q10. You\u2019re a restaurant owner and want to calculate the final bill including a service charge and tax. Write a program that asks for the base bill amount and applies a 5% service charge and 10% tax","text":""},{"location":"assignments/Assignment-fresher/#q11-you-are-tasked-with-building-a-password-generator-for-a-banking-app-the-bank-has-strict-password-rules-passwords-must-be-12-characters-long-contain-at-least-one-uppercase-letter-one-lowercase-letter-one-number-and-one-special-character-etc-write-a-python-program-that-generates-such-strong-passwords","title":"Q11. You are tasked with building a password generator for a banking app. The bank has strict password rules: passwords must be 12 characters long, contain at least one uppercase letter, one lowercase letter, one number, and one special character (!, @, #, etc.). Write a Python program that generates such strong passwords","text":""},{"location":"assignments/Assignment-fresher/#q12-you-are-tasked-with-creating-a-password-generator-for-a-gaming-company-that-creates-themed-passwords-for-users-the-passwords-should-include-a-theme-eg-dragon-warrior-and-some-random-characters-write-a-python-program-that-generates-such-themed-passwords","title":"Q12. You are tasked with creating a password generator for a gaming company that creates themed passwords for users. The passwords should include a theme (e.g., \"dragon\", \"warrior\") and some random characters. Write a Python program that generates such themed passwords","text":""},{"location":"assignments/Assignment-fresher/#q13-you-are-developing-a-password-generator-for-a-company-with-a-strict-policy-that-passwords-cannot-contain-consecutive-repeated-characters-eg-aa-or-11-write-a-python-program-that-generates-secure-passwords-that-follow-this-rule","title":"Q13. You are developing a password generator for a company with a strict policy that passwords cannot contain consecutive repeated characters (e.g., \"aa\" or \"11\"). Write a Python program that generates secure passwords that follow this rule","text":""},{"location":"assignments/Assignment-fresher/#q14-youre-creating-a-bmi-calculator-write-a-program-that-asks-for-a-users-height-and-weight-calculates-their-bmi-and-categorizes-them-as-underweight-normal-or-overweight","title":"Q14. You're creating a BMI calculator. Write a program that asks for a user\u2019s height and weight, calculates their BMI, and categorizes them as underweight, normal, or overweight","text":""},{"location":"assignments/Assignment-fresher/#q15-youre-designing-a-grading-system-for-a-school-write-a-python-program-to-check-whether-a-student-has-passed-or-failed-based-on-input-marks","title":"Q15. You\u2019re designing a grading system for a school. Write a Python program to check whether a student has passed or failed based on input marks","text":""},{"location":"assignments/Assignment-fresher/#q16-youre-working-as-a-developer-at-a-retail-company-write-a-program-to-take-a-price-input-from-the-user-and-apply-a-discount-of-10-if-the-price-is-above-100","title":"Q16. You\u2019re working as a developer at a retail company. Write a program to take a price input from the user and apply a discount of 10% if the price is above $100","text":""},{"location":"assignments/Assignment-fresher/#q17-youre-writing-a-text-editor-write-a-program-that-reads-a-paragraph-and-counts-how-many-times-each-word-appears","title":"Q17. You\u2019re writing a text editor. Write a program that reads a paragraph and counts how many times each word appears","text":""},{"location":"assignments/Assignment-fresher/#q18-youre-building-a-meal-planner-write-a-python-program-that-stores-different-meal-options-for-the-week-in-a-list-and-allows-the-user-to-print-the-meals-for-any-specific-day","title":"Q18. You're building a meal planner. Write a Python program that stores different meal options for the week in a list and allows the user to print the meals for any specific day","text":""},{"location":"assignments/Assignment-fresher/#q19-youre-developing-a-library-system-write-a-python-program-to-keep-track-of-borrowed-books-using-a-tuple-where-each-tuple-holds-the-book-name-and-due-date","title":"Q19. You\u2019re developing a library system. Write a Python program to keep track of borrowed books using a tuple, where each tuple holds the book name and due date","text":""},{"location":"assignments/Assignment-fresher/#q20-you-are-working-on-a-task-tracker-write-a-program-that-takes-a-list-of-tasks-lets-the-user-mark-tasks-as-complete-and-then-displays-only-the-remaining-tasks","title":"Q20. You are working on a task tracker. Write a program that takes a list of tasks, lets the user mark tasks as complete, and then displays only the remaining tasks","text":""},{"location":"assignments/Assignment-fresher/#q21-you-are-building-a-registration-system-for-an-online-course-write-a-python-program-that-checks-if-a-students-name-is-already-registered-find-duplicates","title":"Q21. You are building a registration system for an online course. Write a Python program that checks if a student\u2019s name is already registered (find duplicates)","text":""},{"location":"assignments/Assignment-fresher/#q22-you-are-working-for-an-airline-and-need-to-manage-flight-bookings-write-a-python-program-that-takes-a-list-of-booked-passengers-and-prints-the-names-in-alphabetical-order","title":"Q22. You are working for an airline and need to manage flight bookings. Write a Python program that takes a list of booked passengers and prints the names in alphabetical order","text":""},{"location":"assignments/Assignment-fresher/#q23-youre-a-game-developer-creating-a-turn-based-game-write-a-program-that-simulates-rolling-a-die-and-repeats-the-process-until-one-player-reaches-a-score-of-100","title":"Q23. You're a game developer creating a turn-based game. Write a program that simulates rolling a die and repeats the process until one player reaches a score of 100","text":""},{"location":"assignments/Assignment-fresher/#q24-youre-building-a-weather-station-simulation-write-a-python-program-that-prompts-for-temperature-readings-and-gives-recommendations-based-on-ranges-eg-if-below-10c-print-wear-a-jacket","title":"Q24.  You're building a weather station simulation. Write a Python program that prompts for temperature readings and gives recommendations based on ranges (e.g., if below 10\u00b0C, print \u201cWear a jacket\u201d)","text":""},{"location":"assignments/Assignment-fresher/#q25-imagine-youre-simulating-a-simple-banking-system-write-a-program-that-asks-for-a-withdrawal-amount-and-checks-if-the-user-has-enough-balance-printing-appropriate-messages","title":"Q25. Imagine you\u2019re simulating a simple banking system. Write a program that asks for a withdrawal amount and checks if the user has enough balance, printing appropriate messages","text":""},{"location":"assignments/Assignment-fresher/#q26-youre-creating-a-password-strength-checker-write-a-python-program-to-determine-if-a-users-password-meets-requirements-length-and-character-types","title":"Q26. You're creating a password strength checker. Write a Python program to determine if a user\u2019s password meets requirements (length and character types)","text":""},{"location":"assignments/Assignment-fresher/#q27-you-are-developing-a-traffic-control-system-write-a-python-program-that-changes-the-signal-color-based-on-time-intervals-red-green-yellow","title":"Q27. You are developing a traffic control system. Write a Python program that changes the signal color based on time intervals (red, green, yellow)","text":""},{"location":"assignments/Assignment-fresher/#q28-youre-creating-a-simple-playlist-system-write-a-python-program-that-accepts-song-titles-from-the-user-and-removes-duplicates","title":"Q28. You're creating a simple playlist system. Write a Python program that accepts song titles from the user and removes duplicates","text":""},{"location":"assignments/Assignment-fresher/#q29-a-customer-deposits-and-withdraws-money-from-their-bank-account-write-a-program-that-updates-the-account-balance-after-each-transaction","title":"Q29. A customer deposits and withdraws money from their bank account. Write a program that updates the account balance after each transaction","text":""},{"location":"assignments/Assignment-fresher/#q30-a-school-is-managing-student-attendance-write-a-program-that-calculates-the-attendance-percentage-for-each-student-based-on-the-total-number-of-days-attended","title":"Q30. A school is managing student attendance. Write a program that calculates the attendance percentage for each student based on the total number of days attended","text":""},{"location":"assignments/Assignment-fresher/#q31-the-school-is-holding-an-event-and-only-students-with-more-than-90-attendance-are-invited-write-a-program-that-generates-this-invite-list","title":"Q31. The school is holding an event, and only students with more than 90% attendance are invited. Write a program that generates this invite list","text":""},{"location":"assignments/Assignment-fresher/#q32-youre-building-a-digital-library-app-users-upload-book-titles-to-the-system-write-a-program-that-checks-for-duplicate-titles-and-removes-them-before-storing-the-final-list","title":"Q32. You\u2019re building a digital library app. Users upload book titles to the system. Write a program that checks for duplicate titles and removes them before storing the final list","text":""},{"location":"assignments/Assignment-fresher/#q33-the-library-keeps-track-of-book-borrowings-given-a-list-of-borrowed-books-write-a-program-to-identify-and-display-the-most-borrowed-book","title":"Q33. The library keeps track of book borrowings. Given a list of borrowed books, write a program to identify and display the most borrowed book","text":""},{"location":"assignments/Assignment-fresher/#q34-a-user-wants-to-search-for-a-book-using-only-part-of-the-title-write-a-function-that-returns-all-books-that-contain-the-search-term","title":"Q34. A user wants to search for a book using only part of the title. Write a function that returns all books that contain the search term","text":""},{"location":"assignments/Assignment-fresher/#q35-youre-categorizing-books-based-on-their-genre-write-a-program-that-reads-a-file-of-book-titles-and-genres-and-then-creates-a-dictionary-with-genres-as-keys-and-book-titles-as-values","title":"Q35. You\u2019re categorizing books based on their genre. Write a program that reads a file of book titles and genres, and then creates a dictionary with genres as keys and book titles as values","text":""},{"location":"assignments/Assignment-fresher/#q36-each-book-has-an-authors-name-write-a-program-that-takes-a-list-of-books-and-authors-and-then-checks-if-any-author-has-written-more-than-one-book","title":"Q36. Each book has an author\u2019s name. Write a program that takes a list of books and authors, and then checks if any author has written more than one book","text":""},{"location":"assignments/Assignment-fresher/#q37-your-movie-rental-system-stores-a-list-of-rented-movies-with-the-user-who-rented-them-write-a-program-that-calculates-the-number-of-movies-each-user-has-rented","title":"Q37. Your movie rental system stores a list of rented movies with the user who rented them. Write a program that calculates the number of movies each user has rented","text":""},{"location":"assignments/Assignment-fresher/#q38-create-a-function-that-checks-whether-a-movie-is-available-for-rental-given-a-list-of-rented-movies-and-total-inventory","title":"Q38. Create a function that checks whether a movie is available for rental, given a list of rented movies and total inventory","text":""},{"location":"assignments/Assignment-fresher/#q39-your-rental-system-offers-discounts-to-frequent-users-write-a-program-that-identifies-users-who-rented-more-than-10-movies-in-a-month-and-gives-them-a-discount-hard","title":"Q39. Your rental system offers discounts to frequent users. Write a program that identifies users who rented more than 10 movies in a month and gives them a discount. (Hard)","text":""},{"location":"assignments/Assignment-fresher/#q40-guests-can-cancel-their-bookings-write-a-function-that-removes-a-guests-booking-from-the-system-and-updates-room-availability","title":"Q40. Guests can cancel their bookings. Write a function that removes a guest\u2019s booking from the system and updates room availability","text":""},{"location":"assignments/Assignment-fresher/#q41-write-a-program-that-randomly-assigns-students-to-project-topics-using-a-list-ensuring-no-student-is-assigned-the-same-topic","title":"Q41. Write a program that randomly assigns students to project topics using a list, ensuring no student is assigned the same topic","text":""},{"location":"assignments/Assignment-fresher/#q42-you-are-tasked-with-creating-a-voting-system-for-a-competition-write-a-python-program-that-stores-contestant-names-and-their-vote-counts-in-a-dictionary-and-displays-the-contestant-with-the-most-votes","title":"Q42. You are tasked with creating a voting system for a competition. Write a Python program that stores contestant names and their vote counts in a dictionary and displays the contestant with the most votes","text":""},{"location":"assignments/Assignment-fresher/#q43-youre-building-a-music-library-app-write-a-program-that-stores-song-titles-and-artists-in-a-dictionary-and-allows-users-to-search-for-songs-by-artist-name","title":"Q43. You\u2019re building a music library app. Write a program that stores song titles and artists in a dictionary and allows users to search for songs by artist name","text":""},{"location":"assignments/Assignment-fresher/#q44-write-a-program-that-takes-a-dictionary-of-student-names-and-their-test-scores-and-calculates-the-class-average-and-top-score","title":"Q44. Write a program that takes a dictionary of student names and their test scores, and calculates the class average and top score","text":""},{"location":"assignments/Assignment-fresher/#q45-you-are-a-manager-at-a-cafe-and-need-to-track-how-many-cups-of-coffee-each-customer-buys-write-a-python-program-to-store-customer-names-and-coffee-quantities-in-a-dictionary-then-find-the-top-buyer","title":"Q45. You are a manager at a caf\u00e9 and need to track how many cups of coffee each customer buys. Write a Python program to store customer names and coffee quantities in a dictionary, then find the top buyer","text":""},{"location":"assignments/Assignment-fresher/#q46-youre-building-a-movie-recommendation-system-write-a-python-program-that-compares-movie-genres-watched-by-two-users-and-recommends-a-movie-from-the-genres-they-havent-seen-yet","title":"Q46. You\u2019re building a movie recommendation system. Write a Python program that compares movie genres watched by two users and recommends a movie from the genres they haven\u2019t seen yet","text":""},{"location":"assignments/Assignment-fresher/#q47-you-are-tasked-with-creating-a-name-validation-system-write-a-python-program-that-checks-if-any-letters-in-a-name-are-repeated-using-sets","title":"Q47. You are tasked with creating a name validation system. Write a Python program that checks if any letters in a name are repeated using sets","text":""},{"location":"assignments/Assignment-fresher/#q48-youre-developing-a-music-streaming-service-write-a-python-program-that-finds-common-songs-between-two-users-playlists-using-sets","title":"Q48. You\u2019re developing a music streaming service. Write a Python program that finds common songs between two users\u2019 playlists using sets","text":""},{"location":"assignments/Assignment-fresher/#q49-youre-managing-a-university-course-registration-system-write-a-program-that-stores-registered-students-in-a-set-and-checks-if-a-student-is-already-enrolled","title":"Q49. You\u2019re managing a university course registration system. Write a program that stores registered students in a set and checks if a student is already enrolled","text":""},{"location":"assignments/Assignment-fresher/#q50-you-are-working-for-a-hospital-write-a-python-program-that-keeps-track-of-patient-records-in-a-list-of-tuples-name-age-diagnosis-and-lets-the-user-update-the-diagnosis","title":"Q50. You are working for a hospital. Write a Python program that keeps track of patient records in a list of tuples (name, age, diagnosis) and lets the user update the diagnosis","text":""},{"location":"assignments/Assignment-fresher/#q51-youre-building-a-car-rental-system-write-a-python-program-that-stores-available-cars-in-a-list-and-allows-users-to-rent-a-car-by-removing-it-from-the-list","title":"Q51. You\u2019re building a car rental system. Write a Python program that stores available cars in a list and allows users to rent a car by removing it from the list","text":""},{"location":"assignments/Assignment-fresher/#q52-youre-tasked-with-creating-a-contact-book-write-a-python-program-that-stores-contacts-in-a-list-of-tuples-name-phone-number-and-lets-the-user-add-delete-and-search-contacts","title":"Q52. You\u2019re tasked with creating a contact book. Write a Python program that stores contacts in a list of tuples (name, phone number) and lets the user add, delete, and search contacts","text":""},{"location":"assignments/Assignment-fresher/#q53-youre-helping-organize-a-conference-write-a-program-that-stores-attendees-names-in-a-tuple-and-allows-the-user-to-search-for-a-name","title":"Q53. You\u2019re helping organize a conference. Write a program that stores attendees' names in a tuple and allows the user to search for a name","text":""},{"location":"assignments/Assignment-fresher/#q54-you-are-building-a-system-for-a-coffee-shop-write-a-function-that-takes-a-list-of-orders-and-returns-the-total-cost","title":"Q54. You are building a system for a coffee shop. Write a function that takes a list of orders and returns the total cost","text":""},{"location":"assignments/Assignment-fresher/#q55-youre-tasked-with-creating-a-personalized-greeting-app-write-a-function-that-takes-a-name-and-returns-a-greeting-with-the-current-time-of-day","title":"Q55. You\u2019re tasked with creating a personalized greeting app. Write a function that takes a name and returns a greeting with the current time of day","text":""},{"location":"assignments/Assignment-fresher/#q56-you-are-developing-a-game-write-a-function-that-rolls-two-dice-and-returns-the-sum-of-the-values","title":"Q56. You are developing a game. Write a function that rolls two dice and returns the sum of the values","text":""},{"location":"assignments/Assignment-fresher/#q57-you-are-responsible-for-managing-a-gyms-membership-system-write-a-python-program-that-stores-member-names-and-their-expiration-dates-in-a-dictionary-and-checks-which-memberships-are-expiring-this-month","title":"Q57. You are responsible for managing a gym\u2019s membership system. Write a Python program that stores member names and their expiration dates in a dictionary, and checks which memberships are expiring this month","text":""},{"location":"assignments/Assignment-fresher/#q58-youre-a-teacher-who-needs-to-calculate-the-final-grade-for-students-write-a-python-program-that-stores-student-names-and-their-grades-in-a-dictionary-and-allows-the-user-to-calculate-the-class-average","title":"Q58. You're a teacher who needs to calculate the final grade for students. Write a Python program that stores student names and their grades in a dictionary, and allows the user to calculate the class average","text":""},{"location":"assignments/Assignment-fresher/#q59-youre-working-with-a-translation-service-write-a-python-program-that-takes-a-sentence-and-translates-it-into-pig-latin-move-the-first-letter-of-each-word-to-the-end-and-add-ay","title":"Q59. You're working with a translation service. Write a Python program that takes a sentence and translates it into Pig Latin (move the first letter of each word to the end and add \u201cay\u201d)","text":""},{"location":"assignments/Assignment-fresher/#q60-you-are-tasked-with-formatting-product-descriptions-for-a-catalog-write-a-python-program-that-capitalizes-the-first-and-last-letter-of-each-word","title":"Q60. You are tasked with formatting product descriptions for a catalog. Write a Python program that capitalizes the first and last letter of each word","text":""},{"location":"assignments/Assignment-fresher/#q61-youre-creating-a-registration-system-write-a-python-program-that-checks-if-an-email-address-contains-and-ends-with-com","title":"Q61. You\u2019re creating a registration system. Write a Python program that checks if an email address contains \u201c@\u201d and ends with \u201c.com\u201d","text":""},{"location":"assignments/Assignment-fresher/#q62-youre-building-a-customer-feedback-system-write-a-python-program-to-find-the-most-frequently-occurring-word-in-a-customer-feedback-string","title":"Q62. You\u2019re building a customer feedback system. Write a Python program to find the most frequently occurring word in a customer feedback string","text":""},{"location":"assignments/Assignment-fresher/#q63-youre-helping-with-seo-for-a-website-write-a-python-program-that-counts-how-many-times-specific-keywords-appear-in-a-webpage-text","title":"Q63. You're helping with SEO for a website. Write a Python program that counts how many times specific keywords appear in a webpage text","text":""},{"location":"assignments/Assignment-fresher/#q64-you-are-developing-a-secure-messaging-app-write-a-python-program-that-takes-a-message-from-the-user-and-reverses-each-word-in-the-sentence","title":"Q64. You are developing a secure messaging app. Write a Python program that takes a message from the user and reverses each word in the sentence","text":""},{"location":"assignments/Assignment-fresher/#q65-you-are-tasked-with-cleaning-up-user-data-write-a-python-program-that-removes-all-special-characters-from-a-string","title":"Q65. You are tasked with cleaning up user data. Write a Python program that removes all special characters from a string","text":""},{"location":"assignments/Assignment-fresher/#for-cr-or-toppers","title":"FOR CR OR Toppers","text":""},{"location":"assignments/Assignment-fresher/#q66-perform-the-following-part-of-the-assignment","title":"Q66. Perform the following part of the assignment","text":"<p>Prompt :</p> <ul> <li>Press 1 to Add employee</li> <li>Press 2 to exit</li> </ul> <p>Read Employee Data from the Keyboard and print data</p> <p>Employee No : 100  Employee Name : Sunny  Employee Salary : 1000.0  Employee Address : Mumbai  Employee Married ? : True (boolean value)</p> <ol> <li>Prompt to add another user enter yes, y to exit enter no, n</li> <li>Display all Employee information</li> <li>Store the result in file.</li> </ol>"},{"location":"assignments/Assignment-fresher/#q66-perform-the-following-steps-on-the-attached-file","title":"Q66.  Perform the following steps on the attached file","text":"<ul> <li>The file contains English words corresponding to its Punjabi words.</li> <li>Perform search operation in such a way that it returns English words by taking Punjabi words as an input.</li> </ul>"},{"location":"assignments/Assignment-fresher/#q67-assignment-number-to-word-converter","title":"Q67. Assignment: Number to Word Converter","text":"<ul> <li>Your task is to write a program that takes an integer as input from the user and displays the corresponding word for that number. For example, if the user enters \"1\", the program should display \"one\". The program should be able to handle numbers between 0 and 999.</li> <li>Here are the rules for the conversion:</li> <li>Numbers 0 to 20 should be converted to their corresponding word (e.g.. 0 should be \"zero\", 1 should be \"one\", and so on).</li> <li>Numbers from 21 to 99 should be converted to words by combining the words for the tens place and the ones place. For example, 23 should be \"twenty-three\", and 99 should be \"ninety-nine\".</li> <li>Numbers from 100 to 999 should be converted to words by combining the words for the hundreds place, the tens place, and the ones place. For example, 325 should be \"three hundred twenty-five\".</li> <li>Your program should display an error message if the user enters a number outside of the range of 0 to 99999.</li> </ul>"},{"location":"assignments/Assignment-fresher/#q68-bank-account-creation-with-random-account-numbers-and-initial-balance","title":"Q68. Bank Account Creation with Random Account Numbers and Initial Balance","text":"<ul> <li>You are hired by a new bank to develop a system for automatically generating account numbers when a customer creates a new bank account. The system needs to:</li> <li>Generate a random, unique account number for each customer. The account number should be a 10-digit number.</li> <li>Allow the customer to set an initial deposit for the account, which must be greater than or equal to zero.</li> <li>If the customer tries to deposit a negative amount, the account creation should be denied.</li> <li>Each account should have a customer name attached to it.</li> <li>After creating the account, display the account number, customer name, and initial balance.</li> <li>The account should be stored in a dictionary, with the account number as the key and the account details (name and balance) as the value.</li> </ul>"},{"location":"assignments/Assignment-fresher/#q69-username-generator-for-email-system","title":"Q69. Username Generator for Email System","text":"<ul> <li>A company wants to automate the creation of email usernames for new employees. The email address should be generated based on the employee's full name. Write a Python program that:</li> <li>Takes the employee's full name (first and last name) as input.</li> <li>Converts the name into a lowercase username with the format first initial + last name (e.g., John Doe \u2192 jdoe).</li> <li>If the last name contains any spaces or special characters, they should be removed from the username.</li> <li>Ensure that the final username contains only lowercase letters and no spaces.</li> <li>If the username already exists, append a number to it (e.g., jdoe1, jdoe2).</li> <li>Hint: You will need to use string manipulation functions to handle formatting and ensure uniqueness.</li> </ul>"},{"location":"assignments/Assignment-fresher/#q69-palindrome-substring-finder","title":"Q69. Palindrome Substring Finder","text":"<ul> <li>You are working on a project to detect palindrome substrings in a given string. Write a Python program that:</li> <li>Takes a sentence as input.</li> <li>Identifies and returns all unique palindromic substrings (strings that read the same forward and backward) of at least 3 characters.</li> <li>Your program should ignore punctuation and spaces while checking for palindromes, but should return the palindromic substrings with their original punctuation intact.</li> <li>Example:</li> <li>Input: \"A man, a plan, a canal: Panama\"</li> <li>Output: [\"ama\", \"ana\", \"A man a plan a canal Panama\"]</li> <li>Hint: Use string slicing and helper functions to clean the input, check for palindromes, and extract substrings.</li> </ul>"},{"location":"assignments/Assignment-fresher/#q70-encrypted-message-decryption","title":"Q70. Encrypted Message Decryption","text":"<ul> <li>You have intercepted a secret message that has been encrypted by reversing the words and shifting the characters in the alphabet by a certain number. Write a Python program that:</li> <li>Takes a reversed encrypted message and the shift value as input.</li> <li>Reverses the entire message so the words are in the correct order.</li> <li>Shifts the characters back by the given shift value to reveal the original message (e.g., a shift of 2 means 'c' becomes 'a', 'b' becomes 'z', etc.).</li> <li>Ensure that only alphabetic characters are shifted (leave spaces and punctuation unchanged).</li> <li>Example:</li> <li>Encrypted Input: \"khoor zruog\" (with a shift of 3)</li> <li>Decrypted Output: \"hello world\"</li> <li>Hint: You will need to use string methods and implement a custom Caesar cipher for character shifting.</li> </ul>"},{"location":"assignments/Assignment-fresher/#q71-longest-word-without-repeated-characters","title":"Q71. Longest Word Without Repeated Characters","text":"<ul> <li>You are developing a word puzzle game. One of the challenges is to find the longest word in a sentence where no letter repeats. Write a Python program that:</li> <li>Takes a sentence as input.</li> <li>Splits the sentence into individual words.</li> <li>Finds and returns the longest word where no letter appears more than once.</li> <li>If there are multiple words of the same length, return the one that appears first in the sentence.</li> <li>Example:</li> <li>Input: \"I am programming with Python\"</li> <li>Output: \"with\"</li> <li>Hint: You'll need to check each word for uniqueness using string operations and sets.</li> </ul>"},{"location":"assignments/Assignment-fresher/#q72-anagram-grouping-system","title":"Q72. Anagram Grouping System","text":"<ul> <li>You are working for a word game company, and they want a system to group words that are anagrams of each other. Write a Python program that:</li> <li>Takes a list of words as input (e.g., [\"listen\", \"silent\", \"enlist\", \"google\", \"gogole\", \"god\"]).</li> <li>Groups all words that are anagrams of each other (words that can be rearranged to form the same string) into lists.</li> <li>Outputs a list of lists, where each sublist contains the anagram group.</li> <li>Example:</li> <li>Input: [\"listen\", \"silent\", \"enlist\", \"google\", \"gogole\", \"god\", \"dog\"]</li> <li>Output: [[\"listen\", \"silent\", \"enlist\"], [\"google\", \"gogole\"], [\"god\", \"dog\"]]</li> <li>Hint: You can use sorting or dictionaries with string operations to identify anagram groups.</li> </ul>"},{"location":"assignments/assignment-tech/","title":"ASSIGNMENT","text":""},{"location":"assignments/assignment-tech/#1-problem","title":"1. Problem:","text":"<p>You are given a list of file paths and a list of allowed file extensions. Your task is to return a dictionary where each key is a file extension from the allowed list, and the value is the count of files that have that extension. If a file has an extension that is not in the allowed list, it should be ignored.  </p>"},{"location":"assignments/assignment-tech/#example-input","title":"Example Input:","text":"<pre><code>file_paths = [\n    \"/home/user/docs/report.pdf\",\n    \"/home/user/docs/data.csv\",\n    \"/home/user/images/photo.jpg\",\n    \"/home/user/docs/notes.txt\",\n    \"/home/user/docs/summary.pdf\",\n    \"/home/user/music/song.mp3\"\n]\nallowed_extensions = [\"pdf\", \"csv\", \"txt\"]\n</code></pre>"},{"location":"assignments/assignment-tech/#expected-output","title":"Expected Output:","text":"<pre><code>{\n    \"pdf\": 2,\n    \"csv\": 1,\n    \"txt\": 1\n}\n</code></pre>"},{"location":"assignments/assignment-tech/#instructions","title":"Instructions:","text":"<ol> <li>Extract the file extension from each file path.  </li> <li>If the extension is in the <code>allowed_extensions</code> list, count its occurrences.  </li> <li>Return a dictionary where the keys are the file extensions and the values are their counts.</li> </ol> <p>sol</p> <pre><code>from pathlib import Path\n\nfile_paths = [\n    \"/home/user/docs/report.pdf\",\n    \"/home/user/docs/data.csv\",\n    \"/home/user/images/photo.jpg\",\n    \"/home/user/docs/notes.txt\",\n    \"/home/user/docs/summary.pdf\",\n    \"/home/user/music/song.mp3\"\n]\nallowed_extensions = [\"pdf\", \"csv\", \"txt\"]\n# d = {k:0 for k in allowed_extensions}\nd = {}\npath = Path(\"/home/user/docs/report.pdf\")\n\nfor path in file_paths: \n    k = str(Path(path).suffix.lstrip('.'))\n    d[k] = d.get(k,0) + 1\nprint(d)\n</code></pre> <p>output</p> <p>{'pdf': 2, 'csv': 1, 'jpg': 1, 'txt': 1, 'mp3': 1}</p>"},{"location":"interview-questions/","title":"Python Interview Questions","text":"<p>Common Python questions asked in technical interviews.</p>"},{"location":"interview-questions/#find-an-element-in-a-sorted-list-with-binary-sort","title":"find an element in a sorted list with binary sort","text":"<pre><code>def binary_search(sorted_list, target):\n    low = 0\n    high = len(sorted_list) - 1\n\n    while low &lt;= high:\n        mid = (low + high) // 2\n        if sorted_list[mid] == target:\n            return mid  # Element found, return its index\n        elif sorted_list[mid] &lt; target:\n            low = mid + 1  # Target is in the right half\n        else:\n            high = mid - 1 # Target is in the left half\n    return -1  # Element not found\n\n# Example Usage:\nmy_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\ntarget_value = 11\nresult = binary_search(my_list, target_value)\n\nif result != -1:\n    print(f\"Element {target_value} found at index {result}\")\nelse:\n    print(f\"Element {target_value} not found in the list\")\n</code></pre>"},{"location":"interview-questions/#find-the-missing-number","title":"Find the Missing Number","text":"<p>https://www.geeksforgeeks.org/dsa/find-the-missing-number/</p> <pre><code>def missingNum(arr):\n    n = len(arr) + 1\n\n    # Iterate from 1 to n and check\n    # if the current number is present\n    for i in range(1, n + 1):\n        found = False\n        for j in range(n - 1):\n            if arr[j] == i:\n                found = True\n                break\n\n        # If the current number is not present\n        if not found:\n            return i\n    return -1\n\nif __name__ == '__main__':\n    arr = [8, 2, 4, 5, 3, 7, 1]\n    print(missingNum(arr))\n</code></pre>"},{"location":"interview-questions/#missing-in-a-sorted-array-of-natural-numbers","title":"Missing in a Sorted Array of Natural Numbers","text":"<ol> <li>find the missing elements from the sorted array https://takeuforward.org/arrays/find-the-missing-number-in-an-array/</li> </ol>"},{"location":"interview-questions/#program-for-binary-to-decimal-conversion","title":"Program for Binary To Decimal Conversion","text":"<p>https://www.geeksforgeeks.org/dsa/program-binary-decimal-conversion/</p>"},{"location":"interview-questions/#check-whether-second-string-can-be-formed-from-characters-of-first-string","title":"Check whether second string can be formed from characters of first string","text":""},{"location":"interview-questions/#program-to-print-fibonacci-series","title":"Program to Print Fibonacci Series","text":"<pre><code># Function to print fibonacci series\ndef print_fib(n):\n    if n &lt; 1:\n        print(\"Invalid Number of terms\")\n        return\n\n    # When number of terms is greater than 0\n    prev1 = 1\n    prev2 = 0\n\n    print(prev2, end=\" \")\n\n    # If n is 1, then we do not need to\n    # proceed further\n    if n == 1:\n        return\n\n    print(prev1, end=\" \")\n\n    # Print 3rd number onwards using\n    # the recursive formula\n    for i in range(3, n + 1):\n        curr = prev1 + prev2\n        prev2 = prev1\n        prev1 = curr\n        print(curr, end=\" \")\n\n# Driver code\nif __name__ == \"__main__\":\n    n = 9\n    print_fib(n)\n</code></pre>"},{"location":"interview-questions/#finding-the-most-frequent-character-in-a-string","title":"Finding the most frequent character in a string","text":"<pre><code>import collections\ns = \"helloworld\"\nprint(collections.Counter(s).most_common(1)[0])\n</code></pre>"},{"location":"interview-questions/#maximum-consecutive-repeating-character-in-string","title":"Maximum consecutive repeating character in string","text":"<pre><code># Python program to find the maximum consecutive\n# repeating character in given string\n\n# Function to find out the maximum repeating\n# character in given string\ndef maxRepeating(s):\n    n = len(s)\n    maxCnt = 0\n    res = s[0]\n\n    # Find the maximum repeating character\n    # starting from s[i]\n    for i in range(n):\n        cnt = 0\n        for j in range(i, n):\n            if s[i] != s[j]:\n                break\n            cnt += 1\n\n        # Update result if required\n        if cnt &gt; maxCnt:\n            maxCnt = cnt\n            res = s[i]\n\n    return res\n\nif __name__ == \"__main__\":\n    s = \"aaaabbaaccde\"\n    print(maxRepeating(s))\n</code></pre>"},{"location":"interview-questions/#bubble-sort-with-python","title":"Bubble Sort with Python","text":"<pre><code>mylist = [64, 34, 25, 12, 22, 11, 90, 5]\n\nn = len(mylist)\nfor i in range(n-1):\n  for j in range(n-i-1):\n    if mylist[j] &gt; mylist[j+1]:\n      mylist[j], mylist[j+1] = mylist[j+1], mylist[j]\n\nprint(mylist)\n</code></pre>"},{"location":"interview-questions/Python_MCQ/","title":"Python MCQ","text":""},{"location":"interview-questions/Python_MCQ/#python-question","title":"PYTHON QUESTION","text":""},{"location":"interview-questions/Python_MCQ/#q1-suppose-you-have-a-bank-account-number-what-do-you-think-will-be-its-data-type","title":"Q1. Suppose you have a bank account number, what do you think will be its data type?","text":"<p>Example: 0000777888119</p> <ul> <li>a. int</li> <li>b. string</li> <li>c. float</li> </ul>"},{"location":"interview-questions/Python_MCQ/#q2-assume-that-there-are-five-variables-with-the-values-given-below","title":"Q2. Assume that there are five variables with the values given below","text":"<pre><code>num1=10\nnum2=5 \nnum3=0 \nnum4=2 \nnum5=10 \n(num1==num5) and ((num2-num4*num3) == (num2-num3))\n</code></pre> <p>Which among the expressions provide the same result as the above expression?</p> <ul> <li>a) (num2-num4*num3) &lt;= ((num2-num4)*num3)</li> <li>b) not(num3&gt;=num4) and (num5/num2 == num4)</li> <li>c) not(num5&gt;num4) or (num4+num2)&gt;num1</li> <li>d) (num1==num5) and (not(num5/num2 == num1/num2))</li> </ul>"},{"location":"interview-questions/Python_MCQ/#q3-what-is-the-output-of-the-below-code-snippet","title":"Q3 What is the output of the below code snippet?","text":"<pre><code>num1 = 10\nnum2 = 5\nnum2 *= num1\nprint(num2)\n</code></pre> <p>This is same as num2=num2*num1. Python allows you to do this kind of short circuiting with any arithmetic operator</p> <ul> <li>a) 50</li> <li>b) 10</li> <li>c) 25</li> <li>d) 100</li> </ul>"},{"location":"interview-questions/Python_MCQ/#q4-what-is-the-output-of-the-below-code-snippet","title":"Q4 What is the output of the below code snippet?","text":"<pre><code>num1 = 50\nnum2 = 2\nnum3 = 3\nnum4 = 8\nresult = num1/num4-num3*num2+num4\nprint(result)\n</code></pre> <ul> <li>a) 100</li> <li>b) 14.5</li> <li>c) 8.25</li> <li>d) -23.75</li> </ul>"},{"location":"interview-questions/Python_MCQ/#q5-identify-the-below-expressions-which-would-result-in-false","title":"Q5 Identify the below expressions which would result in False?","text":"<ol> <li>True and True</li> <li>False and True</li> <li>1==1 and 2==1</li> <li>1==1 and 2!=1</li> <li>True and 1==1</li> </ol> <ul> <li>a) 2, 3</li> <li>b) 1, 3, 5</li> <li>c) 3, 4</li> <li>d) 4, 5</li> </ul>"},{"location":"interview-questions/Python_MCQ/#q6-identify-the-below-expressions-which-would-result-in-true","title":"Q6 Identify the below expressions which would result in True?","text":"<ol> <li>\"Yes\" == \"Ok\"</li> <li>not(True and False)</li> <li>not(\"Landed\"\"Landed\" and \"Flight\"\"F101\")</li> <li>1==1 and (not(1==1 or 1==0))</li> </ol> <ul> <li>a) 2, 3</li> <li>b) 1, 2</li> <li>c) 1. 3</li> <li>d) 2, 4</li> </ul>"},{"location":"interview-questions/Python_MCQ/#q7-given-below-is-a-dataframe-df-choose-the-right-option-when-the-given-snippet-executes","title":"Q7 Given below is a DataFrame df, choose the right option when the given snippet executes","text":"<pre><code>import pandas as pd\ndf = pd.DataFrame([[54.2,'a'],[658,'d']],\n                  index = list('pq'))\ndf.columns = df.index\nprint(df.columns.values)\n</code></pre> <ul> <li>a) [0, 1]</li> <li>b) ['p', 'q']</li> <li>c) RangeIndex(start=0, stop=2, step=1)</li> <li>d) Index(['p', 'q'], dtype='object')</li> </ul>"},{"location":"interview-questions/Python_MCQ/#q8-state-true-or-false","title":"Q8 State True or False","text":"<p>A pandas dataframe of size(3, 3) can be constructed just by passing 5 values to it.</p> <pre><code>a) True\nb) False\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q9-state-true-or-false","title":"Q9 State True or False","text":"<p>Pandas dataframe inherit the properties of numpy arrays</p> <pre><code>a) True\nb) False\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q10-what-is-the-output-of-the-below-code-snippet","title":"Q10. What is the output of the below code snippet?","text":"<p>for var1,var2 in (1,2),(3,4):      print(var1+var2,end=\" \")</p> <pre><code>a) 4 6\nb) 10\nc) 3 7\nd) TypeError\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q11-find-the-output-of-the-below-python-code","title":"Q11. Find the output of the below Python code","text":"<p>Note: Assume that necessary imports have been done.</p> <pre><code>import math \nnum_list=[32.5,44.3,66.6,78.4,99.2]\nfor num in range(0,len(num_list)):\n    num_list[num]=math.ceil(num_list[num])\nnum_list.reverse()\nprint(num_list)\n</code></pre> <pre><code>a) [33, 45, 67, 79, 100]\nb) [100, 79, 67, 45, 33]\nc) [33, 44, 67, 78, 99]\nd) [99, 78, 67, 44, 33]\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q12-what-is-the-output-of-the-below-code-snippet","title":"Q12 What is the output of the below code snippet?","text":"<pre><code>list = [\"ABC\", \"DEF\", \"GHI\", 100]\nstr=\"\"\nfor item in list:\n    str+=str(item)\nprint(str)\n</code></pre> <pre><code>a) TypeError\nb) ABCDEFGHI100\nc) ValueError\nd) ABCDEFGHI\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q13-what-is-the-output-of-the-below-code-snippet","title":"Q13 What is the output of the below code snippet?","text":"<pre><code>def remove_odd(list1):\n    for index in range(len(list1)):\n        if list1[index] % 2 == 0:\n            list1.remove(list1[index])\nlist1 = [1,2,3,4,5]\nremove_odd(list1)\nprint(list1)\n</code></pre> <pre><code>a) [1,3,5]\nb) IndexError\nc) [1,2,4,5]\nd) [1,2,3,4,5]\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q14-what-is-the-output-of-the-below-code-snippet","title":"Q14 What is the output of the below code snippet?","text":"<pre><code>list1 = [10,20,30,40,50,60]\nfor num in len(list1):\n    print(num,end=\"\")\n</code></pre> <pre><code>a) 6\nb) 10 20 30 40 50 60\nc) 60\nd) Error\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q15-what-is-the-output-of-the-below-code-snippet","title":"Q15 What is the output of the below code snippet?","text":"<pre><code>def average(list1):\n    sum, count = 0,0\n    for index in range(0, len(list1) -1):\n        sum += list1[index]\n        count += 1\n    return sum/count\nprint(average([1,2,3,4,5]))\n</code></pre> <pre><code>a) 2.5\nb) 2\nc) 3.0\nd) 3\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q16-what-is-the-output-of-the-below-code-snippet","title":"Q16 What is the output of the below code snippet?","text":"<pre><code>result = 0\nlist1 = [10,20,30]\nlist2 = [1,2]\nfor num in range(len(list1)):\n    for num in range(len(list2)):\n        result+=list1[num]+list2[num]\nprint(result)\n</code></pre> <pre><code>a) 22\nb) Error\nc) 129\nd) 99\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q17-what-is-the-output-of-the-below-code-snippet","title":"Q17 What is the output of the below code snippet?","text":"<pre><code> def move(list1, list2):\n    for num in list1:\n        list2.append(num)\n        list1.remove(num)\nlist1 = [1,2,3,4,5]\nlist2 = [10]\nmove(list1,list2)\nprint((list1, list2))\n</code></pre> <pre><code>a) ([],[10,1,2,3,4,5])\nb) ([1,2,3,4,5],[10])\nc) ([2, 4], [10, 1, 3, 5])\nd) ValueError\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q18-what-would-be-the-output-of-python-code-given-below","title":"Q18 What would be the output of Python code given below?","text":"<pre><code>elements=[2,5,6,0]\ntry:\n    div=elements[4]/elements[3]\nexcept ZeroDivisionError:\n    print(\"Infinity\")\nexcept IndexError:\n    print(\"Index Error\")\nexcept Exception:\n    print(\"0\")\nfinally:\n    print(\"In finally block\")\n</code></pre> <pre><code>a. Infinity\n    In finally block\nb. 0\n    In finally block\nc. Index Error\n    In finally block\nd. Index Error\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q19-consider-the-following-list-of-pan-card-numbers","title":"Q19 Consider the following list of pan card numbers","text":"<pre><code>pancard_list=[\"AABGT6715H\", \"UFFAC4352T\", \"IFSBD9163K\", \"JOOEC1225H\",\"RWXAFE187B\"] \nWhat is the output of the below two print statements?\nprint(pancard_list[3][6], end=\" \")\nprint(pancard_list[4][3:])\n</code></pre> <pre><code>a) 9 OEC1225H\nb) 2 AFE187B\nc) 9163K O\nd) 225H A\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q20-what-is-the-output-of-the-code-given-below","title":"Q20 What is the output of the code given below?","text":"<pre><code>message=\"welcome to Mysore\"\nword=message[-7:]\nif(word==\"mysore\"):\n    print(\"got it\")\nelse:\n    message=message[3:14]\n    print(message)\n</code></pre> <pre><code>a) come to Myso\nb) come to Mys\nc) lcome to Mys\nd) lcome to Myso\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q21-what-is-the-output-of-the-below-code","title":"Q21 What is the output of the below code?","text":"<pre><code>song=\"JINGLE Bells jingle Bells Jingle All The Way\"\nsong.upper()\nsong_words=song.split()\ncount=0\nfor word in song_words:\n    if(word.startswith(\"jingle\")):\n        count=count+1\nprint(count)\n</code></pre> <pre><code>a) 0\nb) 3\nc) 2\nd) 1\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q22-which-among-the-following-statements-are-correct-with-respect-to-functions","title":"Q22 Which among the following statements are CORRECT with respect to functions?","text":"<p>Choose THREE correct options.</p> <pre><code>a) It is a section of a program that performs a specific task \nb) It helps to clearly separate tasks within a program \nc) Control can be transferred back and forth between different functions based on need \nd) It doesn't help to achieve modularity\ne) It doesn't support reusability\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q21-match-the-following-based-on-collect_tax-function-given-below","title":"Q21 Match the following based on collect_tax() function given below","text":"<pre><code>def collect_tax(x,y):\n    tax=x+y\n    return tax\na=5000\nb=12000\nresult=collect_tax(a,b)\nprint(result)\n</code></pre> <pre><code>a) def collect_tax(x,y): (Function call)\nb) collect_tax(a,b) (Function signature)\nc) a,b (Actual arguments)\nd) x,y (Formal arguments)\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q22-choose-the-most-appropriate-function-call-needed-at-line-4-to-get-the-output-as-result-4","title":"Q22 Choose the most appropriate function call needed at line 4 to get the output as \u2018Result: 4\u2019","text":"<pre><code>def check_value(message,num):\n    msg=message[:num]\n    return len(msg)\n#function call statement\nprint(\"Result:\", result)\n</code></pre> <pre><code>a) result=check_value(\u2018Infosys\u2019,3)\nb) result=check_value(4,'Infosys\u2018)\nc) result=check_value('Infosys',4) \nd) result=check_value('Infosys',len('Infosys'))\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q23-predict-the-output-of-the-following-code-snippet","title":"Q23 Predict the output of the following code snippet","text":"<pre><code>def func1():\n    print(\"Inside Func1\")\n    return 10\n\ndef func2():\n    print(\"Inside Func2\")\n    num=func1()\n    return num\n\ndef func3():\n    print(\"Inside Func3\")\n    num=func2()\n    num=num*5\n    return num\n\nval=func3()\nprint(val)\n</code></pre> <pre><code>a). Inside Func3\n    Inside Func2\n    Inside Func1\n    50\nb). Inside Func1\n    Inside Func2\n    Inside Func3\n    50\nc). Inside Func3\n    Inside Func2\n    Inside Func1\n    10\nd). Inside Func1\n    Inside Func2\n    Inside Func3\n    10\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q24-what-is-the-output-of-the-following-code-snippet","title":"Q24 What is the output of the following code snippet?","text":"<pre><code>def verify(num1,num2):\n    if num1 &gt; num2:\n        return num1\n    elif num1 == num2:\n        return 1\n    else:\n        return num2\n\ndef display(arg1,arg2):\n    if(verify(arg1,arg2)==arg1):\n        print(\"A\")\n    elif(verify(arg1,arg2)==1):\n        print(\"C\")\n    else:\n        print(\"B\")\ndisplay(1000,3500)\n</code></pre> <pre><code>a) A\nb) B \nc) C\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q25-how-many-times-executed-will-be-printed-in-the-output","title":"Q25 How many times \"executed\" will be printed in the output?","text":"<pre><code>for variable_1 in range(1,5,-1):\n    print(\"executed\")\n</code></pre> <pre><code>a) 0\nb) 5\nc) 1\nd) 4\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q26-how-many-times-tpf-will-be-printed-in-the-output","title":"Q26 How many times \"TPF\" will be printed in the output?","text":"<pre><code>grade_list = [\"A+\",\"A-\",\"B\",\"B+\",\"A+\",\"A+\",\"A-\"]\nfor grade in grade_list:\n    if grade == \"A+\":\n        print(\"TPF\")\n    else:\n        print(\"Not TPF\")\n</code></pre> <pre><code>a) 2\nb) 3\nc) 4\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q27-predict-the-output-of-the-following-code-snippet","title":"Q27 Predict the output of the following code snippet","text":"<pre><code>number=28\nfor num in range(25,30):\n    if(number&gt;num):\n        print(num)\n    else:\n        print(num)\n        break\n</code></pre> <pre><code>a. 28\nb. 25\n    26\n    27\n    28\nc. 25\n    26\n    27\nd. 25\n    26\n    27\n    28\n    29\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q28-predict-the-output-of-the-following-code-snippet","title":"Q28 Predict the output of the following code snippet","text":"<pre><code>for num in 23, 45, 50, 65, 76, 90:\n    if(num%5!=0):\n        continue\n    if(num%10==0):\n        print(num, end=\" \")\n        continue\n    if(num%3==0):\n        print(num, end=\" \")\n</code></pre> <pre><code>a) 45 50 90\nb) 45 50 65 90\nc) 45 90\nd) 23 76\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q29-predict-the-output-of-the-following-code-snippet","title":"Q29 Predict the output of the following code snippet","text":"<pre><code>for number in 10,15:\n    for counter in range(1,3):\n        print(number*counter, end=\" \")\n</code></pre> <pre><code>a) 10 20 15 30\nb) 10 20 30 15 30 45\nc) 10 15 20 30 30 45\nd) 10 15 20 30\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q30-what-should-be-the-value-of-the-variables-num1-and-num2-in-the-code-below-if-the-output-expected-is-4","title":"Q30. What should be the value of the variables num1 and num2 in the code below if the output expected is 4?","text":"<pre><code>num1=?\nnum2=?\nwhile(num1&gt;=2):\n    if(num1&gt;num2):\n        num1=num1/2\n    else:\n        print(num1)\n        break\n</code></pre> <pre><code>a) 12, 5\nb) 8, 2\nc) 16, 6\nd) 16, 2\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q31-predict-the-output-of-the-following-code-snippet","title":"Q31 Predict the output of the following code snippet","text":"<pre><code>1 3 5 7 9\n0 2 4 6 8\n0 1 3 5 7 9\n1 3 5 7\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q32-what-will-be-printed-in-the-output-after-the-executing-the-code-below","title":"Q32 What will be printed in the output after the executing the code below?","text":"<pre><code>numbers_list = [98,45,60,71,90]\ncount = 10\nfor number in numbers_list:\n    if number % 10 == 0:\n        count -= 1\n        continue\n    counter = 0\n    while counter &lt; 2:\n        last_digit = number % 10\n        number = number // 10\n        if last_digit &gt; 4:\n            count += 1\n            break\n        count += 1\n        counter += 1\nprint(count)\n</code></pre> <pre><code>a) 12\nb) 13\nc) 11\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q33-what-is-the-output-of-the-following-code-snippet","title":"Q33 What is the output of the following code snippet?","text":"<pre><code>sample_dict = {'a':1,'b':2}\nsample_dict.update({'b':5, 'c':10 })\nprint(sample_dict.get('b'), sample_dict.get('c'))\n</code></pre> <pre><code>a) 5,10\nb) 2 None\nc) 2 10\nd) 5 None\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q34-given-the-list-list1-education","title":"Q34 Given the list list1 = [\"e\",\"d\",\"u\",\"c\",\"a\",\"t\",\"i\",\"o\",\"n\"]","text":"<p>What expression will result in the list [\"c\", \"a\", \"t\"] ?</p> <pre><code>a) list1[2:5]\nb) list1[3:6] \nc) list1[5:2]\nd) list1[3:5]\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q35-what-is-the-output-of-the-following-code-snippet","title":"Q35 What is the output of the following code snippet?","text":"<pre><code>num_list = [100.5,30.465,-1.22,20.15]\nnum_list.insert(1, -100.5)\nnum_list.pop(0)\nnum_list.sort()\nprint(num_list[0])\n</code></pre> <pre><code>a) 100.5\nb) -100.5 \nc) 30.465\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q36-which-among-the-following-statements-may-result-in-an-error","title":"Q36 Which among the following statements may result in an error?","text":"<p>Assume that the statements are executed in the order in which it is written.</p> <pre><code>a. list1=[5,10,15,20,25]\nb. print(len(list1))\nc. print(list1[4])\nd. print(list1[5])\ne. print(list1[4:5])\nf. list1[2]=12\ng. print(list1)\nh. list1=list1+[8,9]\n</code></pre> <pre><code>a) b\nb) d\nc) e\nd) h\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q37-what-is-the-output-of-the-following-code-snippet","title":"Q37 What is the output of the following code snippet?","text":"<pre><code>[0, 0, 0, 0, 0]\n[10, 20, 30, 40, 50]\n[0, 0, 10, 20, 30]\n[0, 10, 20, 30, 40]\n</code></pre>"},{"location":"interview-questions/Python_MCQ/#q38-how-many-comparisons-will-take-place-before-flag-becomes-1","title":"Q38 How many comparisons will take place before flag becomes 1?","text":"<pre><code>num_list = [1,33,31,5,26,7,8,92,10]\nnum = 7\nflag = 0\nfor item in num_list:\n    if(item == num):\n        flag = 1\n    else:\n        continue\nif(flag == 1):\n    print(num, \"found in the list\")\nelse:\n    print(num, \"NOT found in the list\")\n ```\n\n    a) 6 \n    b) 5\n    c) 1\n    d) 9\n\n### Q39. Given listA = [1,2,3,4,5,5,6,6,7,7,7,8,8,8,8]\n\nWhat will be the output of set(listA)?\n\n    a) 1,2,3,4\n    b) 5,6,7,8\n    c) 1,2,3,4,5,6,7,8 \n    d) The statement will not return any element\n\n### Q40. What will be the output of the following code?\n\n```py\na = [1, 2, 3]\nb = [1, 2, 3]\nprint(a == b)\nprint(a is b)\n</code></pre> <pre><code>A) True True\nB) True False\nC) False True\nD) False False\n</code></pre>"},{"location":"interview-questions/coding/","title":"Coding Question","text":""},{"location":"interview-questions/coding/#721-accounts-merge-asked-in-amazon-medium","title":"721. Accounts Merge (asked in amazon ) Medium","text":"<p>Problem link: https://leetcode.com/problems/accounts-merge/editorial/ Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.</p> <p>Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.</p> <p>After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.</p> <p>Example 1:</p> <pre><code>Input: accounts = [\n[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],\n[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],\n[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]\n]\nOutput: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\n\n\nExplanation:\nThe first and second John's are the same person as they have the common email \"&lt;johnsmith@mail.com&gt;\".\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'],\n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\nExample 2:\n\nInput: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]\nOutput: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]\n\n\nConstraints:\n\n1 &lt;= accounts.length &lt;= 1000\n2 &lt;= accounts[i].length &lt;= 10\n1 &lt;= accounts[i][j].length &lt;= 30\naccounts[i][0] consists of English letters.\naccounts[i][j] (for j &gt; 0) is a valid email.\n</code></pre> <pre><code>class Solution:\n    def accountsMerge(self, accounts: List[List[str]]) -&gt; List[List[str]]:\n        names = [acc[0] for acc in accounts]\n        new = [set(acc[1:]) for acc in accounts]\n\n        merged = True\n        while merged:\n            merged = False\n            i = 0\n\n            while i &lt; len(new):\n                j = i + 1\n                while j &lt; len(new):\n                    if new[i] &amp; new[j]:\n                        new[i] |= new[j]\n                        del new[j]\n                        del names[j]\n                        merged = True\n\n                    else:\n                        j += 1\n                i += 1\n\n        for i, name in enumerate(names):\n            new[i] = [name] + sorted(new[i])\n        return new\n</code></pre> <pre><code>str = \"I \\nlove \\tGeeksforGeeks\"\nprint(repr(str))\n'I \\nlove \\tGeeksforGeeks\n</code></pre>"},{"location":"interview-questions/coding/#given-a-string-s-abcvderndsgh-and-an-integer-k-2-divide-the-string-into-segments-of-length-k-and-reverse-every-alternate-2-segments-starting-with-skipping-the-first-2-segments","title":"Given a string <code>s = \"abcvderndsgh\"</code> and an integer <code>k = 2</code>, divide the string into segments of length <code>k</code>, and reverse every alternate 2 segments, starting with skipping the first 2 segments","text":"<p>Let\u2019s break it down:</p> <ol> <li>Divide the string into groups of <code>k</code> characters:</li> </ol> <ul> <li>With <code>k = 2</code>, <code>s = [\"ab\", \"cv\", \"de\", \"rn\", \"ds\", \"gh\"]</code></li> </ul> <ol> <li>Reverse every alternate pair of segments, starting after the first pair:</li> </ol> <ul> <li>Skip the first two: <code>[\"ab\", \"cv\"]</code></li> <li>Reverse the next two: <code>[\"rn\", \"de\"] \u2192 [\"de\", \"rn\"]</code></li> <li>Skip or stop (if fewer than 2 remain), last two: <code>[\"ds\", \"gh\"] \u2192 not reversed</code></li> </ul> <ol> <li>Final sequence: <code>[\"ab\", \"cv\", \"de\", \"rn\", \"ds\", \"gh\"]</code></li> </ol> <p>Join them back: <code>\"abcvdern dsgh\"</code></p> <p>But this would only make sense if your rule is to reverse every two \"words\" or chunks of size k after skipping the first two.</p> <pre><code>s = \"abcdefghij\"\nk = 2\n\nl = True\nd = ''\nfor i in range(0,len(s),k):\n    if l:\n        d = d + ''.join(reversed(s[i:i+k]))\n        l=False\n    else:\n        d = d+ s[i:i+k]\n        l = True\n\nprint(d)\n</code></pre> <pre><code>s = \"abcdefghij\"\nk = 2\n\nwords = []\n\nfor i in range(0, len(s), k):\n    # Reverse the chunk if it's at an even index, otherwise keep it as is\n    chunk = s[i:i+k]\n    words.append(''.join(reversed(chunk)) if (i // k) % 2 == 0 else chunk)\n\nprint(words)\n</code></pre> <p>Strings are called Identical if they contain the same characters.</p> <p>For example, \"good\" and \"god\" are similar since both consist of characters 'g', 'o', and 'd'.  However, ''python'' and 'yarn'' are not similar since they do not contain similar characters.</p> <p>Find the number of sets (x,y) such that 0 str.length - 1 and the two strings strs[i] and strs[j] are identical.</p> <p>Example 1: Input: strs = [\"good\",\"god\",\"yarn\",\"bac\",\"aabc\"] \u3002   Output: 2 Explanation: There are 2 pairs that satisfy the conditions: x=0 and y=1 :   both strs |0| and strs[1] only consist of characters ' g ','o' and 'd'.    x=3 and y=4 : both strs[3] and strs[4] only consist of characters ' a ', ' b ', and ' c '.</p> <p>Example 2: Input: words = [''cba\",\"nba\",\"dba\"] Output: 0 Explanation: Since there does not exist any pair that satisfies the conditions, we return 0. Constraints: 1 .length 1 [i].length strs[i] consist of only lowercase English letters.</p>"},{"location":"interview-questions/important/","title":"Important Interview Question","text":""},{"location":"interview-questions/important/#project-explain","title":"Project Explain","text":"<ul> <li>Name of project</li> <li>Domain of project</li> <li>Finace</li> <li>Accounting</li> <li>Bigdata</li> <li>Network</li> <li>Brife Description or High Level Design (uper uper se btana ha jaise partens or friend ko btana ha)</li> <li>Low Level Design (Technology,framwork,Database,Tools used)</li> </ul> <p>Challenges you Faced?</p> <ul> <li>2 day or in week learn new technnolgies</li> <li>like argu with client do like this not this</li> </ul>"},{"location":"interview-questions/important/#exp","title":"exp","text":"<p>My project name is abc which is office managment system. Baixally this project manages the emplyee information. Like which day an employee joins a comapny, an which day employee leves the company with all employee persional details also we have added the functionality to view, add ,remove and filter out employees details</p> <p>This project will be very benefical for all the companies to record all employee details, Now coming to low level design for this project we use python as a programing language and uses the Django framwork to create APIs and user interface we used sqlite data to store data and perforn the crud operation by using Django orm quries</p> <p>For desining purpose we use HTML,CSS and Bootsrap for my role and responsibity there are 2 peoplr one is for frontend and one is for backend part,I was workingon the backend part of the application. In Django using Python toc reate the API and maintain the databases. I am responsible for handling the dat-today issues and fine-tuining the applications for enhance performmance and implementing the MVT architecture in developing this project. I am working closly with frontend developers to intergrate the APIs and I am managing code versioning with GitHub. So that all about my project</p>"},{"location":"interview-questions/important/#claanging-situation","title":"Claanging situation","text":"<p>One situation when the person who started this project initially as a frontend developer left  So my manager asks me to take his duties as well, Till the time we find any new resource. So i Contributed as a frontend developer to this project for a while although i had no knowledge of HTML,CSS ,JS Boostrap,and i Learned all those technlogies and implemented the functionality So it was a quite a challengeing situation at the moment</p>"},{"location":"interview-questions/important/#any-advancement-to-this-project","title":"any advancement to this project","text":"<p>yes we have all eployees details we can add the functionality to provide them the certain permissions, like access card functionalities whenver a persion is entering an ODC he/she has to scan his access card this will indicate which person is accessing which ODC at what time</p> <p>So we can implement the functionalities inour projectas well</p> <p>Q1. What is the difference between is operator &amp; == operator in Python</p> <pre><code>Ans. In general 'is' operator meant for reference comparsion or address compression i.e if two reference are pointing to same object then only is operator returns True.\n== operator meants for cntent comparision i.e even though objects are different, if the content is the same then == operator return True\n</code></pre> <p>l1 = [10,20,30,40] l2 = [10,20,30,40]</p> <p>print(l1 is l2) # False</p> <p>id(l1) id(l2) # id are different</p> <p>print(l1 ==l2) # True</p> <p>l3 = l1</p> <p>print(l1 is l3) # True Q2. Explain about Ternary operator or conditional operator?</p> <pre><code> x = first_value if condition else second_value\n\nIf condition is True then first value will be considered otherewise second value will be considered.\n</code></pre>"},{"location":"interview-questions/important/#eg-1-find-max-of-2-given-number","title":"eg - 1  find Max of 2 given number","text":"<p>max = a if a &gt; b else b</p>"},{"location":"interview-questions/important/#nesting-of-ternary-operator-is-possible","title":"Nesting of ternary operator is possible","text":"<p>max a if a&gt;b and a&gt;c else b if b &gt;c else c Q3 . What are various in built data types avaliable in python?</p> <pre><code>first 5 are fundamental data types\n\n1. int\n2. float\n3. complex   \n4. str\n5. bool\n\n6. list\n7. touple\n8. set\n9. dict \n10. frozenset\n11. bytes\n12. bytearray\n13. range\n</code></pre> <p>Q4. Explain mutability and immutability with an example?</p> <ul> <li>Mutable means changeable where as immutable means non changeable.</li> <li>Onece we creates an object, if we are allowed to chances its content that object is said to be mutable object</li> <li>eg. list object is mutable</li> <li>l = [1,2,3,4]</li> <li>l[1] = 77</li> <li>Once we create an object, if we are not allowed to chnage its content then that object is said to be immutable.</li> <li>eg<ul> <li>t = (1,2,3,4)</li> <li>t[1] = 777 # typeError</li> </ul> </li> </ul> <p>Q5. In python which object are mutable and which are immutable ans. All fundamentaldata types are immutable</p> <ul> <li>list -&gt; mutable</li> <li>touple -&gt; immutable</li> <li>set -&gt; mutable</li> <li>Dict -&gt; mutable</li> <li>frozenset -&gt; immutable</li> <li>bytes -&gt; immutable</li> <li>bytearrray -&gt;mutable</li> <li>range -&gt; immutable</li> </ul> <p>Q.6 Explain the difference b/w list and touple? ans.</p> <ol> <li> <ul> <li>List is group of comma seperated values with square brackets and sequare braketa are mandatory        <code>l= [10,20,30,40]</code></li> <li>Tuple is a group of comma seprated value within parenthesis and paranthis are optional</li> <li><code>t = (10,20,30,40)</code></li> <li><code>t = 10,20,30,40</code></li> </ul> </li> <li> <ul> <li>List objects are mutable i.e once we creates list object, we can changes its content         <code>l[0] = 777</code></li> <li>Touple objects are immutable i.e once we create touple object,we are not allowed to change its content     <code>t[0] = 777 # typeError</code></li> </ul> </li> <li> <ul> <li>List object require more memory</li> <li>Touple objects require less memory</li> </ul> </li> <li> <ul> <li>List object won't be reusable</li> <li>Touple object are reusable</li> </ul> </li> <li> <ul> <li>Performance of list is low i.e operation of list object require more time</li> <li>Performance of touple is high i.e operations on touple object required less time</li> </ul> </li> <li> <ul> <li>Comprehension concept is applicable for list</li> <li>Comprehension concept is not applicable for touple</li> </ul> </li> <li> <ul> <li>list objects are unhashable types and hece we cannot store in set, in dict as key</li> <li>Touple object are hashable type and hence we can store in set and in dict as key</li> </ul> </li> <li> <ul> <li>If the content is not fixed and keep on changing then it is recommended to go fore list object         - eg to store youtube comments</li> <li>if the content is fixed and nerver changes then we should go for touple object<ul> <li>eg Allowed input value for vender machine</li> </ul> </li> </ul> </li> <li> <ul> <li>Unpacking is possible in list but packing is not possible</li> <li><code>l = a,b,c,d,e</code> -&gt; it is not list</li> <li><code>a,b,c,d,e = l</code> -&gt; valid</li> <li>Both packing and unpacking are possible in touple Q7. Q What is the difference between set and frozenset?</li> </ul> </li> </ol> <ul> <li>All proerty of set and frozenset are same except the following difference.</li> <li>Set is mutable where as frozenset is immutable</li> <li>We can add new elements to the set as it is mutable</li> <li>As frozenset is mutable, add, remove such type of terminology is nit applicablee.</li> </ul>"},{"location":"interview-questions/important/#set","title":"set","text":"<p>s = {10, 20, 30, 40} s.add(50) print(s) s = {10, 20, 30, 40}</p> <p>fs = frozenset(s) fs.add(50) print(fs) # Attribute error</p>"},{"location":"interview-questions/important/#q8-what-is-different-between-list-and-dist","title":"Q8. What is different between List and Dist ?","text":"S.No List Dict 1 List is group of a comma sepaarated invidiual Dict is a group of comma separated key - value pair objects within square brackets courly bracy <code>d = {'A': 'APPLE;}</code> eg <code>l = [10, 20, 30]</code> 2 Insertion order is preserved In dict,all key -value pair will be stored based on hashcode of key &amp; hence insertion order is not functionality. 'Hence from 3.7 version onwords in the case of normal dict also insertion order can be guranted. <ol> <li> <ul> <li>In List,, DUplicate object are allowed</li> <li>In Dict, Duplicate keys are not allowed, but values can be dublicated. if we are trying to add an entry with    key-value with dublicate key then old value will be replaced with new value</li> </ul> </li> <li> <ul> <li>In list we can access objects by using index,which is zero based i.e index of dirst object is zero</li> <li>In dict we can access value by using keys</li> </ul> </li> <li> <ul> <li>In list objects need not be hashable</li> <li>but IB DIct, key must be hashable</li> </ul> </li> </ol>"},{"location":"interview-questions/important/#q9-what-is-the-difference-between-list-and-set","title":"Q9. What is the difference between List and Set?","text":"<ol> <li> <ul> <li>List is a group of comma seprated individual objects with in square brackets eg <code>l = [10,20,30]</code></li> <li>Set is a group of comma seprated individaul object with in curly brakets eg <code>l = {10,20,30}</code></li> </ul> </li> <li> <ul> <li>Duplicate objects are allowed.</li> <li>Duplicate objects are not allowed</li> </ul> </li> <li> <ul> <li>Insertion order is presved</li> <li>Insertion order is not presved objects will be inserted based on hashcode.</li> </ul> </li> <li> <ul> <li>Object need not hashable.</li> <li>Object should be hashable. 5  - Indexing and slicing concepts are applicable for list.</li> <li>Indexing and slicing concept are not applicable for set</li> </ul> </li> </ol>"},{"location":"interview-questions/important/#q10-explain-slice-operator-and-its-syntax","title":"Q10. Explain Slice Operator and its syntax?","text":"<p>If we want to access part(piece or slice) of given sequence, then we should go for slice operator. The sequence can be string ot list or touplce etc.</p>"},{"location":"interview-questions/important/#syntax","title":"Syntax","text":"<p>s[begin: end: step]</p> <ul> <li>Step value can be either postive or negative (but not zero)</li> <li>If step value is postive, then we have consider from begin index to end-1 index in forword direction</li> <li>If step values is negative, then we have to consider from begin index to end +1 index backword direction.</li> </ul> <p>NOTE:</p> <ul> <li>In forword direction if end value is 0, then the result is always empty.</li> <li>In bakword direction if end value is -1, then the result is always empty.     eg s='abcdefghij'     s[1:6:2]--&gt; 'bdf'     s[7:4:-1]--&gt; 'hgf' s='abcdefghij' print(s[1:6:2]) s[7:4:-1]</li> </ul>"},{"location":"interview-questions/important/#q11-whar-is-the-diffterent-between-args-and-kwargs","title":"Q11 Whar is the diffterent between *args and **kwargs","text":"<ul> <li> <p>*args -&gt; variable length arguments</p> <p><code>def f1(*args):</code> <code>pass</code> <code>f1(*args)</code></p> </li> <li> <p>If a function with *args argument, then we can call that function by passing any number of values including zero number with all these values tuple will be created.</p> <p><code>def f1(*args):</code> <code>print(args)</code> <code>f1(),f1(10),f1(10,20).....</code></p> </li> <li> <p>**kwargs -&gt; Variable length keyword arguments  ` f(**kwargs):</p> </li> <li> <p>We can call this function by passing any number of keyword arguments including zero number and with all these keyword arguments a dictionary will be created.      <code>def f1(**kwargs)</code> <code>print(kwargs)</code> <code>f1('name'='d','roll'=101)</code></p> </li> </ul>"},{"location":"interview-questions/important/#q12-how-to-reverse-string-by-using-slice-opertor","title":"Q12 How to reverse string by using slice opertor?","text":"<p><code>s[::-1]</code></p>"},{"location":"interview-questions/important/#q-what-is-different-between-dir-and-help-function","title":"Q What is different between <code>dir()</code> and <code>help()</code> function?","text":"<ul> <li>dir()</li> <li>dir() function just list out all members module But help() function provides documentation related to that module<pre><code>`import math`&lt;br&gt;\n\n`print(dir(math))`# return list of all member\n</code></pre> <ul> <li>help(math)</li> </ul> </li> </ul> <p><code>print(dir())</code> # curent module information</p> <p>Note:</p> <ul> <li>dir() =&gt; Without argument, it will list out all members of specified module.</li> <li>dir(module_name) =&gt; With argumetn, it will list out all members of specified module</li> </ul>"},{"location":"interview-questions/important/#eg1","title":"eg1","text":"<p>import math</p> <p>print(dir(math)) print(dir())</p>"},{"location":"interview-questions/important/#q-what-is-lambda-function-or-anonymous-function","title":"Q What is lambda function or Anonymous function?","text":"<ul> <li> <p>Sometines we can declare afunction without any name, such type of nameless functions are called anonymous functions or lambda functions.</p> </li> <li> <p>The main objective of anonymous dunction is just for instant use</p> </li> </ul>"},{"location":"interview-questions/important/#normal-function","title":"Normal Function","text":"<p>We can define function by using def keyword. <code>def sqareit(n):</code> <code>return n*n</code></p>"},{"location":"interview-questions/important/#lamda-function","title":"Lamda Function","text":"<p>we can define anonymous function by using lamda keyword. Syntax of Lambda Function</p> <pre><code>lambda arguments: expression\nlambda \u2192 The keyword to define a lambda function.\n</code></pre> <p>arguments \u2192 Inputs to the function (can be multiple, separated by commas). expression \u2192 A single expression evaluated and returned.</p> <p>Example 1: Basic Lambda Function</p> <pre><code>square = lambda x: x ** 2\nprint(square(5))  # Output: 25\n</code></pre> <p>Equivalent to:</p> <pre><code>def square(x):\n    return x ** 2\n</code></pre> <p>Example 2: Lambda with Multiple Arguments</p> <pre><code>add = lambda a, b: a + b\nprint(add(3, 7))  # Output: 10\n</code></pre> <p>Example 3: Lambda in Sorting Sorting a list of tuples by the second element:</p> <pre><code>data = [(1, 3), (2, 2), (4, 1)]\ndata.sort(key=lambda x: x[1])\nprint(data)  # Output: [(4, 1), (2, 2), (1, 3)]\n</code></pre> <p>Example 4: Using Lambda with map(), filter(), and reduce()</p> <ol> <li>Using map() to apply a function to a list</li> </ol> <pre><code>numbers = [1, 2, 3, 4]\nsquared = list(map(lambda x: x ** 2, numbers))\nprint(squared)  # Output: [1, 4, 9, 16]\n</code></pre> <ol> <li>Using filter() to filter values</li> </ol> <pre><code>nums = [1, 2, 3, 4, 5, 6]\nevens = list(filter(lambda x: x % 2 == 0, nums))\nprint(evens)  # Output: [2, 4, 6]\n</code></pre> <ol> <li>Using reduce() from functools</li> </ol> <pre><code>from functools import reduce\nnums = [1, 2, 3, 4]\nproduct = reduce(lambda x, y: x * y, nums)\nprint(product)  # Output: 24\n</code></pre> <p>When to Use Lambda Functions? \u2705 Short and simple operations \u2705 Inline usage (e.g., sorting, filtering, mapping) \u2705 Avoiding unnecessary function definitions</p> <p>https://github.com/learning-zone/python-basics</p>"},{"location":"interview-questions/infosis-interview/","title":"infosis","text":""},{"location":"interview-questions/infosis-interview/#infosis-interview","title":"infosis interview","text":"<ol> <li>implement model api</li> <li>implement aoth and login api</li> <li>pandas pdf manupulation</li> <li>pandas data cleaing</li> <li>pandas pdf view</li> <li>show libreary </li> <li>open source libray fetch and display </li> </ol>"},{"location":"interview-questions/interview-pratical/","title":"INTERVIEW QUESTION","text":""},{"location":"interview-questions/interview-pratical/#coding-questions","title":"Coding Questions","text":""},{"location":"interview-questions/interview-pratical/#1-generate-an-infinite-fibonacci-series-using-a-generator","title":"1. Generate an infinite Fibonacci series using a generator","text":"<pre><code>def fib():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\nf = fib()\nfor i in range(1, 10):\n    print(next(f))\n</code></pre> <p>for upto given number then use this</p> <pre><code>def fib(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\nfor num in fib(10):\n    print(num)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#2-sort-a-list-without-using-the-keyword-sort","title":"2. Sort a list without using the keyword Sort","text":""},{"location":"interview-questions/interview-pratical/#code-1-your-first-example","title":"\ud83e\udde9 Code 1 \u2014 Your First Example","text":"<pre><code>l = [6,5,4,3,32,1]\nfor i in range(len(l)):\n    for j in range(i+1, len(l)):\n        if l[i] &gt; l[j]:\n            l[i], l[j] = l[j], l[i]\nprint(l)\n</code></pre> <p>\ud83d\udd0d What it does</p> <p>This is basically a Selection Sort implementation (you select the smallest element and put it at the front).</p>"},{"location":"interview-questions/interview-pratical/#time-complexity","title":"\ud83d\udd52 Time Complexity","text":"Case Complexity Best O(n\u00b2) Average O(n\u00b2) Worst O(n\u00b2)"},{"location":"interview-questions/interview-pratical/#space-complexity","title":"\ud83d\udcbe Space Complexity","text":"<ul> <li>O(1) (in-place) \ud83d\udca1 Reason</li> </ul> <p>For every element <code>i</code>, it compares with all elements after it (<code>j</code>), hence about <code>n*(n-1)/2</code> comparisons \u2192 O(n\u00b2).</p>"},{"location":"interview-questions/interview-pratical/#code-2-bubble-sort","title":"\ud83e\uddfc Code 2 \u2014 Bubble Sort","text":"<pre><code>def bubble_sort(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if lst[j] &gt; lst[j + 1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    return lst\n</code></pre>"},{"location":"interview-questions/interview-pratical/#how-it-works","title":"\ud83d\udd0d How it works","text":"<p>It \u201cbubbles\u201d the largest element to the end in each iteration.</p>"},{"location":"interview-questions/interview-pratical/#time-complexity_1","title":"\ud83d\udd52 Time Complexity","text":"Case Complexity Best O(n) (if optimized with a swapped flag) Average O(n\u00b2) Worst O(n\u00b2)"},{"location":"interview-questions/interview-pratical/#space-complexity_1","title":"\ud83d\udcbe Space Complexity","text":"<ul> <li>O(1) (in-place)</li> </ul>"},{"location":"interview-questions/interview-pratical/#reason","title":"\ud83d\udca1 Reason","text":"<p>Each element may need to be compared with every other, so ~n\u00b2 comparisons.</p>"},{"location":"interview-questions/interview-pratical/#code-3-selection-sort-while-loop","title":"\ud83e\uddee Code 3 \u2014 Selection Sort (While Loop)","text":"<pre><code>def selection_sort(lst):\n    sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n    return sorted_list\n</code></pre>"},{"location":"interview-questions/interview-pratical/#how-it-works_1","title":"\ud83d\udd0d How it works","text":"<p>Repeatedly finds the minimum and appends it to a new list.</p>"},{"location":"interview-questions/interview-pratical/#time-complexity_2","title":"\ud83d\udd52 Time Complexity","text":"Case Complexity Best O(n\u00b2) Average O(n\u00b2) Worst O(n\u00b2)"},{"location":"interview-questions/interview-pratical/#space-complexity_2","title":"\ud83d\udcbe Space Complexity","text":"<ul> <li>O(n) (creates a new list)</li> </ul>"},{"location":"interview-questions/interview-pratical/#reason_1","title":"\ud83d\udca1 Reason","text":"<p>Each <code>min(lst)</code> takes O(n), and you do it n times \u2192 n \u00d7 n = n\u00b2.</p>"},{"location":"interview-questions/interview-pratical/#code-4-quick-sort-recursive","title":"\u26a1 Code 4 \u2014 Quick Sort (Recursive)","text":"<pre><code>def quick_sort(lst):\n    if len(lst) &lt;= 1:\n        return lst\n    pivot = lst[0]\n    left = [x for x in lst[1:] if x &lt; pivot]\n    right = [x for x in lst[1:] if x &gt;= pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#how-it-works_2","title":"\ud83d\udd0d How it works","text":"<p>Divide and conquer \u2014 pick a pivot, partition the list, recursively sort both sides.</p>"},{"location":"interview-questions/interview-pratical/#time-complexity_3","title":"\ud83d\udd52 Time Complexity","text":"Case Complexity Best O(n log n) Average O(n log n) Worst O(n\u00b2) (when pivot is always smallest/largest element)"},{"location":"interview-questions/interview-pratical/#space-complexity_3","title":"\ud83d\udcbe Space Complexity","text":"<ul> <li>O(log n) (recursion stack)</li> </ul>"},{"location":"interview-questions/interview-pratical/#reason_2","title":"\ud83d\udca1 Reason","text":"<p>Splitting into two roughly equal halves gives log n levels of recursion, each doing O(n) work.</p>"},{"location":"interview-questions/interview-pratical/#code-5-heap-sort-using-heapq","title":"\u2699\ufe0f Code 5 \u2014 Heap Sort (Using <code>heapq</code>)","text":"<pre><code>import heapq\n\nnums = [4, 1, 7, 3, 8, 5]\nheapq.heapify(nums)\nsorted_nums = [heapq.heappop(nums) for _ in range(len(nums))]\nprint(sorted_nums)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#how-it-works_3","title":"\ud83d\udd0d How it works","text":"<ul> <li>Converts list into a heap in O(n)</li> <li>Pops elements one by one (each pop = O(log n))</li> </ul>"},{"location":"interview-questions/interview-pratical/#time-complexity_4","title":"\ud83d\udd52 Time Complexity","text":"Case Complexity Best O(n log n) Average O(n log n) Worst O(n log n)"},{"location":"interview-questions/interview-pratical/#space-complexity_4","title":"\ud83d\udcbe Space Complexity","text":"<ul> <li>O(n) (creates a new list for result)</li> </ul>"},{"location":"interview-questions/interview-pratical/#summary-table","title":"\ud83e\udde0 Summary Table","text":"Algorithm Best Average Worst Space Stable? In-place? Technique Selection Sort (Your first) O(n\u00b2) O(n\u00b2) O(n\u00b2) O(1) \u274c \u2705 Comparison Bubble Sort O(n) O(n\u00b2) O(n\u00b2) O(1) \u2705 \u2705 Comparison Selection Sort (while) O(n\u00b2) O(n\u00b2) O(n\u00b2) O(n) \u274c \u274c Comparison Quick Sort O(n log n) O(n log n) O(n\u00b2) O(log n) \u274c \u2705 Divide &amp; Conquer Heap Sort O(n log n) O(n log n) O(n log n) O(n) \u274c \u274c Heap-based Merge Sort O(n log n) O(n log n) O(n log n) O(n) \u2705 \u274c Divide &amp; Conquer"},{"location":"interview-questions/interview-pratical/#which-one-is-best","title":"\ud83c\udfc6 Which One is Best?","text":"Situation Best Choice Reason Small dataset (learning purpose) Bubble / Selection Simple to understand Large, random dataset Quick Sort Fast average case Guaranteed performance (no worst-case risk) Heap Sort O(n log n) always Stability required (preserve equal elements order) Merge Sort (not listed but best for this) Stable and O(n log n) Scenario Recommended Algorithm Why General purpose sorting (balanced) Merge Sort Always O(n log n), stable Performance critical, random data Quick Sort Fastest average case (best cache usage) Guaranteed worst-case performance Heap Sort Always O(n log n), no recursion Simple learning / small data Bubble / Selection Sort Easy to understand"},{"location":"interview-questions/interview-pratical/#quick-summary-of-how-to-find-complexity","title":"\ud83d\udcd8 Quick Summary of \u201cHow to Find Complexity\u201d","text":"<ol> <li>Count nested loops:</li> </ol> <ul> <li> <p>2 nested \u2192 O(n\u00b2) 2. Divide &amp; conquer (recursion):</p> </li> <li> <p>Splits list \u2192 O(n log n) 3. Loop inside recursion:</p> </li> <li> <p>Multiply work per level by number of levels. 4. Constant extra memory?</p> </li> <li> <p>\u2192 O(1)      Otherwise, count new lists \u2192 O(n)</p> </li> </ul>"},{"location":"interview-questions/interview-pratical/#3-check-whether-a-string-is-palindrome-or-not","title":"3. Check whether a string is palindrome or not?","text":"<pre><code>s = \"ashihsa\"\n\nprint(\"Is a Palindrome\") if(s == s[::-1]) else print(\"No\")\n\ns = \"ashihsaa\"\n\n# Alternative way\nflag = True\nfor  i,w in enumerate(s,start=1):\n    if w != s[len(s) - i]:\n        print(\"No\")\n        flag = False\n        break\n\nif flag:\n    print(\"Is a Palindrome\")\n</code></pre> <p>Using a Loop (Manual Check)</p> <pre><code>s = \"racecar\"\nis_palindrome = True\n\nfor i in range(len(s)//2):\n    if s[i] != s[-(i+1)]:\n        is_palindrome = False\n        break\n\nprint(\"Palindrome\" if is_palindrome else \"Not Palindrome\")\n</code></pre> <p>Using Recursion</p> <pre><code>def is_palindrome(s):\n    if len(s) &lt;= 1:\n        return True\n    if s[0] != s[-1]:\n        return False\n    return is_palindrome(s[1:-1])\n\ns = \"level\"\nprint(\"Palindrome\" if is_palindrome(s) else \"Not Palindrome\")\n</code></pre> <p>Ignore Case &amp; Spaces (Clean Input First)</p> <pre><code>def clean_string(s):\n    return ''.join(ch.lower() for ch in s if ch.isalnum())\n\ndef is_palindrome(s):\n    s = clean_string(s)\n    return s == s[::-1]\n\ns = \"A man, a plan, a canal: Panama\"\nprint(\"Palindrome\" if is_palindrome(s) else \"Not Palindrome\")\n</code></pre>"},{"location":"interview-questions/interview-pratical/#4-sort-a-dictionary-dict-comprehension","title":"4. Sort a dictionary/ dict comprehension","text":"<pre><code>d = {4:\"asd\",3:\"sd\",2:\"sds\",1:\"sd\"}\ndata = {'apple': 3, 'banana': 1, 'cherry': 2}\n\nd2 = {}\nfor i in sorted(d):\n    d2[i] = d[i]\n\nprint(d2)\n\n# comprehension \nsorted_dict = {k: d[k] for k in sorted(d)}\nprint(sorted_dict)\n</code></pre> <p>Sort by Values (Ascending Order)</p> <pre><code>sorted_dict = {k: v for k, v in sorted(data.items(), key=lambda item: item[1])}\nprint(sorted_dict)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#5-find-the-pair-with-a-given-number-in-a-list-two-elements-sum-to-the-given-number","title":"5. Find the pair with a given number in a list. two elements sum to the given number","text":"<pre><code>list1 = [1,2,3,4,5,6,7,8,9]\nk = 10\n\nfor i in range(len(list1)):\n    for j in range(i+1,len(list1)):\n        if list1[i] + list1[j] == k:\n            print(list1[i],list1[j])\n</code></pre>"},{"location":"interview-questions/interview-pratical/#6-create-a-fibonacci-series-using-recursion","title":"6. Create a Fibonacci series using recursion","text":"<pre><code>def fib(n):\n    if n &lt; 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nprint(fib(10))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#7-string-manipulation-the-sky-is-blue-to-blue-is-the-sky","title":"7. String manipulation. \"The Sky is Blue\" to \"Blue is The Sky\"","text":"<pre><code>s = \"The Sky is Blue\"\no = \"Blue is The Sky\"\n\nv = \"\"\nfor i in s.split():\n    v = i + \"_\" + v\nprint(v[: len(v) - 1])\n\n# 2nd Way\nl = s.split()\nl = l[::-1]\nl = \" \".join(l)\nprint(l)\n</code></pre> <p>'/*apples are &amp; found% only @red &amp; green'</p> <pre><code>s = ''\n\nfor i in v:\n    if((i&gt;='A' and i &lt;='Z') | (i&gt;='a' and i &lt;= 'z') | (i==' ')):\n        s = s + i\nprint(s)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#8-find-the-maximum-repeated-character-in-a-string-without-having-on2-complexity","title":"8. Find the maximum repeated character in a string without having o(n2) complexity","text":"<pre><code>s = \"asdafdfbvnonwvjsdnvosdnvdsnoidn\"\n\nch = {}\nfor i in s:\n    ch[i] = ch.get(i,0) + 1\n\nprint(ch)\n\nprint(max(ch,key=ch.get))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#9-find-a-maximum-and-minimum-value-in-a-list-without-using-any-predefined-function","title":"9. Find a maximum and minimum value in a List without using any predefined function","text":"<pre><code>l = [111, 22, 44, 5, 6, 23, 45, 56, 67]\n\nmaxi: int = l[0]\nmini: int = l[0]\nfor i in l:\n    if i &gt; maxi:\n        maxi = i\n    if mini &gt; i:\n        mini = i\n\nprint(maxi, mini)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#10-write-a-code-to-raise-an-exception","title":"10. Write a code to raise an exception","text":"<pre><code>l = [1,2,3,4,5,6]\nsum = 0\n\nfor i in l:\n    if i==3:\n        raise Exception(\"Exception: 0 is found\")\n    else:\n        sum+=1\n</code></pre> <p>1.Palindrome 2.Fibonacci Series 3.Compress String 4.FizzBuzz 5.Character Occurrence 6.Prime Number</p>"},{"location":"interview-questions/interview-pratical/#7modify-string-format","title":"7.Modify String Format","text":"<pre><code>Input = I_Am_Coder\nOutput = i.aM.cODER\n\n_ = .\n</code></pre> <pre><code>s = 'I_Am_Coder'\n\nprint(s.swapcase().replace(\"_\",\".\"))\n</code></pre> <pre><code>s = 'I_Am_Coder'\n\n# print(s.swapcase().replace(\"_\",\".\"))\nl = []\nfor i in s.split('_'):\n    l.append(i.capitalize().swapcase()) # l.append(i[0].lower() + i[1:].upper())\nprint(\".\".join(l))\n</code></pre> <p>8.Second Largest Number 9.Armstrong Number 10.Factorial</p>"},{"location":"interview-questions/interview-pratical/#fizzbuzz","title":"FizzBuzz","text":"<pre><code>If number divisible by 3 - print Fizz\nIf number divisible by 5 - print Buzz\nIf number divisible by 15 - print FizzBuzz\n\nelse print number\n\no/p\n1 2 fizz 4 5 Buzz 15 FizzBuzz\n</code></pre>"},{"location":"interview-questions/interview-pratical/#write-a-python-program-to-check-whether-the-given-input-is-an-armstrong-number","title":"Write a Python program to check whether the given input is an Armstrong number","text":""},{"location":"interview-questions/interview-pratical/#write-a-python-program-to-print-a-list-of-primes-in-a-given-range","title":"Write a Python program to print a list of primes in a given range","text":""},{"location":"interview-questions/interview-pratical/#write-a-program-to-reverse-a-list-using-enumerate-in-python","title":"Write a program to reverse a list using Enumerate in Python","text":""},{"location":"interview-questions/interview-pratical/#write-a-program-in-python-to-execute-the-bubble-sort-algorithm","title":"Write a program in Python to execute the Bubble sort algorithm","text":""},{"location":"interview-questions/interview-pratical/#write-an-async-function-that-fetches-data-from-multiple-urls-concurrently","title":". Write an async function that fetches data from multiple URLs concurrently","text":""},{"location":"interview-questions/interview-pratical/#write-a-python-program-to-count-the-total-number-of-lines-in-a-text-file","title":"Write a Python program to count the total number of lines in a text file","text":""},{"location":"interview-questions/interview-pratical/#write-a-program-in-python-to-check-if-a-number-is-prime","title":"Write a program in Python to check if a number is prime","text":""},{"location":"interview-questions/interview-pratical/#write-a-program-in-python-to-produce-a-star-triangle","title":"Write a program in Python to produce a Star triangle","text":""},{"location":"interview-questions/interview-pratical/#write-a-program-to-produce-the-fibonacci-series-in-python","title":"Write a program to produce the Fibonacci series in Python","text":""},{"location":"interview-questions/interview-pratical/#write-a-program-in-python-to-find-the-largest-and-second-largest-element-in-a-list-using-python","title":"Write a program in Python to find the largest and second-largest element in a list using Python","text":""},{"location":"interview-questions/interview-pratical/#how-to-remove-values-from-a-python-array","title":"How to remove values from a Python array?","text":""},{"location":"interview-questions/interview-pratical/#write-a-program-to-check-even-and-odd-numbers-using-shorthand-if-else-statements","title":"Write a program to check even and odd numbers using shorthand if-else statements","text":""},{"location":"interview-questions/interview-pratical/#write-a-python-program-that-will-reverse-a-string-without-using-the-slicing-operation-or-reverse-function","title":"Write a Python program that will reverse a string without using the slicing operation or reverse() function","text":"<pre><code># Defining the function\ndef reverseString(x):\n    # Declaring an empty string\n    NewString = \"\"\n    # Traversing through individual characters in the string\n    for i in x:\n        # Add the character to the beginning of the new string\n        NewString = i + NewString\n    # Return the new string\n    return NewString\n\n# Sample string\nstring = \"Intellipaat\"\n\n# Function call\nReversedString = reverseString(string)\n\n# Printing output\nprint(\"Reversed String:\", ReversedString)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#what-is-the-easiest-way-to-calculate-percentiles-when-using-python","title":"What is the easiest way to calculate percentiles when using Python?","text":"<pre><code>import numpy as np\n\na = np.array([1, 2, 3, 4, 5, 6, 7])\np = np.percentile(a, 50) # Returns the 50th percentile, which is also the median\nprint(p)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#basically-checks-if-both-are-in-the-same-mood-both-angry-or-both-not-angry","title":"basically checks if both are in the same mood (both angry or both not angry)","text":"<pre><code>def friends_in_trouble(j_angry, s_angry):\n    return j_angry == s_angry\n</code></pre> <ol> <li>Using XOR (exclusive or)</li> </ol> <pre><code>def friends_in_trouble(j_angry, s_angry):\n    return not (j_angry ^ s_angry)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#convert-list-to-pandas-dataframe","title":"convert list to pandas dataframe","text":"<pre><code>import pandas as pd\n\n# Example 1: List of values\ndata = [10, 20, 30, 40]\n\ndf = pd.DataFrame(data, columns=['Numbers'])\nprint(df)\n\n\n\n## Write a program to find the greater of the two numbers\n\n## **1. Count Unique Words in Sentences**  \n\n**Problem:**  \nGiven a list of sentences, return a dictionary where each key is a sentence, and the value is the number of unique words in that sentence.  \n\n**Example Input:**  \n\n```python\nsentences = [\n    \"hello world hello\",\n    \"python is fun\",\n    \"fastapi is fast and efficient\"\n]\n</code></pre> <p>Expected Output: </p> <pre><code>{\n    \"hello world hello\": 2,\n    \"python is fun\": 3,\n    \"fastapi is fast and efficient\": 5\n}\n</code></pre> <p>sol</p> <pre><code>sentences = [\n    \"hello world hello\",\n    \"python is fun\",\n    \"fastapi is fast and efficient\"\n]\n\nd = {}\nfor sen in sentences:\n    temp_word = []\n    for word in sen.split():\n        if word not in temp_word:\n            temp_word.append(word)\n            d[sen] = d.get(sen,0)+1\n    print(temp_word)\nprint(d)\n</code></pre> <pre><code>['hello', 'world']\n['python', 'is', 'fun']\n['fastapi', 'is', 'fast', 'and', 'efficient']\n{'hello world hello': 2,\n'python is fun': 3,\n'fastapi is fast and efficient': 5}\n</code></pre>"},{"location":"interview-questions/interview-pratical/#2-extract-domains-from-emails","title":"2. Extract Domains from Emails","text":"<p>Problem: Given a list of email addresses, return a set containing only the unique domains.  </p> <p>Example Input: </p> <pre><code>emails = [\"alice@example.com\", \"bob@gmail.com\", \"charlie@example.com\", \"dave@yahoo.com\"]\n</code></pre> <p>Expected Output: </p> <pre><code>{\"example.com\", \"gmail.com\", \"yahoo.com\"}\n</code></pre> <pre><code>emails = [\"alice@example.com\", \"bob@gmail.com\", \"charlie@example.com\", \"dave@yahoo.com\"]\nset(emails)\n</code></pre>"},{"location":"interview-questions/interview-pratical/#3-group-words-by-first-letter","title":"3. Group Words by First Letter","text":"<p>Problem: Given a list of words, return a dictionary where each key is the first letter of a word, and the value is a list of words that start with that letter.  </p> <p>Example Input: </p> <pre><code>words = [\"apple\", \"banana\", \"cherry\", \"avocado\", \"blueberry\", \"carrot\"]\n</code></pre> <p>Expected Output: </p> <pre><code>{\n    \"a\": [\"apple\", \"avocado\"],\n    \"b\": [\"banana\", \"blueberry\"],\n    \"c\": [\"cherry\", \"carrot\"]\n}\n</code></pre> <pre><code>words = [\"apple\", \"banana\", \"cherry\", \"avocado\", \"blueberry\", \"carrot\"]\n\ndict_letter = {}\nfor word in words:\n    a = word[0]\n    dsave:list =  dict_letter.get(a,[])\n    dsave.append(word) \n    dict_letter[a] =dsave\ndict_letter\n</code></pre> <pre><code>{\n 'a': ['apple', 'avocado'],\n 'b': ['banana', 'blueberry'],\n 'c': ['cherry', 'carrot']\n}\n</code></pre> <pre><code>from collections import defaultdict\n\ndict_letter = defaultdict(list)  # Initialize with list as default value type\nfor word in words:\n    dict_letter[word[0).append(word)\n\ndict_letter\n</code></pre>"},{"location":"interview-questions/interview-pratical/#4-count-occurrences-of-digits-in-numbers","title":"4. Count Occurrences of Digits in Numbers","text":"<p>Problem: Given a list of integers, return a dictionary where each key is a digit (0-9), and the value is how many times that digit appears across all numbers.  </p> <p>Example Input: </p> <pre><code>numbers = [101, 232, 345, 566, 789]\n</code></pre> <p>Expected Output: </p> <pre><code>{\n    \"0\": 1,\n    \"1\": 2,\n    \"2\": 2,\n    \"3\": 2,\n    \"4\": 1,\n    \"5\": 2,\n    \"6\": 2,\n    \"7\": 1,\n    \"8\": 1,\n    \"9\": 1\n}\n</code></pre> <pre><code>numbers = [101, 232, 345, 566, 789]\nfrom collections import Counter\n\nc =Counter(numbers)\nc\n</code></pre> <pre><code>numbers = [101, 232, 345, 566, 789]\nnumber_counter: dict = {}\n\ntype(number_counter)\n</code></pre> <pre><code>for number in numbers:\n    number_counter[number] = number_counter.get(number, 0) + 1\n\nnumber_counter\n</code></pre>"},{"location":"interview-questions/interview-pratical/#5-filter-names-by-length","title":"5. Filter Names by Length","text":"<p>Problem: Given a list of names and an integer <code>n</code>, return a list of names that have more than <code>n</code> characters.  </p> <p>Example Input: </p> <pre><code>names = [\"Alice\", \"Bob\", \"Catherine\", \"David\"]\nn = 4\n</code></pre> <p>Expected Output: </p> <pre><code>[\"Alice\", \"Catherine\", \"David\"]\n</code></pre> <pre><code>names = [\"Alice\", \"Bob\", \"Catherine\", \"David\"]\nn = int(input(\"enter number\"))\nnew_names  = []\nfor name in names:\n    if len(name) &gt;= n:\n        new_names.append(name)\nnew_names\n</code></pre> <p>['Alice', 'Catherine', 'David']</p>"},{"location":"interview-questions/interview-pratical/#6-group-numbers-by-even-and-odd","title":"6. Group Numbers by Even and Odd","text":"<p>Problem: Given a list of numbers, return a dictionary with two keys: <code>\"even\"</code> and <code>\"odd\"</code>, where the values are lists containing the respective numbers.  </p> <p>Example Input: </p> <pre><code>numbers = [1, 2, 3, 4, 5, 6]\n</code></pre> <p>Expected Output: </p> <pre><code>{\n    \"even\": [2, 4, 6],\n    \"odd\": [1, 3, 5]\n}\n</code></pre> <pre><code>numbers = [1, 2, 3, 4, 5, 6]\n\nodd_even = {\"even\":[],\"odd\":[]}\n\nfor number in numbers:\n    if number % 2 ==0:\n        odd_even[\"even\"].append(number)\n    else:\n        odd_even[\"odd\"].append(number)\nodd_even\n</code></pre> <pre><code>{\n    \"even\": numbers%2==0,\n    \"odd\": [1, 3, 5]\n}\n</code></pre>"},{"location":"interview-questions/interview-pratical/#7-reverse-key-value-pairs-in-a-dictionary","title":"7. Reverse Key-Value Pairs in a Dictionary","text":"<p>Problem: Given a dictionary, return a new dictionary where keys become values and values become keys. Assume values are unique.  </p> <p>Example Input: </p> <pre><code>data = {\"apple\": \"fruit\", \"carrot\": \"vegetable\", \"salmon\": \"fish\"}\n</code></pre> <p>Expected Output: </p> <pre><code>{\n    \"fruit\": \"apple\",\n    \"vegetable\": \"carrot\",\n    \"fish\": \"salmon\"\n}\n</code></pre>"},{"location":"interview-questions/interview-pratical/#8-find-the-most-frequent-character-in-a-string","title":"8. Find the Most Frequent Character in a String","text":"<p>Problem: Given a string, return the character that appears the most times. If multiple characters have the same frequency, return any of them.  </p> <p>Example Input: </p> <pre><code>text = \"banana\"\n</code></pre> <p>Expected Output: </p> <pre><code>\"a\"\n</code></pre> <p>or  </p> <pre><code>\"n\"\n</code></pre>"},{"location":"interview-questions/interview-pratical/#9-convert-a-list-of-tuples-into-a-dictionary","title":"9. Convert a List of Tuples into a Dictionary","text":"<p>Problem: Given a list of tuples, where each tuple contains two elements <code>(key, value)</code>, return a dictionary mapping keys to values.  </p> <p>Example Input: </p> <pre><code>pairs = [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\n</code></pre> <p>Expected Output: </p> <pre><code>{\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n}\n</code></pre>"},{"location":"interview-questions/interview-pratical/#10-merge-two-dictionaries-with-summed-values","title":"10. Merge Two Dictionaries with Summed Values","text":"<p>Problem: Given two dictionaries with integer values, merge them into a single dictionary where the values for duplicate keys are summed.  </p> <p>Example Input: </p> <pre><code>dict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\ndict2 = {\"b\": 3, \"c\": 4, \"d\": 5}\n</code></pre> <p>Expected Output: </p> <pre><code>{\n    \"a\": 1,\n    \"b\": 5,\n    \"c\": 7,\n    \"d\": 5\n}\n</code></pre>"},{"location":"interview-questions/interview-pratical/#here-are-the-solutions-for-each-problem","title":"Here are the solutions for each problem","text":""},{"location":"interview-questions/interview-pratical/#1-count-unique-words-in-sentences","title":"1. Count Unique Words in Sentences","text":"<pre><code>def count_unique_words(sentences):\n    return {s: len(set(s.split())) for s in sentences}\n\nsentences = [\n    \"hello world hello\",\n    \"python is fun\",\n    \"fastapi is fast and efficient\"\n]\nprint(count_unique_words(sentences))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#2-extract-domains-from-emails_1","title":"2. Extract Domains from Emails","text":"<pre><code>def extract_domains(emails):\n    return {email.split('@')[1] for email in emails}\n\nemails = [\"alice@example.com\", \"bob@gmail.com\", \"charlie@example.com\", \"dave@yahoo.com\"]\nprint(extract_domains(emails))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#3-group-words-by-first-letter_1","title":"3. Group Words by First Letter","text":"<pre><code>from collections import defaultdict\n\ndef group_words_by_first_letter(words):\n    result = defaultdict(list)\n    for word in words:\n        result[word[0]].append(word)\n    return dict(result)\n\nwords = [\"apple\", \"banana\", \"cherry\", \"avocado\", \"blueberry\", \"carrot\"]\nprint(group_words_by_first_letter(words))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#4-count-occurrences-of-digits-in-numbers_1","title":"4. Count Occurrences of Digits in Numbers","text":"<pre><code>from collections import Counter\n\ndef count_digit_occurrences(numbers):\n    all_digits = ''.join(map(str, numbers))\n    return dict(Counter(all_digits))\n\nnumbers = [101, 232, 345, 566, 789]\nprint(count_digit_occurrences(numbers))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#5-filter-names-by-length_1","title":"5. Filter Names by Length","text":"<pre><code>def filter_names_by_length(names, n):\n    return [name for name in names if len(name) &gt; n]\n\nnames = [\"Alice\", \"Bob\", \"Catherine\", \"David\"]\nn = 4\nprint(filter_names_by_length(names, n))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#6-group-numbers-by-even-and-odd_1","title":"6. Group Numbers by Even and Odd","text":"<pre><code>def group_even_odd(numbers):\n    return {\n        \"even\": [num for num in numbers if num % 2 == 0],\n        \"odd\": [num for num in numbers if num % 2 != 0]\n    }\n\nnumbers = [1, 2, 3, 4, 5, 6]\nprint(group_even_odd(numbers))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#7-reverse-key-value-pairs-in-a-dictionary_1","title":"7. Reverse Key-Value Pairs in a Dictionary","text":"<pre><code>def reverse_dict(d):\n    return {v: k for k, v in d.items()}\n\ndata = {\"apple\": \"fruit\", \"carrot\": \"vegetable\", \"salmon\": \"fish\"}\nprint(reverse_dict(data))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#8-find-the-most-frequent-character-in-a-string_1","title":"8. Find the Most Frequent Character in a String","text":"<pre><code>from collections import Counter\n\ndef most_frequent_char(text):\n    return Counter(text).most_common(1)[0][0]\n\ntext = \"banana\"\nprint(most_frequent_char(text))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#9-convert-a-list-of-tuples-into-a-dictionary_1","title":"9. Convert a List of Tuples into a Dictionary","text":"<pre><code>def convert_to_dict(pairs):\n    return dict(pairs)\n\npairs = [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\nprint(convert_to_dict(pairs))\n</code></pre>"},{"location":"interview-questions/interview-pratical/#10-merge-two-dictionaries-with-summed-values_1","title":"10. Merge Two Dictionaries with Summed Values","text":"<pre><code>from collections import Counter\n\ndef merge_dicts(dict1, dict2):\n    return dict(Counter(dict1) + Counter(dict2))\n\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\ndict2 = {\"b\": 3, \"c\": 4, \"d\": 5}\nprint(merge_dicts(dict1, dict2))\n</code></pre> <p>Let me know if you need explanations or modifications! \ud83d\ude80</p>"},{"location":"interview-questions/interview-theory/","title":"Python Interview","text":"<ul> <li>Why Should You Hire Me?</li> <li>Why Did You Leave Your Last Job?</li> <li>Why Should We Hire You?</li> </ul>"},{"location":"interview-questions/interview-theory/#why-python","title":"Why Python?","text":"<ul> <li>Python is a general purpose high level programming language.</li> <li>Python was developed by Guido Van Rossam</li> <li>Python is an interpreted language</li> <li>Dynamic: Type of the variable is determined only during runtime</li> </ul> <p>General purpose = Python is versatile and can be applied to almost any kind of software development, not tied to just one field.</p>"},{"location":"interview-questions/interview-theory/#interpreded","title":"Interpreded?","text":"<p>An interpreter allows the code to run line by line rather than being compiled into machine language</p>"},{"location":"interview-questions/interview-theory/#high-level","title":"High level","text":"<p>Python is easy to read mange meomery for you, works on any system</p>"},{"location":"interview-questions/interview-theory/#theory-questions","title":"Theory Questions","text":""},{"location":"interview-questions/interview-theory/#1-difference-between-list-tuple-and-array","title":"1. Difference between List, Tuple and Array","text":"sno LIST Tuple 1 List is mutable Tuple is immutable 2 List is a container to contain different types of objects and is used to iterate objects. Tuple is also similar to list but contains immutable objects. 3 Syntax li = ['a', 'b', 'c', '123'] tuples = ('a','b','c',123) 4 List iteration is slower Tuple processing is faster than list 5 Lists consume more memory Tuple consume less memory 6 Operations like insertion and detection are better performed Element scan accessed better sno LIST Array 1 The list can store the value of different types It can only consist of value of same type. 2 The list cannot handle the direct arithmetic operations It can directly handle arithmetic operation 3 The list are build in data structure so we don't need to import it. We need to import the array before work with the array 4 The lists are less compatible then the array to store the data An array are much compatible than thelist. 5 It consumes a large memory. It is more compact in memory size comparatively list 6 It is suitable for storing the longer sequence of the data item It is suitable for storing shorter sequence of data items 7 We can print the entire list using explicit looping We can print the entire list without using explicit looping"},{"location":"interview-questions/interview-theory/#2-lambda-function-with-example","title":"2. Lambda function with example","text":"<p>Lambda Function:</p> <ul> <li>A Lambda Function in Python programming is an anonymous function or a function having no name.</li> <li>It is a small and restricted function having no more than one line.</li> <li>Just like a normal function, a Lambda function can have multiple arguments with one expression.</li> </ul> <p>Syntax:</p> <p><code>lambda arguments : expression</code></p> <pre><code># Add 5 to argument a, and return the result:\n\nx = lambda a : a + 5\nprint(x(5))\n\n# Output: \n# 10\n</code></pre> <p>Example 2:</p> <p>Find Cubes Of All Elements In A List.</p> <pre><code>list1 = [1, 2, 3, 4, 5, 6, 7]\nres = list(map(lambda x: x ** 3, list1))\nprint(res)\n\nOutput:\n[1, 8, 27, 64, 125, 216, 343]\n</code></pre>"},{"location":"interview-questions/interview-theory/#3-difference-between-append-and-expand-in-list","title":"3. Difference between append() and expand() in list","text":"<p>Append():.</p> <ul> <li>append() adds an element to a list</li> <li>append() adds its argument as a single element to the end of a list.</li> <li>The length of the list itself will increase by one.</li> </ul> <p>Extend():</p> <p>extend() concatenates the first list with another list/iterable. extend() iterates over its argument adding each element to the list, extending the list. The length of the list will increase by however many elements were in the iterable argument.</p> <p>In Case Of String Value</p> <pre><code>list1 = [1,2,3]\nlist2 = [5,6,7]\n# Append():.\n\nlist1.append('AB')\nprint(list1)\n\nOutput:\n[1, 2, 3, 'AB\u2019]\n\n# Extend():.\n\nlist1.extend(\u2018AB\u2019)\nprint(list1)\n\nOutput:\n[1, 2, 3, \u2018A\u2019, \u2018B\u2019]\n</code></pre> <p>In Case Of List Value</p> <pre><code>list1 = [1,2,3]\nlist2 = [5,6,7]\n# Append():.\n\nlist1.append(list2)\nprint(list1)\n\nOutput:\n[1, 2, 3, [5, 6, 7]]\n# Extend():.\n\nlist1.extend(list2)\nprint(list1)\n\nOutput:\n[1, 2, 3, 5, 6, 7]\n</code></pre> <p>In Case Of Integer Value</p> <pre><code>list1 = [1,2,3]\nlist2 = [5,6,7]\n# Append():.\n\nlist1.append(4)\nprint(list1)\n\nOutput:\n[1, 2, 3, 4]\nExtend():.\n\n\nlist1.extend(4)\nprint(list1)\n\nOutput:\nTraceback (most recent call last):\n  File \"main.py\", line 5, in &lt;module&gt;\n    list1.extend(4)\nTypeError: 'int' object is not iterable\n</code></pre>"},{"location":"interview-questions/interview-theory/#2-what-is-decorator-explain-with-example","title":"2. What is Decorator? Explain With Example","text":"<p>A Decorator is just a function that takes another function as an argument, add some kind of functionality and then returns another function. All of this without altering the source code of the original function that you passed in.</p> <p>Decorator Coding Example</p> <pre><code>def decorator_func(func):\n def wrapper_func():\n  print(\"wrapper_func Worked\")\n  return func()\n print(\"decorator_func worked\")\n return wrapper_func\n\ndef show():\n print(\"Show Worked\")\ndecorator_show = decorator_func(show)\ndecorator_show()\n\n\n#Alternative\n@decorator_func\ndef display():\n print('display \nworked')\ndisplay()\n</code></pre> <p>Output: decorator_func worked wrapper_func Worked Show Worked decorator_func worked wrapper_func Worked display worked</p>"},{"location":"interview-questions/interview-theory/#9-what-does-python-support-call-by-reference-or-call-by-value","title":"9. What Does Python Support? -  Call By Reference OR Call By Value","text":"<p>Python utilizes a system, which is known as \u201cCall by Object Reference\u201d or \u201cCall by assignment\u201d.</p> <p>In the event that you pass arguments like whole numbers, strings or tuples to a function, the passing is like call-by-value because you can not change the value of the immutable objects being passed to the function.</p> <p>Whereas passing mutable objects can be considered as call by reference because when their values are changed inside the function, then it will also be reflected outside the function.</p> <pre><code>Example 1: \n\ns1 = \"Geeks\"\ndef test(s1):\n s1 = \"GeeksforGeeks\"\n print(\"Inside Function:\", s1)\n\ntest(s1)\nprint(\"Outside Function:\", s1)\n\nOutput:\nInside Function: GeeksforGeeks\nOutside Function: Geeks\n</code></pre> <p>Example 2:</p> <pre><code>def add_more(list):\n list.append(50)\n print(\"Inside Function\", list)\n\nmylist = [10,20,30,40]\nadd_more(mylist)\nprint(\"Outside Function:\", mylist)\n\nOutput:\nInside Function [10, 20, 30, 40, 50]\nOutside Function: [10, 20, 30, 40, 50]\n</code></pre> <p>Binding Names to Objects: In python, each variable to which we assign a value/container is treated as an object. When we are assigning a value to a variable, we are actually binding a name to an object.</p> <pre><code>Example 3: \n\na = \"first\"\nb = \"first\"\n\nprint(id(a))\nprint(id(b))\nprint(a is b)\n\nOutput:\n110001234557894\n110001234557894\nTrue\n</code></pre> <pre><code>Example 2: \n\na = [10, 20, 30]\nb = [10, 20, 30]\n\nprint(id(a))\nprint(id(b))\nprint(a is b)\n\nOutput:\n541190289536222\n541190288737777\nFalse\n</code></pre> <p>The output of the above two examples are different because the list is mutable and the string is immutable. An immutable variable cannot be changed once created. If we wish to change an immutable variable, such as a string, we must create a new instance and bind the variable to the new instance. Whereas, mutable variable can be changed in place.</p>"},{"location":"interview-questions/interview-theory/#4-exception-handling-in-python","title":"4. Exception handling in Python","text":"<p><code>py try:   # Some code...! except:   # Optional Block   # Handling of exception (if required) else:   # Some code   # Execute if no exception finally:   # Some code....always executed</code></p> <p>try: This block will test the exceptional error to occur.</p> <p>Except: Here you can handle the error</p> <p>Else: If there is no exception then this block will be executed.</p> <p>finally: Finally block always get executed either except is generated or not</p>"},{"location":"interview-questions/interview-theory/#5-decoration-in-detail-with-an-examplecustomazied-decoration-parameterized-decorator-add-two-numbers-using-the-decorator","title":"5. Decoration in detail with an example(customazied decoration, parameterized decorator). Add two numbers using the decorator","text":"<p>A Decorator is just a function that takes another function as an argument, add some kind of functionality and then returns another function. All of this without altering the source code of the original function that you passed in.</p> <p>Decorator Coding Example</p> <pre><code>def decorator_func(func):\n def wrapper_func():\n  print(\"wrapper_func Worked\")\n  return func()\n print(\"decorator_func worked\")\n return wrapper_func\n\ndef show():\n print(\"Show Worked\")\ndecorator_show = decorator_func(show)\ndecorator_show()\n\n\n#Alternative\n@decorator_func\ndef display():\n print('display \nworked')\ndisplay()\n</code></pre> <p>Output: decorator_func worked wrapper_func Worked Show Worked decorator_func worked wrapper_func Worked display worked</p> <p>A Decorator is just a function that takes another function</p> <pre><code>def addTwoNumbers(a, b):\n    c=a+b\n    return c\n\nc=addTwoNumber(4, 5)\n\nprint(\"Addition of two numbers=\", c)\n\n#Addition of two numbers=9\n</code></pre> <p>Now our aim is to modify the behavior of addTwoNumbers() without changing function definition and function call.</p>"},{"location":"interview-questions/interview-theory/#what-function-behavior-do-we-want-to-change","title":"What function behavior do we want to change?","text":"<p>We want addTwoNumbers function should calculate the sum of the square of two numbers instead of the sum of two numbers.  Here is a simple decorator to change the behavior of the existing function.a</p> <pre><code>def decorateFun(func): \n    def sumOfSquare(x, y): \n        return func(x**2, y**2) \n    return sumOfSquare \n\n@decorateFun\ndef addTwoNumbers(a, b): \n    c = a+b \n    return c \n\nc = addTwoNumbers(4,5) \nprint(\"Addition of two numbers=\", c)\n\n#Addition of two numbers=41\n</code></pre> <p>The below simple program is equivalent to the above decorator example. Here we are changing the function call.</p> <pre><code>def decorateFun(func): \n    def sumOfSquare(x, y): \n        return func(x**2, y**2) \n    return sumOfSquare \n\ndef addTwoNumbers(a, b): \n    c = a+b \n    return c \n\nobj=decorateFun(addTwoNumbers) \nc=obj(4,5) \nprint(\"Addition of square of two numbers=\", c)\n\n\n# Addition of square of two numbers=41\n</code></pre> <p>Source: https://www.csestack.org/python-decorators/</p>"},{"location":"interview-questions/interview-theory/#6-abstraction-how-to-define-abstract-classfunction","title":"6. Abstraction. How to define abstract class/function?","text":"<p>Abstraction in Python:</p> <p>Abstraction is used to hide the internal functionality of the function from the users. The users only interact with the basic implementation of the function, but inner working is hidden. User is familiar with that \"what function does\" but they don't know \"how it does.\" In simple words, we all use the smartphone and very much familiar with its functions such as camera, voice-recorder, call-dialing, etc., but we don't know how these operations are happening in the background. Let's take another example - When we use the TV remote to increase the volume. We don't know how pressing a key increases the volume of the TV. We only know to press the \"+\" button to increase the volume.</p> <p>That is exactly the abstraction that works in the object-oriented concept.</p> <p>Why Abstraction is Important? In Python, an abstraction is used to hide the irrelevant data/class in order to reduce the complexity. It also enhances the application efficiency. Next, we will learn how we can achieve abstraction using the Python program.</p> <p>Abstraction classes in Python In Python, abstraction can be achieved by using abstract classes and interfaces. A class that consists of one or more abstract method is called the abstract class. Abstract methods do not contain their implementation. Abstract class can be inherited by the subclass and abstract method gets its definition in the subclass. Abstraction classes are meant to be the blueprint of the other class. An abstract class can be useful when we are designing large functions. An abstract class is also helpful to provide the standard interface for different implementations of components. Python provides the abc module to use the abstraction in the Python program. Let's see the following syntax. Syntax from abc import ABC class ClassName(ABC): We import the ABC class from the abc module.</p> <p>Abstract Base Classes An abstract base class is the common application program of the interface for a set of subclasses. It can be used by the third-party, which will provide the implementations such as with plugins. It is also beneficial when we work with the large code-base hard to remember all the classes.</p> <p>Working of the Abstract Classes: Unlike the other high-level language, Python doesn't provide the abstract class itself. We need to import the abc module, which provides the base for defining Abstract Base classes (ABC). The ABC works by decorating methods of the base class as abstract. It registers concrete classes as the implementation of the abstract base. We use the @abstractmethod decorator to define an abstract method or if we don't provide the definition to the method, it automatically becomes the abstract method. Let's understand the following example.</p> <pre><code>Example -\nfrom abc import ABC, abstractmethod   \nclass Car(ABC):   \n    def mileage(self):   \n        pass  \n\nclass Tesla(Car):   \n    def mileage(self):   \n        print(\"The mileage is 30kmph\")   \nclass Suzuki(Car):   \n    def mileage(self):   \n        print(\"The mileage is 25kmph \")   \nclass Duster(Car):   \n     def mileage(self):   \n          print(\"The mileage is 24kmph \")   \n\nclass Renault(Car):   \n    def mileage(self):   \n            print(\"The mileage is 27kmph \")  \n# Driver code   \nt= Tesla ()   \nt.mileage()   \n\nr = Renault()   \nr.mileage()   \n\ns = Suzuki()   \ns.mileage()   \nd = Duster()   \nd.mileage()  \n\n\n\nOutput:\nThe mileage is 30kmph\nThe mileage is 27kmph \nThe mileage is 25kmph \nThe mileage is 24kmph\n</code></pre> <p>Explanation - In the above code, we have imported the abc module to create the abstract base class. We created the Car class that inherited the ABC class and defined an abstract method named mileage(). We have then inherited the base class from the three different subclasses and implemented the abstract method differently. We created the objects to call the abstract method.</p> <p>Source: https://www.javatpoint.com/abstraction-in-python</p>"},{"location":"interview-questions/interview-theory/#7-what-do-you-mean-by-mro","title":"7. What do you mean by MRO? **","text":"<ul> <li>MRO stands for Method Resolution Order</li> <li>MRO is a concept used in inheritance.</li> <li>It is the order in which a method is searched for in a classes hierarchy and is especially useful in Python because Python supports multiple inheritance.</li> <li>In Python, the MRO is from bottom to top and left to right. This means that, first, the method is searched in the class of the object. If it\u2019s not found, it is searched in the immediate super class.</li> <li>In the case of multiple super classes, it is searched left to right, in the order by which was declared by the developer.</li> </ul> <p>For example:  def class C(B,A):</p> <p>In this case, the MRO would be C -&gt; B -&gt; A.</p> <p>Since B was mentioned first in class declaration, it will be searched first while resolving a method.</p> <pre><code>Example 1:\nclass A:\n  def method(self):\n    print(\"A.method() called\")\n\nclass B(A):\n  def method(self):\n    print(\"B.method() called\")\n\nb = B()\nb.method()\n</code></pre> <p>This is a simple case with single inheritance. In this case, when b.method() is called, it first searches for the method in class B. In this case, class B had defined the method; hence, it is the one that was executed. In the case where it is not present in B, then the method from its immediate super class (A) would be called. So, the MRO for this case is: B -&gt; A</p> <pre><code>Example 2:\nclass A:\n  def method(self):\n    print(\"A.method() called\")\n\nclass B:\n  pass\n\nclass C(B, A):\n  pass\n\nc = C()\nc.method()\n</code></pre> <p>The MRO for this case is: C -&gt; B -&gt; A The method only existed in A, where it was searched for last.</p> <p>Source: https://www.educative.io/edpresso/what-is-mro-in-python</p> <pre><code>Example 3:\nclass A:\n  def method(self):\n    print(\"A.method() called\")\n\nclass B:\n  def method(self):\n    print(\"B.method() called\")\n\nclass C(A, B):\n  pass\n\nclass D(C, B):\n  pass\n\nd = D()\nd.method()\n</code></pre> <p>The MRO for this can be a bit tricky. The immediate superclass for D is C, so if the method is not found in D, it is searched for in C. However, if it is not found in C, then you have to decide if you should check A (declared first in the list of C\u2019s super classes) or check B (declared in D\u2019s list of super classes after C). In Python 3 onwards, this is resolved as first checking A.</p> <p>So, the MRO becomes:</p> <p>D -&gt; C -&gt; A -&gt; B</p>"},{"location":"interview-questions/interview-theory/#8-what-do-you-mean-by-gil","title":"8. What do you mean by GIL?","text":"<ul> <li>The Global Interpreter Lock of Python allows only one thread to be executed ata time. It is often a hurdle, as it does not allow multi-threading in python to save time</li> <li>The python gil in simple word is a mutex (a lock) that allow only one thread to hold the control of the Python Interpreter</li> <li>This means the only one thread can be in state of execution at any point in time. The impact of gil is not visible to developer who execute single thread prohrams but it can be bottlenck in CPU and multi thread code.</li> <li>Since the GIL allows only one thread to execute at a time even in a multi-threaded architecture with more than one CPU core the GIL has gained a reutation as an infamous feture of python</li> <li>GIL in python doesnot allow mulithreading which can  sometimes be considered as a disadvantage.</li> </ul>"},{"location":"interview-questions/interview-theory/#9-with-statement-context-managers-example","title":"9. With statement/ Context managers. Example","text":""},{"location":"interview-questions/interview-theory/#10-difference-between-static-and-class-methods","title":"10. Difference between static and class methods","text":"Class  Method Static Method The class method takes cls (class) as first argument. The static method does not take any specific parameter. Class method can access and modify the class state. Static Method cannot access or modify the class state. The class method takes the class as parameter to know about the state of that class. Static methods do not know about class state. These methods are used to do some utility tasks by taking some parameters. @classmethod decorator is used here. @staticmethod decorator is used here."},{"location":"interview-questions/interview-theory/#11-is-python-a-fully-object-oriental-language","title":"11. Is Python A Fully Object Oriental Language?","text":"<ul> <li>Python supports all the concept of \"object oriented programming\" but it is NOT fully object oriented because - The code in Python can also be written without creating classes.</li> <li>The answer is simply philosophy. Guido doesn't like hiding things, and many in the Python community agree with him.</li> <li>While it borrows heavily from the OOP language, it is also at the same time functional, procedural, imperative, and reflective.</li> <li>Python doesn't support strong encapsulation, which is only one of many features associated with the term \"object-oriented\".</li> <li>Python doesn\u2019t support Interfaces</li> </ul>"},{"location":"interview-questions/interview-theory/#14-explain-oops-concept-in-python","title":"14. Explain OOPS Concept In Python","text":"<p>Like other general-purpose programming languages, Python is also an object-oriented language since its beginning. It allows us to develop applications using an Object-Oriented approach. In Python, we can easily create and use classes and objects. An object-oriented paradigm is to design the program using classes and objects. The object is related to real-word entities such as book, house, pencil, etc. The oops concept focuses on writing the reusable code. It is a widespread technique to solve the problem by creating objects. Major principles of object-oriented programming system are given below.</p> <ul> <li>Class</li> <li>Object</li> <li>Method</li> <li>Inheritance</li> <li>Polymorphism</li> <li>Data Abstraction</li> <li>Encapsulation</li> </ul>"},{"location":"interview-questions/interview-theory/#1-difference-between-list-and-dictionary","title":"1. Difference Between List and Dictionary","text":"no LIST DICT 1 Lists are the collection of various elements (Heterogeneous ). Dictionary are collection of elements in the hashed structure as key-value pairs. 2 List is mutable in nature. It is also mutable, but keys do not allow duplicates. 3 Placing all the elements inside square brackets [], separated by commas(,) list = ['a', 'b', 'c', 1,2,3] Syntax:  Placing all key-value pairs inside curly brackets({}), separated by a comma. Also, each key-pair is separated by a semi-colon (:) dict = 4 Indices are integer values starts from value 0. The keys in the dictionary are of any data type 5 We can access the elements using the index value We can access the elements using the keys 6 The default order of elements is always maintained No guarantee of maintaining the order 7 List object is created using list() function Dictionary object is created using dict() function"},{"location":"interview-questions/interview-theory/#3-can-we-use-list-or-tuple-as-a-key-in-dictionary","title":"3. Can We Use List Or Tuple As A Key In Dictionary?","text":"<ul> <li>NO, List Can\u2019t Be Used As Key In Dictionary</li> <li>NO, List Can\u2019t Be Used As Key In Dictionary</li> <li>NO, List Can\u2019t Be Used As Key In Dictionary</li> </ul> <ul> <li>Dictionaries are indexed by keys.</li> <li>Those Keys can be any immutable type i.e strings and numbers can always be keys. T- uples can be used as keys if they contain only strings, numbers, or tuples.</li> <li>If a tuple contains any mutable object either directly or indirectly, it cannot be used as a key.</li> <li>You can\u2019t use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like append() and extend().</li> </ul> <p>Tuple As Key</p> <pre><code>tuple1 = (1,2,3)\ntuple2 = (2,3,4)\n\nd1 = {tuple1: 'First', tuple2: 'Second'}\nprint(d1)\n\nOUTPUT:\n{(1, 2, 3): 'First', (2, 3, 4): 'Second'}\n</code></pre> <p>List As Key</p> <pre><code>list1 = [1,2,3]\nlist2 = [2,3,4]\n\nd1 = {list1: 'First', list2: 'Second'}\nprint(d1)\n\n\nOUTPUT:\n\nTraceback (most recent call last):\n  File \"main.py\", line 10, in &lt;module&gt;\n    d1 = {list1: 'First', list2: 'Second'}\nTypeError: unhashable type: 'list'\n</code></pre> <p>Tuple Having List As Key</p> <pre><code>tuple1 = (1,2,3,[6,5,4])\ntuple2 = (2,3,4)\n\nd1 = {tuple1: 'First', tuple2: 'Second'}\nprint(d1)\n\n\n\nOUTPUT:\n\nTraceback (most recent call last):\n  File \"main.py\", line 4, in &lt;module&gt;\n    d1 = {tuple1: 'First', tuple2: 'Second'}\nTypeError: unhashable type: 'list'\n</code></pre>"},{"location":"interview-questions/interview-theory/#4-when-to-use-list-and-when-to-tuple-in-python","title":"4. When To Use List And When To Tuple In Python?","text":"<ul> <li> <p>If you have data which is not meant to be changed in the first place, you should choose tuple data type over lists.</p> </li> <li> <p>And if you have data which is meant to be changed in the first place, you should choose list data type over tuple.</p> </li> </ul> <p>LIST</p> <ul> <li>Lists are mutable List is a container to contain different types of objects and is used to iterate objects. Syntax Of List  list = ['a', 'b', 'c', 1,2,3] List iteration is slower Lists consume more memory Operations like insertion and deletion are better performed.</li> </ul> <p>Tuple Tuples are immutable Tuple is also similar to list but contains immutable objects. Syntax Of Tuple tuples = ('a', 'b', 'c', 1, 2) Tuple processing is faster than List. Tuple consume less memory Elements can be accessed better.</p>"},{"location":"interview-questions/interview-theory/#5-why-python-is-called-as-dynamic-typed-programming","title":"5. Why Python Is Called As Dynamic Typed Programming","text":"<pre><code>  Language OR What Is Duck Typing?\n</code></pre> <p>OTE: The \"Duck typing\" name comes from the phrase, \u201cIf it walks like a duck and it quacks like a duck, then it must be a duck.\u201d</p> <p>Python don't have any problem even if we don't declare the type of variable. It states the kind of variable in the runtime of the program. Python also take cares of the memory management which is crucial in programming. So, Python is a dynamically typed language.</p>"},{"location":"interview-questions/interview-theory/#variable-a-is-assigned-to-a-string","title":"variable a is assigned to a string","text":"<p>a =\"NitMan Talks\" print(type(a))</p> <p>Output:"},{"location":"interview-questions/interview-theory/#variable-a-is-assigned-to-an-integer","title":"variable a is assigned to an integer","text":"<p>a = 7 print(type(a))</p> <p>Output:  <ol> <li>What If We Don't Use \u201cWith\u201d Statement If We Don't use \"WITH\" Statement, We need to close the opened file manually but using close().</li> </ol> <pre><code>In Case Of open():\nfile = open(\"hello.txt\", \"w\")\nfile.write(\"Hello, World!\")\nfile.close()\n</code></pre> <pre><code># Safely open the file\nfile = open(\"hello.txt\", \"w\")\ntry:\n    file.write(\"Hello, World!\")\nfinally:\n    file.close()\n</code></pre> <pre><code>with open(\"hello.txt\", \"w\") as file:\n    file.write(\"Hello, World!\")\n</code></pre> <p>2 Internal functions called in \"WITH\" Statement</p> <p>.enter() is called by the with statement to enter the runtime context. .exit() is called when the execution leaves the with code block.</p> <ol> <li>Why Python Is Called As An Interpreted Language? Interpreted simply means your code run line by line. While in compiled language whole program compiled at once.</li> </ol> <p>In compilation, source code is first converted to object code and then to the machine code.</p> <p>You can see that in a compiled language your whole program compiled at once and give the output.</p> <p>But in interpreted language, every single line is converted to machine code directly. That's why Python is very slow, because it interpret one line at a time.</p> <p>You have seen that if, you run code in Python and do any mistake at the bottom of your python code. And you execute the code then it will give you output till the correct code part and the remaining part gives the error in a console window where you do the error. Because the interpreted language executes line by line instead of executing the whole program at once.</p> <p>But, the same thing in a compiled language you always get the error. Your whole code must be correct for the execution of the program.</p>"},{"location":"interview-questions/interview-theory/#q1-difference-between-list-and-tuple-in-python","title":"Q1. Difference Between List and Tuple in Python**","text":"Aspect List Tuple Definition Group of Comma separeated Values within Square Brackets and Square Brackets are mandatory. Eg: <code>i = [10, 20, 30, 40]</code>. a Group of Comma separeated Values within Parenthesis and Parenthesis are optional. Eg: <code>t = (10, 20, 30, 40)</code> <code>t = 10, 20, 30, 40.</code> Syntax Defined using square brackets: <code>[ ]</code> Defined using parentheses: <code>( )</code> Mutability Mutable: Can add, remove, or modify elements. Immutable: Cannot change after creation. Performance Slower due to mutability. Faster due to immutability. Use Case Suitable for collections that may change. Suitable for fixed collections (e.g., coordinates). Size Can dynamically grow or shrink. Fixed size once created. Methods Supports methods like <code>.append()</code>, <code>.remove()</code>, <code>.sort()</code>. Limited methods: Only <code>.count()</code> and <code>.index()</code>. Memory Usage Requires more memory due to dynamic resizing. More memory-efficient. Hashability Not hashable; cannot be used as dictionary keys. Hashable if all elements are hashable. Examples <code>my_list = [1, 2, 3]</code> <code>my_tuple = (1, 2, 3)</code>"},{"location":"interview-questions/interview-theory/#key-points","title":"Key Points","text":"<ol> <li> <p>Mutability:    - Lists are mutable, making them ideal for scenarios where data might need to change.    - Tuples are immutable, ensuring data integrity and better performance in some cases.</p> </li> <li> <p>When to Use:    - Use lists when flexibility is needed (e.g., managing a collection of user inputs).    - Use tuples for fixed data (e.g., coordinates, configuration constants).</p> </li> <li> <p>Hashable Tuples:    - A tuple can be used as a key in a dictionary if all its elements are hashable.</p> </li> </ol>"},{"location":"interview-questions/interview-theory/#example-list","title":"Example: List","text":"<pre><code>my_list = [1, 2, 3]\nmy_list.append(4)  # Adds 4 to the list\nprint(my_list)  # Output: [1, 2, 3, 4]\n</code></pre>"},{"location":"interview-questions/interview-theory/#example-tuple","title":"Example: Tuple","text":"<pre><code>my_tuple = (1, 2, 3)\n# my_tuple[0] = 10  # Raises a TypeError because tuples are immutable\nprint(my_tuple)  # Output: (1, 2, 3)\n</code></pre> <p>In Python, the term \"hashable\" is used to describe an object that has a hash value that remains constant during its lifetime. In the context of dictionaries, hashable objects are critical because they are used as keys.</p>"},{"location":"interview-questions/interview-theory/#q2-what-does-hashable-mean","title":"Q2. What Does Hashable Mean?","text":"<ol> <li> <p>Hash Value:    A hash value is a fixed-size integer that uniquely identifies an object, generated by the <code>hash()</code> function.  </p> </li> <li> <p>Immutability:    To be hashable, an object must be immutable. This ensures that its hash value does not change over time, which is a key requirement for dictionary keys.</p> </li> <li> <p>Equality and Hashing:    Hashable objects must implement the <code>__hash__()</code> method to compute the hash value and the <code>__eq__()</code> method for equality checks. Python dictionaries use these methods to organize and retrieve keys efficiently.</p> </li> </ol>"},{"location":"interview-questions/interview-theory/#why-hashable-is-important-for-dictionaries","title":"Why Hashable Is Important for Dictionaries","text":"<ul> <li> <p>Key Uniqueness:   Dictionary keys must be unique. Python uses the hash value of a key to quickly determine where to store or find a value in the dictionary.</p> </li> <li> <p>Efficient Lookups:   The hash value allows the dictionary to find a key in O(1) time complexity on average.</p> </li> </ul>"},{"location":"interview-questions/interview-theory/#hashable-objects","title":"Hashable Objects","text":"<p>Objects that are immutable (and hence hashable) include:</p> <ul> <li>Strings:  </li> </ul> <pre><code>my_dict = {\"name\": \"Alice\"}  # 'name' is hashable\n</code></pre> <ul> <li>Numbers (int, float, etc.):  </li> </ul> <pre><code>my_dict = {42: \"Answer\"}  # 42 is hashable\n</code></pre> <ul> <li>Tuples (if all elements are hashable):  </li> </ul> <pre><code>my_dict = {(1, 2): \"coordinates\"}  # (1, 2) is hashable\n</code></pre>"},{"location":"interview-questions/interview-theory/#unhashable-objects","title":"Unhashable Objects","text":"<p>Objects that are mutable (and hence not hashable) include:</p> <ul> <li>Lists:   Lists are mutable and cannot be used as dictionary keys.  </li> </ul> <pre><code>my_dict = {[1, 2]: \"List\"}  # Raises TypeError: unhashable type: 'list'\n</code></pre> <ul> <li>Sets:   Like lists, sets are mutable and unhashable.  </li> </ul> <pre><code>my_dict = {set([1, 2]): \"Set\"}  # Raises TypeError\n</code></pre>"},{"location":"interview-questions/interview-theory/#custom-hashable-objects","title":"Custom Hashable Objects","text":"<p>You can make a custom object hashable by defining the <code>__hash__()</code> and <code>__eq__()</code> methods.</p>"},{"location":"interview-questions/interview-theory/#example","title":"Example","text":"<pre><code>class MyHashableClass:\n    def __init__(self, value):\n        self.value = value\n\n    def __hash__(self):\n        return hash(self.value)  # Use the hash of 'value'\n\n    def __eq__(self, other):\n        return isinstance(other, MyHashableClass) and self.value == other.value\n\n# Using custom hashable object as dictionary key\nkey = MyHashableClass(42)\nmy_dict = {key: \"Custom Object\"}\nprint(my_dict[key])  # Output: Custom Object\n</code></pre>"},{"location":"interview-questions/interview-theory/#key-points-in-the-context-of-dictionaries","title":"Key Points in the Context of Dictionaries","text":"<ol> <li>A dictionary key must be hashable.</li> <li>Hashable objects allow Python to store dictionary keys in a hash table for fast lookups.</li> <li>If you attempt to use an unhashable object as a key, Python will raise a <code>TypeError</code>.</li> </ol>"},{"location":"interview-questions/interview-theory/#example-unhash","title":"Example unhash","text":"<pre><code># Hashable example\nhashable_key = \"name\"\nmy_dict = {hashable_key: \"Alice\"}\nprint(my_dict[hashable_key])  # Output: Alice\n\n# Unhashable example\nunhashable_key = [1, 2, 3]  # A list\nmy_dict = {unhashable_key: \"List\"}  # Raises TypeError\n</code></pre> <p>By ensuring that objects used as dictionary keys are hashable, Python maintains the efficiency and reliability of its dictionary implementation.</p>"},{"location":"interview-questions/interview-theory/#3-difference-between-slice-and-indexing","title":"3. Difference between slice and indexing","text":"<p>Both are used to accessing element in sequence like list or string.</p> <ul> <li>Indexing is when you refer to a specific item in a sequence by its postion or index.</li> </ul> <pre><code>l = [10,20,30]\n\n# indexing\na = l[10] #  to grab a single element\nprint(a)\n\n# slice\nprint(l[:2])\n</code></pre> <p>slice[start: stop,step]</p>"},{"location":"interview-questions/interview-theory/#4-list-comprehension","title":"4. List comprehension","text":"<p>def: It is very easy and compact way of creating list objects from any iterable objects(like list,tuple,dictionary,range etc) based on some condition.</p> <p>Syntax:</p> <p><code>list=[expression for item in list if condition]</code></p> <p>List comprehension is a neat way to create new List using a simple one line syntax</p> <p>Much more compact and readable alternative to use a traditional.</p> <pre><code># Square numbers in a range\nl = [i**2 for i in range(5)]\nprint(l)\n\n## even number\n\nl = [i for i in range(5) if i%2 == 0]\n</code></pre>"},{"location":"interview-questions/interview-theory/#5-what-is-lambda-in-python-why-is-it-used","title":"5. What is lambda in python? Why is it used?","text":"<ul> <li>lambda is a small, anonymus function.</li> <li>Sometimes we can declare a function without any name,such type of nameless functions are called anonymous functions or lambda functions.</li> <li>The main purpose of anonymous function is just for instant use(i.e for one time usage)</li> <li>Used as arguments for map(), filter(), and sorted()</li> </ul> <p>Syntax: lambda argument_list : expression</p> <pre><code>lambda x: x*2\n</code></pre> <pre><code>numbers = [1,2,3,4,5]\nsq = list(map(lambda x:x *2,numbers))\nprint(\"Double numbers:\",sq)\n</code></pre> <p>Note:</p> <ul> <li> <p>Lambda Function internally returns expression value and we are not required to write return statement explicitly.</p> </li> <li> <p>By using Lambda Functions we can write very concise code so that readability of the program will be improved.</p> </li> </ul> <ol> <li>filter():   We can use filter() function to filter values from the given sequence based on some condition.</li> </ol> <p><code>filter(function,sequence)</code>   where function argument is responsible to perform conditional check sequence can be list or tuple or string.</p> <pre><code>l=[0,5,10,15,20,25,30]\n\nl1=list(filter(lambda x:x%2==0,l))\nprint(l1) #[0,10,20,30]\n</code></pre> <ol> <li>map()</li> </ol> <p>For every element present in the given sequence,apply some functionality and generate new element with the required modification. For this requirement we should go for map() function.</p> <p><code>map(function,sequence)</code></p> <p>The function can be applied on each element of sequence and generates new sequence.</p> <pre><code>l=[1,2,3,4,5]\nl1=list(map(lambda x:2*x,l))\nprint(l1) #[2, 4, 6, 8, 10]\n</code></pre> <ol> <li>reduce()</li> </ol> <p>reduce() function reduces sequence of elements into a single element by applying the specified function.</p> <p>reduce(function,sequence) reduce() function present in functools module and hence we should write import statement.</p>"},{"location":"interview-questions/interview-theory/#alliterable","title":"all(iterable)","text":"<p>Returns True if every element in the iterable is truthy (not False, 0, None, '', etc.).</p> <p>If even one element is falsy \u2192 returns False.</p> <p>Empty iterable \u2192 returns True (vacuous truth).</p> <pre><code>print(all([True, True, True]))       # True\nprint(all([1, 2, 3]))               # True (all non-zero)\nprint(all([1, 0, 3]))               # False (0 is falsy)\nprint(all([]))                      # True (empty case)\n</code></pre>"},{"location":"interview-questions/interview-theory/#anyiterable","title":"any(iterable)","text":"<p>Returns True if at least one element in the iterable is truthy.</p> <p>Returns False only if all elements are falsy.</p> <p>Empty iterable \u2192 returns False.</p> <pre><code>print(any([False, False, True]))    # True\nprint(any([0, \"\", None, []]))      # False (all falsy)\nprint(any([0, 1, 0]))              # True (1 is truthy)\nprint(any([]))                     # False (empty case)\n</code></pre>"},{"location":"interview-questions/interview-theory/#how-is-memory-managed-in-python","title":"How is memory managed in python?","text":"<p>Handled automatically by garbage collection and a private heap space.</p> <ul> <li>Garbage collectionn: Python has a build-n garbage collector that handles circular references</li> <li>private heap: This heap contains all python objects and data strucures</li> <li> <p>reference counting: Every object in python has a reference count, which tracks how variables or objects refer to that object.</p> </li> <li> <p>\"Python manages memory automatically using a combination of private heap space, reference counting, and garbage collection.</p> </li> <li> <p>All objects and data structures are stored in a private heap managed by the Python interpreter.</p> </li> <li> <p>Python uses reference counting to track how many references point to an object; when the count reaches zero, memory is freed.</p> </li> <li> <p>For circular references, Python uses a garbage collector to detect and clean up unreachable objects.</p> </li> <li> <p>Additionally, Python uses memory pools (PyMalloc) to efficiently allocate small objects and reduce fragmentation.\"</p> </li> <li> <p>Mention gc.collect() if asked how to trigger garbage collection manually.</p> </li> </ul> <p>Example:</p> <pre><code>a = [1, 2, 3]\nb = a  # reference count increases\ndel a\ndel b  # memory freed automaticall\n</code></pre>"},{"location":"interview-questions/interview-theory/#break-and-continue-control-folw-statements","title":"break and continue control folw statements","text":"<ul> <li>Break statement terminate the loop</li> </ul> <pre><code>for num in range(19):\n  if num ==5:\n    print(\"Found 5! Exiting the loop.\")\n    break\n    print(num)\n</code></pre> <ul> <li>Continue statement is used when you want to skip a part of the movie but watch the rest.</li> </ul> <pre><code>for num in range(19):\n  if num ==5:\n    continue\n    print(num)\n</code></pre> <ul> <li>pass: To fill up empty block, in python empty block of code will raise an error, so comes in handy to avoid that.</li> </ul>"},{"location":"interview-questions/interview-theory/#negative-indexing","title":"negative indexing","text":"<p>Nagative indexes allow you to access elements from the end of a sequence.</p> <p>it counting backword insted of forword.</p>"},{"location":"interview-questions/interview-theory/#how-do-you-copy-an-object-in-python","title":"How do you copy an object in python?","text":"<ul> <li>Assignment operator:   It creates a reference, making both variable point to the same object in memory</li> </ul> <pre><code>a = [1,2,3]\nb = a\n\nb[0] =11\n\nprint(b) #  [11, 2, 3]\nprint(a) #  [11, 2, 3]  \n</code></pre> <ul> <li> <p>shared reference:   Changes made through one varibale affect the other since the same memory</p> </li> <li> <p>Need for copy:   To create indepedent copies, Python offers the copy module for shallow and deep copies.</p> </li> </ul> <ol> <li>shallow Copy: Duplicates the object but copies reference for nested objects, so changes in nested objects affect both copies.</li> </ol> <ul> <li>Creates a new object, but nested objects are still references to the original.</li> <li>Use copy.copy() from the copy module or slicing for lists.</li> </ul> <pre><code>from copy import copy\n\nl1 =[1,2,[3,4],5]\n\n# shallow copy\nl2 = copy(l1)\n\nl2[3] = 7\nl2[2].append(6)\n\nprint(l2) # [1, 2, [3, 4, 6], 7]\nprint(l1) # [1, 2, [3, 4, 6], 7]\n</code></pre> <ol> <li>Deep Copy: Creates a fully independent copy, including all nested object, using deepcopy from copy module.</li> </ol> <ul> <li>Use copy.deepcopy():</li> </ul> <pre><code>from copy import deepcopy\n\nl1 =[1,2,[3,4],5]\n\n# shallow copy\nl2 = deepcopy(l1)\n\nl2[3] = 8\nl2[2].append(6)\n\nprint(l2) # [1, 2, [3, 4, 6], 8]\nprint(l1) # [1, 2, [3, 4], 5]\n</code></pre>"},{"location":"interview-questions/interview-theory/#what-is-pep-8-in-python","title":"What is PEP 8 in Python?","text":"<p>PEP 8 stands for Python Enhancement Proposal 8. It is the official style guide for Python code that provides conventions for writing clean, readable, and consistent code.</p>"},{"location":"interview-questions/interview-theory/#test-it-you-can-also-mention-tools-like-flake8-pylint-or-black-that-automatically-checkfix-pep-8-compliance","title":"test it You can also mention tools like flake8, pylint, or black that automatically check/fix PEP 8 compliance","text":""},{"location":"interview-questions/interview-theory/#what-does-args-and-kwargs-mean","title":"What does <code>*args</code> and <code>**kwargs</code> mean?","text":"<ul> <li> <p>Stands for <code>arguments</code>. <code>*args</code> allows you to pass a variable number of postional arguments to a function. It collects these aruguments into a touple</p> </li> <li> <p>Stands for <code>keyword arguments</code>. <code>**kwargs</code> allow you to pass a variable number of keyword aruments. It collects these keyword arguments. It collects thses keyword arguments into a dictionay.</p> </li> </ul> <p>whenever we are creating a function and we are not sure total number of argument it take then we pass these two</p> <pre><code>def function(*args, **kwargs):\n  print(args) # ()\n  print(kwargs) # {}\n</code></pre>"},{"location":"interview-questions/interview-theory/#how-are-arguments-passed-by-value-or-by-reference-in-python","title":"How are arguments passed by value or by reference in python","text":"<ul> <li>pass by value: Copy of the actual object is passed.</li> <li>Pass by reference: Reference to the actual object is passed. but in python arguments are not passed by value or refrence but through \"pass-by-assignment to pass by object\"</li> </ul>"},{"location":"interview-questions/interview-theory/#q3-difference-between-pop-and-remove-in-python","title":"Q3. Difference Between <code>pop()</code> and <code>remove()</code> in Python","text":"Aspect <code>pop()</code> <code>remove()</code> Functionality Removes an element by its index. Removes an element by its value. Parameters Takes an optional index as an argument. Takes the value of the element as an argument. Return Value Returns the removed element. Does not return the removed element. Default Behavior If no index is provided, removes the last element. Must specify the value to remove. Error Handling Raises an <code>IndexError</code> if the list is empty or index is out of range. Raises a <code>ValueError</code> if the value is not found. Mutability Modifies the original list. Modifies the original list."},{"location":"interview-questions/interview-theory/#example-pop","title":"Example: <code>pop()</code>","text":"<pre><code># Using pop() with and without an index\nmy_list = [10, 20, 30, 40, 50]\n\n# Remove and return the last element\nremoved_item = my_list.pop()\nprint(removed_item)  # Output: 50\nprint(my_list)       # Output: [10, 20, 30, 40]\n\n# Remove and return the element at index 1\nremoved_item = my_list.pop(1)\nprint(removed_item)  # Output: 20\nprint(my_list)       # Output: [10, 30, 40]\n</code></pre>"},{"location":"interview-questions/interview-theory/#example-remove","title":"Example: <code>remove()</code>","text":"<pre><code># Using remove() to remove an element by value\nmy_list = [10, 20, 30, 40, 50]\n\n# Remove the element with value 30\nmy_list.remove(30)\nprint(my_list)  # Output: [10, 20, 40, 50]\n\n# Remove a value that doesn't exist (raises ValueError)\n# my_list.remove(100)  # Raises ValueError: list.remove(x): x not in list\n</code></pre>"},{"location":"interview-questions/interview-theory/#key-differences","title":"Key Differences","text":"<ol> <li> <p>Index vs Value:    - <code>pop()</code> removes an element based on its position (index).    - <code>remove()</code> removes the first occurrence of a specific value.</p> </li> <li> <p>Return Value:    - <code>pop()</code> returns the removed element.    - <code>remove()</code> does not return the removed element.</p> </li> <li> <p>Default Behavior:    - <code>pop()</code> without an index removes the last element.    - <code>remove()</code> always requires a value to specify which element to remove.</p> </li> </ol>"},{"location":"interview-questions/interview-theory/#when-to-use","title":"When to Use","text":"<ul> <li>Use <code>**pop()**</code> when:</li> <li>You need to remove an element by index or retrieve the removed element.</li> <li>Use <code>**remove()**</code> when:</li> <li>You know the value to be removed but not its index.</li> </ul>"},{"location":"interview-questions/interview-theory/#diferentiate-between-sorted-vs-sort","title":"Diferentiate between Sorted vs sort","text":"<ol> <li>sorted():</li> </ol> <ul> <li>Returns a new list</li> <li>leaving the original iterable unchanged.</li> <li>Works on any iterable</li> <li>Syntax: <code>sorted(iterable, key=None, reverse=False)</code></li> </ul> <pre><code>nums = [4, 2, 1, 3]\nnew_nums = sorted(nums)\nprint(new_nums)  # [1, 2, 3, 4]\nprint(nums)      # [4, 2, 1, 3] \u2192 original unchanged\n</code></pre> <ol> <li>sort():</li> </ol> <ul> <li>Modifies the list in place</li> <li>Modifies the original list in-place.</li> <li>Does not return a new list (returns None).</li> <li>works only on lists</li> <li>syntax: <code>list.sort(key=None,reverse=False)</code></li> </ul> <pre><code>nums = [4, 2, 1, 3]\nnums.sort()\nprint(nums)  # [1, 2, 3, 4]\n</code></pre>"},{"location":"interview-questions/interview-theory/#compile-time-error-vs-runtime-error","title":"Compile time error vs Runtime error","text":"<ul> <li>compile time and runtime errors- are error that happen at different stagrs in the execution of a program.</li> <li>Compile-time error are detected before the code runs and are often related to typos or incorrect syntax</li> <li>Runtime error occur while the code is runing, usually due to issues like divding by zero or accessing out of bounds elements in a list.</li> </ul>"},{"location":"interview-questions/interview-theory/#what-are-generator-and-decorators","title":"What are generator and decorators?","text":"<ul> <li>Generator : returns n iterator</li> <li>they useful when dealting with large dataset or infinite sequences</li> <li> <p>Gererators remeber their state between yield</p> </li> <li> <p>Definition: Special type of function that uses yield instead of return to produce values one at a time.</p> </li> <li>They are iterators that generate values on the fly, saving memory (lazy evaluation). Useful for working with large datasets, streams, or infinite sequences.</li> </ul> <ul> <li>decorator: modify a function without modifying the code</li> <li>They take function as arguments</li> <li>They wrap the code or extend fuctionality of a fucntion</li> </ul> <pre><code>def decore(func):\n  def wrapper():\n    print(\"yoo\")\n    func()\n@decore\ndef greet():\n  print(\"hello\")\n</code></pre>"},{"location":"interview-questions/interview-theory/#oops","title":"oops","text":""},{"location":"interview-questions/interview-theory/#property-decorator","title":"@property decorator","text":"<p>Python programming provides us with a built-in @property decorator which makes usage of getters and setters much easier in Object-Oriented Programming.  a way to control access to an attribute by defining getter, setter and deleter methods. This enhances encapsulation and ensures better control over class attributes. Example:</p> <p>Creating properties in Python</p> <p>```py  class Alphabet:     def init(self, value):         self._value = value</p> <pre><code>@property\ndef value(self):\n    print(\"Getting value\")\n    return self._value\n\n@value.setter\ndef value(self, value):\n    print(\"Setting value to \" + value)\n    self._value = value\n\n@value.deleter\ndef value(self):\n    print(\"Deleting value\")\n    del self._value\n</code></pre>"},{"location":"interview-questions/interview-theory/#usage","title":"Usage","text":"<p>x = Alphabet(\"Peter\") print(x.value)</p> <p>x.value = \"Diesel\" del x.value <pre><code>## What is the difference between abstraction and encapulation?\n\n- Abstraction is about hiding the complexity of a system\n- Focuses on 'what' raather than how\n- working of brakes in cars\n\n```py\nfrom abc import ABC, abstractmethod\n\nclass Animal(ABC):\n  @abstractmethod\n  def make_sound(self):\n    pass\nclass Dog(Animal):\n  def make_sound(self):\n    print(\"Bark\")\n</code></pre></p> <ul> <li>Encapsulation restricts access to the private cariable or methods.</li> <li>It hides certain parts of an object to protext its internal details</li> <li>Mainly concerned with secuirty and protection</li> </ul> <pre><code>class Car:\n  def __init__(self):\n    self.__speed = 0\n  def accelerate(self, value):\n    self.__speed += value\n  def get_speed(self):\n    return self.__speed\n\ncar = Car()\ncar.__speed\n</code></pre>"},{"location":"interview-questions/interview-theory/#ehst-is-method-overriding-how-is-it-different-from-method-overloading","title":"Ehst is method overriding? How is it different from method overloading?","text":"<ul> <li>Method overloading: multiple methods with the same name but different parameters</li> <li>Method overriding: the child class overrides the behavior of the parent class;s method</li> </ul>"},{"location":"interview-questions/interview-theory/#how-does-inheritance-work-in-python","title":"How does inheritance work in python","text":""},{"location":"interview-questions/interview-theory/#what-is-the-significance-of-self-in-python-classes","title":"What is the significance of self in python classes?","text":"<ul> <li>self refers to the current instance of the class.</li> <li>It's automatically passed when you call amethod, but you still need to define it explicitly.</li> <li>It's what differentiates instance attributes from local variables.</li> </ul>"},{"location":"interview-questions/interview-theory/#what-are-class-methods-and-static-methods-how-are-they-different-from-instance-methods","title":"What are class methods and static methods? How are they different from instance methods?","text":""},{"location":"interview-questions/interview-theory/#class-method","title":"class Method","text":"<ul> <li>work with class itself(not individual instances).</li> <li>Require cls as their first parameter.</li> <li>can modify class-level attributes</li> </ul>"},{"location":"interview-questions/interview-theory/#explain-the-differences-between-a-set-and-a-dictionary","title":"Explain the differences between a set and a dictionary","text":""},{"location":"interview-questions/interview-theory/#set","title":"set","text":"<ul> <li>Unordered: The items are not stored in a specific sequence.</li> <li>Unique: No duplicates are allowed.</li> <li>Mutable: You can add or remoce items.</li> <li>Efficient lookups: Checking if an item exists in a set is very fast.</li> </ul>"},{"location":"interview-questions/interview-theory/#dictionary","title":"Dictionary","text":"<ul> <li>Key-value pairs: Each element consists of a unique key and a value.</li> <li>orderd: The order of insertion i spreserves.</li> <li>Keys must be unique: You cannot have two identical keys but values can be repeated.</li> <li>Efficient looks: Searching for a value usong keys is very fast.</li> </ul>"},{"location":"interview-questions/interview-theory/#what-is-the-time-complexity-of-inserting-elements-in-a-linked-list","title":"What is the time complexity of inserting elements in a Linked List?","text":"<p>Insertion in a LinkedList can happen in three commom ways:</p> <ol> <li>At the beginning (Head)</li> <li>At the end(tail)</li> <li>In the middle (At a specific position)</li> </ol> <ul> <li>At the begining (head) - O(1)</li> <li>At the end(tail) - O(N)</li> <li>In the middle (At a specific position) - O(N)</li> </ul>"},{"location":"interview-questions/interview-theory/#how-do-you-find-the-middle-element-of-a-linked-list-in-one-pass","title":"How do you find the middle element of a linked list in one pass?","text":"<p>The two-pointer technique: Slow and Fast Poiner</p> <ul> <li>The slow pointer moves one steps at a time</li> <li>The fast pointer moves two steps at a time</li> </ul> <p>Good question ** ## Write a fumction that takes a string as input and returns the length of the longest substring that contains no repeatng character</p> <p>ex 1 input: s = \"abcabcbb\" output: 3 Explanation: This answer is  \"abc\", with the length of 3.</p> <p>ex2: input s = \"bbbbbb\" output: 1</p> <p>eample 4 input: s = \"pwwkew\" output: 3</p> <p>explaination: The answer is \"wke\", with the length of 3 Notice that the answer must be a substring \"pwke\" is a subsequence and not a substring.</p>"},{"location":"interview-questions/interview-theory/#knapspack-problem-dp","title":"Knapspack problem (Dp)","text":"<p>examp; a =[60,100,120] b = [10,20,30] c =50 op = 220</p> <p>ex2 a = [10,20,30,40] b = [12,13,15,19]</p> <p>c =10 op = 0</p> <p>given two interger array A and B of size N which represent lues and weights aassociated with N items respectively</p> <p>Given an interger C which represents knapsack capacity</p> <p>out maximum valur subset of A such that sum of the weights of this subs et is smaller than or equal to c</p>"},{"location":"interview-questions/interview-theory/#asteroid-collison-problemstack","title":"Asteroid collison problem(stack)","text":""},{"location":"interview-questions/interview-theory/#q4-write-a-python-function-that-will-reverse-a-string-without-using-the-slicing-operation-or-reverse-function","title":"Q4. Write a Python function that will reverse a string without using the slicing operation or reverse() function","text":"using for loop<pre><code>def reverse_string(data: str)-&gt; str:\n  result = \"\"\n  for char in data:\n    result = char + result\n  return result\n\nreverse_string(\"Testing a string\")\n</code></pre> using while loop<pre><code>text: str = \"Ashish\"\ndef reverse_string(text: str)-&gt; str:\n    n = len(text)-1\n    result = ''\n    while n&gt;=0 :\n        result= result + text[n]\n        n-=1\n    return result\nprint(reverse_string(text))\n</code></pre>"},{"location":"interview-questions/interview-theory/#q5-write-a-program-to-delete-all-constants-from-a-given-string-python-and-data-science","title":"Q5. Write a program to delete all constants from a given string. \"Python and Data Science\"","text":"<pre><code>def return_string(data):\n  vowels = 'aeiouAEIOU'\n  result = ''.join([char for char in data if not char.isalpha() or char in vowels])\n  return result\n\nreturn_string(data =\"Python and Data Science\")\n</code></pre>"},{"location":"interview-questions/interview-theory/#q6-write-a-program-that-will-find-sum-of-all-the-prime-between-1-to-n","title":"Q6. Write a program that will find sum of all the prime between 1 to N","text":"<pre><code>def is_prime(number):\n  for i in range(2,number):\n    if(number % i ==0):\n      return False\n    return True\n\ndef add(number):\n  total = 0\n  for i in range(2,number + 1):\n    if is_prime(i):\n      total = total + i\n  return total\nprint(add(10))\n</code></pre>"},{"location":"interview-questions/interview-theory/#q7-what-is-a-generator-in-python","title":"Q7. What is a Generator in Python?","text":"<p>A generator in Python is a special type of iterable that produces values one at a time using the yield keyword, rather than creating and storing all values in memory at once.</p> <ul> <li>Generators are a memory-efficient way to handle large datasets or infinite sequences.</li> </ul>"},{"location":"interview-questions/interview-theory/#creating-generators","title":"Creating Generators","text":""},{"location":"interview-questions/interview-theory/#1-generator-function","title":"1. Generator Function","text":"<ul> <li>Generator is a function which is responsible to generate a sequence of values.</li> <li>We can write generator functions just like ordinary functions, but it uses yield keyword to return values</li> </ul> <p>A function that uses the <code>yield</code> keyword to produce values one at a time.</p> <pre><code>def my_generator():\n    for i in range(5):\n        yield i\n\n# Using the generator\ngen = my_generator()\nprint(next(gen))  # Output: 0\nprint(next(gen))  # Output: 1\n\nfor value in gen:\n    print(value)  # Output: 2, 3, 4\n</code></pre>"},{"location":"interview-questions/interview-theory/#2-generator-expression","title":"2. Generator Expression","text":"<p>A compact way to create a generator, similar to list comprehensions but with parentheses instead of square brackets.</p> <pre><code>gen = (x**2 for x in range(5))\n\nprint(next(gen))  # Output: 0\nprint(next(gen))  # Output: 1\n\nfor value in gen:\n    print(value)  # Output: 4, 9, 16\n</code></pre>"},{"location":"interview-questions/interview-theory/#difference-between-generators-and-lists","title":"Difference Between Generators and Lists","text":"Aspect Generator List Memory Usage Memory-efficient; generates values on the fly. Stores all elements in memory. Performance Faster for large datasets or infinite sequences. Slower for large datasets due to memory overhead. Modification Cannot modify elements once created. Can modify elements."},{"location":"interview-questions/interview-theory/#advantages-of-generators","title":"Advantages of Generators","text":"<ol> <li>Memory Efficiency:    - Suitable for working with large datasets or streams of data.</li> <li>Improved Performance:    - No need to compute all elements upfront; computation happens only when needed.</li> <li>Simplified Code:    - Easily represent infinite sequences (e.g., Fibonacci series, prime numbers).</li> </ol>"},{"location":"interview-questions/interview-theory/#use-case-example-generator-for-infinite-sequence","title":"Use Case Example: Generator for Infinite Sequence","text":"<pre><code>def infinite_numbers():\n    num = 0\n    while True:\n        yield num\n        num += 1\n\ngen = infinite_numbers()\n\nprint(next(gen))  # Output: 0\nprint(next(gen))  # Output: 1\nprint(next(gen))  # Output: 2\n</code></pre>"},{"location":"interview-questions/interview-theory/#generators-vs-normal-collections-wrt-performance","title":"Generators vs Normal Collections wrt performance","text":"<pre><code>import random\nimport time\nnames = ['Sunny','Bunny','Chinny','Vinny']\nsubjects = ['Python','Java','Blockchain']\n\ndef people_list(num_people):\n  results = []\n  for i in range(num_people):\n    person = {\n      'id':i,\n      'name': random.choice(names),\n      'subject':random.choice(subjects)\n    }\n  results.append(person)\n  return results\nt1 = time.time()\npeople = people_list(10000000)\nt2 = time.time()\nprint(f'Took {t2-t1}')\n\ndef people_generator(num_people):\n  for i in range(num_people):\n    person = {\n      'id':i,\n      'name': random.choice(names),\n      'major':random.choice(subjects)\n      }\n  yield person\n\nt1 = time.time()\npeople = people_generator(10000000)\nt2 = time.time()\n\nprint(f'Took {t2-t1}')\n</code></pre>"},{"location":"interview-questions/interview-theory/#generators-vs-normal-collections-wrt-memory-utilization","title":"Generators vs Normal Collections wrt Memory Utilization","text":"<p>Normal Collection:</p> <pre><code>l=[x*x for x in range(10000000000000000)]\nprint(l[0])\n</code></pre> <p>We will get MemoryError in this case because all these values are required to store in the memory.</p> <p>Generators:</p> <pre><code>g=(x*x for x in range(10000000000000000))\nprint(next(g))\nOutput: 0\n</code></pre>"},{"location":"interview-questions/interview-theory/#we-wont-get-any-memoryerror-because-the-values-wont-be-stored-at-the-beginning","title":"&gt;We won't get any MemoryError because the values won't be stored at the beginning","text":""},{"location":"interview-questions/interview-theory/#conclusion","title":"Conclusion","text":"<p>Generators are a powerful tool for creating efficient, iterable objects that avoid memory overhead. Use them when working with large datasets, streaming data, or infinite sequences to improve performance and resource usage.</p> <p>create speed of function execting genrator</p>"},{"location":"interview-questions/interview-theory/#q8-what-is-decorator-multiple-decorator","title":"Q8. What is decorator? Multiple decorator","text":""},{"location":"interview-questions/interview-theory/#what-is-a-decorator-in-python","title":"What is a Decorator in Python?","text":"<p>A decorator in Python is a function that modifies the behavior of another function or method. It allows you to \"wrap\" another function to add or alter its functionality without changing its structure or code.</p>"},{"location":"interview-questions/interview-theory/#how-decorators-work","title":"How Decorators Work","text":"<ol> <li>A decorator takes a function as an argument.</li> <li>It defines a nested wrapper function that modifies or enhances the behavior of the original function.</li> <li>The wrapper function is returned and replaces the original function.</li> </ol>"},{"location":"interview-questions/interview-theory/#syntax","title":"Syntax","text":"<pre><code>@decorator_name\ndef function_to_decorate():\n    pass\n</code></pre> <p>The <code>@decorator_name</code> syntax is equivalent to:</p> <pre><code>function_to_decorate = decorator_name(function_to_decorate)\n</code></pre>"},{"location":"interview-questions/interview-theory/#single-decorator-example","title":"Single Decorator Example","text":"<pre><code># Define a decorator\ndef greet_decorator(func):\n    def wrapper(name):\n        print(\"Hello!\")\n        func(name)\n        print(\"Goodbye!\")\n    return wrapper\n\n# Apply the decorator\n@greet_decorator\ndef say_name(name):\n    print(f\"My name is {name}.\")\n\n# Call the function\nsay_name(\"Ashish\")\n</code></pre> <p>Output:</p> <pre><code>Hello!\nMy name is Ashish.\nGoodbye!\n</code></pre>"},{"location":"interview-questions/interview-theory/#multiple-decorators","title":"Multiple Decorators","text":"<p>You can stack multiple decorators on a single function by applying them one after the other.</p>"},{"location":"interview-questions/interview-theory/#example-of-multiple-decorators","title":"Example of Multiple Decorators","text":"<pre><code># Define decorators\ndef bold_decorator(func):\n    def wrapper():\n        return f\"&lt;b&gt;{func()}&lt;/b&gt;\"\n    return wrapper\n\ndef italic_decorator(func):\n    def wrapper():\n        return f\"&lt;i&gt;{func()}&lt;/i&gt;\"\n    return wrapper\n\n# Apply multiple decorators\n@bold_decorator\n@italic_decorator\ndef get_text():\n    return \"Hello, World!\"\n\n# Call the function\nprint(get_text())\n</code></pre> <p>Output:</p> <pre><code>&lt;b&gt;&lt;i&gt;Hello, World!&lt;/i&gt;&lt;/b&gt;\n</code></pre> <p>Explanation:</p> <ol> <li>The <code>italic_decorator</code> is applied first, wrapping the function output in <code>&lt;i&gt;</code>.</li> <li>The <code>bold_decorator</code> is applied next, wrapping the result of the first decorator in <code>&lt;b&gt;</code>.</li> </ol>"},{"location":"interview-questions/interview-theory/#key-points-about-multiple-decorators","title":"Key Points About Multiple Decorators","text":"<ol> <li> <p>Order of Execution:    - Decorators are applied from the bottom to the top, but their effects are executed from the top down.    - In the above example:</p> <ul> <li><code>italic_decorator</code> wraps the original function.</li> <li><code>bold_decorator</code> wraps the result of <code>italic_decorator</code>.</li> </ul> </li> <li> <p>Use Cases:    - You might stack multiple decorators for logging, validation, access control, or formatting.</p> </li> </ol>"},{"location":"interview-questions/interview-theory/#practical-use-cases-of-decorators","title":"Practical Use Cases of Decorators","text":"<ol> <li>Logging:    Add logging functionality to a function.</li> </ol> <pre><code>def log_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Calling function: {func.__name__}\")\n        return func(*args, **kwargs)\n    return wrapper\n</code></pre> <ol> <li>Access Control:    Restrict access to specific users or roles.</li> </ol> <pre><code>def admin_only(func):\n    def wrapper(user):\n        if user != \"admin\":\n            print(\"Access Denied!\")\n        else:\n            func(user)\n    return wrapper\n\n@admin_only\ndef view_admin_dashboard(user):\n    print(\"Welcome to the admin dashboard!\")\n</code></pre> <ol> <li>Formatting Output:    Format the output of a function for display or use in templates.</li> </ol> <p>Decorators are a powerful and flexible way to add functionality to your code in a clean and reusable manner. Multiple decorators help in stacking behaviors efficiently.</p> <pre><code>def love(fun):\n  def inner():\n    return fun.__name__\n  return inner\n@love\ndef fun_test():\n  print(\"testing\")\n\nprint(fun_test())  \n</code></pre> <pre><code>def dob(fun):\n  def inner(n):\n    return fun(n**2)\n  return inner\n\ndef calc(num):\n  print(num)\n\n@dob\ndef cal(num):\n  print(num)\n\ncalc(11)\ncal(11)\n</code></pre> <p>Q9. What is list comprehension? write some sample code? what is use of it?</p>"},{"location":"interview-questions/interview-theory/#what-is-list-comprehension-in-python","title":"What is List Comprehension in Python?","text":"<p>List comprehension is a concise and elegant way to create lists in Python. It uses a single line of code to generate a new list by applying an expression to each item in an existing iterable.</p>"},{"location":"interview-questions/interview-theory/#syntax-of-list-comprehension","title":"Syntax of List Comprehension","text":"<pre><code>[expression for item in iterable if condition]\n</code></pre> <ol> <li>Expression: An operation or transformation applied to each item in the iterable.</li> <li>Item: The variable that takes the value of each element from the iterable.</li> <li>Iterable: The data source (e.g., list, range, string, etc.).</li> <li>Condition (optional): A filtering condition that determines whether an item should be included.</li> </ol>"},{"location":"interview-questions/interview-theory/#uses-of-list-comprehension","title":"Uses of List Comprehension","text":"<ol> <li>Simplifies Code: Reduces multiple lines of code into one concise statement.</li> <li>Readable: Improves code readability for simple list transformations.</li> <li>Efficient: Faster than traditional <code>for</code> loops for small to medium-sized datasets.</li> </ol>"},{"location":"interview-questions/interview-theory/#examples-of-list-comprehension","title":"Examples of List Comprehension","text":""},{"location":"interview-questions/interview-theory/#1-basic-list-creation","title":"1. Basic List Creation","text":"<pre><code># Create a list of squares\nsquares = [x**2 for x in range(5)]\nprint(squares)  # Output: [0, 1, 4, 9, 16]\n</code></pre>"},{"location":"interview-questions/interview-theory/#2-with-filtering-condition","title":"2. With Filtering (Condition)","text":"<pre><code># Create a list of even numbers\nevens = [x for x in range(10) if x % 2 == 0]\nprint(evens)  # Output: [0, 2, 4, 6, 8]\n</code></pre>"},{"location":"interview-questions/interview-theory/#3-nested-loops","title":"3. Nested Loops","text":"<pre><code># Create a list of coordinate pairs\ncoordinates = [(x, y) for x in range(3) for y in range(2)]\nprint(coordinates)  # Output: [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)]\n</code></pre>"},{"location":"interview-questions/interview-theory/#4-applying-a-function","title":"4. Applying a Function","text":"<pre><code># Convert all strings in a list to uppercase\nwords = [\"hello\", \"world\", \"python\"]\nuppercase_words = [word.upper() for word in words]\nprint(uppercase_words)  # Output: ['HELLO', 'WORLD', 'PYTHON']\n</code></pre>"},{"location":"interview-questions/interview-theory/#5-conditional-transformation","title":"5. Conditional Transformation","text":"<pre><code># Replace negative numbers with 0\nnums = [-1, 2, -3, 4]\nnon_negative = [x if x &gt;= 0 else 0 for x in nums]\nprint(non_negative)  # Output: [0, 2, 0, 4]\n</code></pre>"},{"location":"interview-questions/interview-theory/#6-flattening-a-nested-list","title":"6. Flattening a Nested List","text":"<pre><code># Flatten a 2D list\nmatrix = [[1, 2], [3, 4], [5, 6]]\nflattened = [num for row in matrix for num in row]\nprint(flattened)  # Output: [1, 2, 3, 4, 5, 6]\n</code></pre>"},{"location":"interview-questions/interview-theory/#advantages-of-list-comprehension","title":"Advantages of List Comprehension","text":"<ul> <li>Concise and expressive.</li> <li>Avoids the need for explicit loops.</li> <li>Easy to read and understand for simple operations.</li> </ul>"},{"location":"interview-questions/interview-theory/#when-to-avoid-list-comprehension","title":"When to Avoid List Comprehension","text":"<ul> <li>When the logic is complex and includes multiple conditions or operations, traditional loops may be more readable.</li> <li>For very large datasets, using list comprehension may lead to high memory usage as it creates the entire list in memory.</li> </ul>"},{"location":"interview-questions/interview-theory/#summary","title":"Summary","text":"<p>List comprehension is a powerful and elegant way to generate and manipulate lists in Python. It is particularly useful for creating new lists based on existing iterables in a concise and efficient manner.</p>"},{"location":"interview-questions/interview-theory/#q-write-a-program-to-display-unique-vowels-present-in-the-given-word","title":"Q. Write a program to display unique vowels present in the given word?","text":"<pre><code>vowels = ['a', 'e', 'i', 'o', 'u']\nword = input(\"Enter the word to search for vowels: \")\n\n# Using list comprehension to find unique vowels in the word\nfound = [letter for letter in vowels if letter in word]\n\nprint(found)\nprint(f\"The number of different vowels present in '{word}' is {len(found)}\")\n</code></pre> <p>Q10. Write code of fibonacci series?</p> <pre><code>def fib():\n  a,b = 0,1\n  while True:\n    yield a\n    a,b = b,a+b\ndata = fib()\nfor _ in range(11):\n  print(next(data))\n</code></pre> <pre><code># Fibonacci series using generator\ndef fibonacci_generator(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n# Input: Number of terms\nnum_terms = int(input(\"Enter the number of terms: \"))\nprint(f\"Fibonacci series: {list(fibonacci_generator(num_terms))}\")\n</code></pre> <p>Q11. What is dictionary? is this accept duplicate or not? Q20. program to reverse dictionary key to value and value to key Here\u2019s a Python program to reverse the keys and values of a dictionary:</p>"},{"location":"interview-questions/interview-theory/#program","title":"Program","text":"<pre><code># Original dictionary\noriginal_dict = {\n    \"name\": \"Ashish\",\n    \"age\": 25,\n    \"course\": \"Python\"\n}\n\n# Reversing the dictionary\nreversed_dict = {value: key for key, value in original_dict.items()}\n\n# Output the result\nprint(\"Original Dictionary:\", original_dict)\nprint(\"Reversed Dictionary:\", reversed_dict)\n</code></pre>"},{"location":"interview-questions/interview-theory/#output","title":"Output","text":"<pre><code>Original Dictionary: {'name': 'Ashish', 'age': 25, 'course': 'Python'}\nReversed Dictionary: {'Ashish': 'name', 25: 'age', 'Python': 'course'}\n</code></pre>"},{"location":"interview-questions/interview-theory/#explanation","title":"Explanation","text":"<ol> <li><code>original_dict.items()</code>: Provides an iterable of key-value pairs from the original dictionary.</li> <li>Dictionary Comprehension: Swaps the keys and values by creating a new dictionary where:    - <code>key</code> becomes <code>value</code>    - <code>value</code> becomes <code>key</code></li> </ol>"},{"location":"interview-questions/interview-theory/#considerations","title":"Considerations","text":"<ul> <li>Duplicate Values in the Original Dictionary: If there are duplicate values in the original dictionary, the reversed dictionary will only keep one of the original keys (the last one processed). For example:</li> </ul> <pre><code>original_dict = {\"a\": 1, \"b\": 2, \"c\": 1}\nreversed_dict = {value: key for key, value in original_dict.items()}\nprint(reversed_dict)  # Output: {1: 'c', 2: 'b'}\n</code></pre> <p>The key <code>'a'</code> is overwritten by <code>'c'</code> for the value <code>1</code>.</p> <ul> <li>Immutable Values: Only hashable and immutable values in the original dictionary can be used as keys in the reversed dictionary. If a value is mutable (like a list), it will raise a <code>TypeError</code>. Q21. what lambda function with example</li> </ul>"},{"location":"interview-questions/interview-theory/#what-is-a-lambda-function-in-python","title":"What is a Lambda Function in Python?","text":"<p>A lambda function in Python is a small, anonymous function defined using the <code>lambda</code> keyword. It can have any number of input arguments but only one expression. The result of the expression is automatically returned.</p>"},{"location":"interview-questions/interview-theory/#syntax_1","title":"Syntax","text":"<pre><code>lambda arguments: expression\n</code></pre> <ul> <li><code>arguments</code>: Input parameters, like a regular function.</li> <li><code>expression</code>: The computation or operation to perform and return.</li> </ul>"},{"location":"interview-questions/interview-theory/#key-characteristics","title":"Key Characteristics","text":"<ol> <li>Anonymous: Lambda functions don't have a name (unlike normal functions defined using <code>def</code>).</li> <li>Single Expression: They consist of only one expression, and the result is implicitly returned.</li> <li>Typically used for short, simple operations.</li> </ol>"},{"location":"interview-questions/interview-theory/#examples","title":"Examples","text":""},{"location":"interview-questions/interview-theory/#1-simple-lambda-function","title":"1. Simple Lambda Function","text":"<pre><code># Lambda function to add two numbers\nadd = lambda x, y: x + y\nprint(add(5, 3))  # Output: 8\n</code></pre>"},{"location":"interview-questions/interview-theory/#2-lambda-function-inside-another-function","title":"2. Lambda Function Inside Another Function","text":"<pre><code># Function using a lambda to square a number\ndef square(n):\n    return (lambda x: x ** 2)(n)\n\nprint(square(4))  # Output: 16\n</code></pre>"},{"location":"interview-questions/interview-theory/#3-using-lambda-with-map","title":"3. Using Lambda with <code>map()</code>","text":"<pre><code># Doubling all numbers in a list\nnums = [1, 2, 3, 4, 5]\ndoubled = list(map(lambda x: x * 2, nums))\nprint(doubled)  # Output: [2, 4, 6, 8, 10]\n</code></pre>"},{"location":"interview-questions/interview-theory/#4-using-lambda-with-filter","title":"4. Using Lambda with <code>filter()</code>","text":"<pre><code># Filtering even numbers from a list\nnums = [1, 2, 3, 4, 5]\neven_nums = list(filter(lambda x: x % 2 == 0, nums))\nprint(even_nums)  # Output: [2, 4]\n</code></pre>"},{"location":"interview-questions/interview-theory/#5-using-lambda-with-sorted","title":"5. Using Lambda with <code>sorted()</code>","text":"<pre><code># Sorting a list of tuples by the second element\ndata = [(1, 'b'), (2, 'a'), (3, 'c')]\nsorted_data = sorted(data, key=lambda x: x[1])\nprint(sorted_data)  # Output: [(2, 'a'), (1, 'b'), (3, 'c')]\n</code></pre>"},{"location":"interview-questions/interview-theory/#when-to-use-lambda-functions","title":"When to Use Lambda Functions","text":"<ol> <li>For small, quick operations.</li> <li>As an argument to functions like <code>map()</code>, <code>filter()</code>, and <code>sorted()</code>.</li> <li>When defining functions inline without needing a formal function name.</li> </ol>"},{"location":"interview-questions/interview-theory/#limitations-of-lambda-functions","title":"Limitations of Lambda Functions","text":"<ol> <li>Single Expression: Lambdas are limited to one expression, so they're not suitable for complex logic.</li> <li>No Name: Debugging and reusability can be harder because they're anonymous.</li> <li>No Statements: Cannot contain statements like <code>if</code>, <code>for</code>, or <code>print</code> (only expressions).</li> </ol>"},{"location":"interview-questions/interview-theory/#comparison-with-regular-function","title":"Comparison with Regular Function","text":"<pre><code># Regular function\ndef add(x, y):\n    return x + y\n\n# Equivalent lambda function\nadd_lambda = lambda x, y: x + y\n</code></pre> <p>Both can be used interchangeably, but lambda is concise and often used for inline or short-lived operations.</p>"},{"location":"interview-questions/interview-theory/#map-filter-and-sorted-in-python","title":"<code>map()</code>, <code>filter()</code>, and <code>sorted()</code> in Python","text":"<p>These are built-in Python functions commonly used for applying operations to collections like lists, tuples, or sets. They allow for efficient, functional-style operations.</p>"},{"location":"interview-questions/interview-theory/#1-map","title":"1. <code>map()</code>","text":"<p>The <code>map()</code> function applies a given function to each item in an iterable and returns a new iterable (a <code>map</code> object).</p>"},{"location":"interview-questions/interview-theory/#syntax_2","title":"Syntax","text":"<pre><code>map(function, iterable)\n</code></pre> <ul> <li><code>function</code>: A function to apply to each element of the iterable.</li> <li><code>iterable</code>: The collection (like a list, tuple) whose items the function will process.</li> </ul>"},{"location":"interview-questions/interview-theory/#example_1","title":"Example","text":"<pre><code># Doubling each number in a list\nnums = [1, 2, 3, 4]\ndoubled = list(map(lambda x: x * 2, nums))\nprint(doubled)  # Output: [2, 4, 6, 8]\n</code></pre>"},{"location":"interview-questions/interview-theory/#use-cases","title":"Use Cases","text":"<ul> <li>Transforming data in a collection.</li> <li>Applying mathematical or custom operations on each element.</li> </ul>"},{"location":"interview-questions/interview-theory/#2-filter","title":"2. <code>filter()</code>","text":"<p>The <code>filter()</code> function filters elements from an iterable based on a condition defined by a function. It returns a new iterable (a <code>filter</code> object) containing elements where the function evaluates to <code>True</code>.</p>"},{"location":"interview-questions/interview-theory/#syntax_3","title":"Syntax","text":"<pre><code>filter(function, iterable)\n</code></pre> <ul> <li><code>function</code>: A function that returns <code>True</code> or <code>False</code> for each element.</li> <li><code>iterable</code>: The collection to filter.</li> </ul>"},{"location":"interview-questions/interview-theory/#example_2","title":"Example","text":"<pre><code># Filtering even numbers from a list\nnums = [1, 2, 3, 4, 5, 6]\nevens = list(filter(lambda x: x % 2 == 0, nums))\nprint(evens)  # Output: [2, 4, 6]\n</code></pre>"},{"location":"interview-questions/interview-theory/#use-cases_1","title":"Use Cases","text":"<ul> <li>Extracting elements that meet a specific condition.</li> <li>Filtering data like even numbers, strings that match a pattern, etc.</li> </ul>"},{"location":"interview-questions/interview-theory/#3-sorted","title":"3. <code>sorted()</code>","text":"<p>The <code>sorted()</code> function sorts the elements of an iterable and returns a new sorted list.</p>"},{"location":"interview-questions/interview-theory/#syntax_4","title":"Syntax","text":"<pre><code>sorted(iterable, key=None, reverse=False)\n</code></pre> <ul> <li><code>iterable</code>: The collection to be sorted.</li> <li><code>key</code> (optional): A function defining the sorting logic (e.g., based on length or specific property).</li> <li><code>reverse</code> (optional): If <code>True</code>, sorts in descending order; otherwise, ascending (default).</li> </ul>"},{"location":"interview-questions/interview-theory/#example_3","title":"Example","text":"<pre><code># Sorting numbers in ascending and descending order\nnums = [5, 2, 9, 1, 3]\nprint(sorted(nums))               # Output: [1, 2, 3, 5, 9]\nprint(sorted(nums, reverse=True)) # Output: [9, 5, 3, 2, 1]\n\n# Sorting strings by length\nwords = [\"apple\", \"banana\", \"kiwi\"]\nsorted_by_length = sorted(words, key=len)\nprint(sorted_by_length)  # Output: ['kiwi', 'apple', 'banana']\n</code></pre>"},{"location":"interview-questions/interview-theory/#use-cases_2","title":"Use Cases","text":"<ul> <li>Sorting data numerically, alphabetically, or based on custom criteria.</li> <li>Rearranging complex data like dictionaries, tuples, or custom objects.</li> </ul>"},{"location":"interview-questions/interview-theory/#summary-of-differences","title":"Summary of Differences","text":"Function Purpose Returns Use Case <code>map()</code> Applies a function to every element of an iterable A <code>map</code> object Transform all elements of a collection <code>filter()</code> Filters elements based on a condition A <code>filter</code> object Extract specific elements from a collection <code>sorted()</code> Sorts elements based on criteria A list Arrange elements in a specific order <p>These functions are integral for efficient data processing and align well with functional programming styles in Python. Q22. Can you convert List to Dict object. (Scenario)</p> <p>Yes, you can convert a list to a dictionary in Python. However, how you do this depends on the structure of the list and the desired format of the dictionary. Here are a few common scenarios:</p>"},{"location":"interview-questions/interview-theory/#1-convert-a-list-of-tuples-to-a-dictionary","title":"1. Convert a List of Tuples to a Dictionary","text":"<p>If the list contains tuples where the first element is the key and the second is the value, you can use the <code>dict()</code> constructor.</p> <pre><code># List of tuples\nlist_of_tuples = [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\n\n# Convert to dictionary\ndict_obj = dict(list_of_tuples)\nprint(dict_obj)\n</code></pre> <p>Output:</p> <pre><code>{'a': 1, 'b': 2, 'c': 3}\n</code></pre>"},{"location":"interview-questions/interview-theory/#2-convert-two-lists-keys-and-values-into-a-dictionary","title":"2. Convert Two Lists (Keys and Values) into a Dictionary","text":"<p>If you have two lists \u2014 one for keys and one for values \u2014 you can use the <code>zip()</code> function.</p> <pre><code># Lists of keys and values\nkeys = [\"name\", \"age\", \"city\"]\nvalues = [\"Alice\", 25, \"New York\"]\n\n# Convert to dictionary\ndict_obj = dict(zip(keys, values))\nprint(dict_obj)\n</code></pre> <p>Output:</p> <pre><code>{'name': 'Alice', 'age': 25, 'city': 'New York'}\n</code></pre>"},{"location":"interview-questions/interview-theory/#3-convert-a-list-of-elements-into-a-dictionary-with-indices-as-keys","title":"3. Convert a List of Elements into a Dictionary with Indices as Keys","text":"<p>If you want to use the indices of the list elements as dictionary keys, you can use <code>enumerate()</code>.</p> <pre><code># List of values\nvalues = [\"Apple\", \"Banana\", \"Cherry\"]\n\n# Convert to dictionary\ndict_obj = {index: value for index, value in enumerate(values)}\nprint(dict_obj)\n</code></pre> <p>Output:</p> <pre><code>{0: 'Apple', 1: 'Banana', 2: 'Cherry'}\n</code></pre>"},{"location":"interview-questions/interview-theory/#4-convert-a-flat-list-into-a-dictionary","title":"4. Convert a Flat List into a Dictionary","text":"<p>If the list alternates between keys and values, you can use slicing or the <code>zip()</code> function.</p> <pre><code># Flat list with alternating keys and values\nflat_list = [\"name\", \"Alice\", \"age\", 25, \"city\", \"New York\"]\n\n# Convert to dictionary\ndict_obj = dict(zip(flat_list[0::2], flat_list[1::2]))\nprint(dict_obj)\n</code></pre> <p>Output:</p> <pre><code>{'name': 'Alice', 'age': 25, 'city': 'New York'}\n</code></pre>"},{"location":"interview-questions/interview-theory/#what-are-python-metaclasses-and-how-do-they-work","title":"What are Python metaclasses, and how do they work?","text":"<p>The metaclasses in Python help in controlling the creation of classes. There is a built-in type metaclass in Python; custom metaclasses in Python can be defined using the inject methods or by enforcing the coding standards. Metaclasses are very helpful when multiple classes need to follow a particular set of rules. They make it easy for developers to enforce these rules and are mainly used in Python frameworks and library designs.</p>"},{"location":"interview-questions/interview-theory/#what-are-constructors","title":"What are constructors?","text":""},{"location":"interview-questions/interview-theory/#79-what-is-a-class-and-an-object-in-python","title":"79. What is a class and an object in Python?","text":""},{"location":"interview-questions/interview-theory/#77-what-is-dictionary-comprehension","title":"77. What is dictionary comprehension?","text":"<p>Dictionary comprehension in Python is a quick and clear way to create a dictionary using existing data like a list, tuple, or range. It works just like list comprehension but builds a dictionary instead of a list.</p> <p>Key Features:</p> <p>Builds a dictionary using a single-line expression. Allows adding conditions or modifying values and keys. Makes the code shorter, cleaner, and easier to read Example:</p> <pre><code># Create a dictionary of squares for even numbers from 0 to 4\ndict_comprehension = {i: i**2 for i in range(5) if i % 2 == 0}\n\nprint(dict_comprehension)\n</code></pre>"},{"location":"interview-questions/interview-theory/#how-can-the-ternary-operators-be-used-in-python","title":"How can the ternary operators be used in Python?","text":"<p>The ternary operator is the operator used to show the conditional statements in Python. This consists of the boolean true or false values, along with a statement that has to be checked.</p> <p>Syntax:</p> <p>[on_true] if [condition] else [on_false] x, y = 10, 20 count = x if x &lt; y else y print(count) Explanation: The above expression is evaluated as if x&lt;y else y, in this case, if x&lt;y is true, then the value is returned as count=x, and if it is incorrect, then count=y will be stored into the result.</p>"},{"location":"interview-questions/interview-theory/#explain-the-use-of-the-with-statement-and-its-syntax","title":"Explain the use of the \u2018with\u2019 statement and its syntax","text":"<p>The \u2018with\u2019 statement in Python is used for managing resources efficiently and helps in file handling operations. It helps in simplifying the code by automatically opening and closing the files, even if there is an error during the execution. For opening a file with open(\u201cfilename\u201d, \u201cmode\u201d) as file: is used, and the file is automatically closed.   With statements is a better approach than manually opening and closing a file using open() and close(). It also helps in preventing memory leakage and file access errors, which makes it the best choice for file handling operations.   Here is the syntax:</p> <p>with open(\"filename\", \"mode\") as file_var:</p>"},{"location":"interview-questions/interview-theory/#what-are-the-different-types-of-inheritance-in-python","title":"What are the different types of inheritance in Python?","text":"<p>Inheritance is a major pillar in the OOPs concept. There are five types of inheritance available in Python. All of them are listed below:</p> <p>Single Inheritance: A Situation where a class inherits properties from one superclass. Multiple Inheritance: A Situation where a class inherits properties from multiple superclasses Multilevel Inheritance: This is a scenario where a class inherits properties from a superclass, which itself inherits from another superclass. It forms a chain of inheritance across multiple levels Hierarchical Inheritance: A Situation where multiple classes are inheriting properties from a single superclass Hybrid Inheritance: A Situation where different types of inheritance are used.</p>"},{"location":"interview-questions/interview-theory/#what-is-the-use-of-slots-in-python-classes","title":"What is the use of slots in Python classes?","text":"<p>The slots in a Python class help in limiting the attributes of an object. This prevents Python from creating a separate dict for each instance, which helps in making the classes memory efficient and faster. This is very helpful when dealing with multiple objects. But slot cannot be used to add new attributes to the instances, which reduces the flexibility. It is mainly used to improve the performance and make the class\u2019s memory efficient.</p>"},{"location":"interview-questions/interview-theory/#5-custom-conversion-logic","title":"5. Custom Conversion Logic","text":"<p>If the list has a custom structure, you can use a loop or a dictionary comprehension to process it.</p> <pre><code># List of items\nlist_items = [\"name\", \"Alice\", \"age\", 25, \"city\", \"New York\"]\n\n# Convert to dictionary (even indices are keys, odd indices are values)\ndict_obj = {list_items[i]: list_items[i + 1] for i in range(0, len(list_items), 2)}\nprint(dict_obj)\n</code></pre> <p>Output:</p> <pre><code>{'name': 'Alice', 'age': 25, 'city': 'New York'}\n</code></pre>"},{"location":"interview-questions/interview-theory/#general-notes","title":"General Notes","text":"<ol> <li>Duplicate Keys: If the list contains duplicate keys (e.g., in case of a list of tuples), only the last key-value pair is retained in the dictionary.</li> <li>Invalid Data Structure: If the list structure doesn't match the intended dictionary format (e.g., an odd number of elements in the flat list), you\u2019ll need to handle such cases with error-checking or default values. Q23. Diff between extend &amp; append in list</li> </ol>"},{"location":"interview-questions/interview-theory/#difference-between-extend-and-append-in-python-lists","title":"Difference Between <code>extend()</code> and <code>append()</code> in Python Lists","text":"<p>Both <code>extend()</code> and <code>append()</code> are methods used to add elements to a list in Python, but they behave differently.</p>"},{"location":"interview-questions/interview-theory/#1-append","title":"1. <code>append()</code>","text":"<ul> <li>Purpose: Adds a single element to the end of the list.</li> <li>Behavior: Treats the argument as a single item, even if it is iterable (like a list or tuple).</li> <li>Returns: Does not return a new list; modifies the list in place.</li> </ul>"},{"location":"interview-questions/interview-theory/#example_4","title":"Example:","text":"<pre><code># Original list\nmy_list = [1, 2, 3]\n\n# Append an element\nmy_list.append(4)\nprint(my_list)  # Output: [1, 2, 3, 4]\n\n# Append a list as a single element\nmy_list.append([5, 6])\nprint(my_list)  # Output: [1, 2, 3, 4, [5, 6]]\n</code></pre>"},{"location":"interview-questions/interview-theory/#2-extend","title":"2. <code>extend()</code>","text":"<ul> <li>Purpose: Extends the list by appending each element from the iterable (like another list or tuple) to the list.</li> <li>Behavior: Breaks the iterable into individual elements and adds them to the list.</li> <li>Returns: Does not return a new list; modifies the list in place.</li> </ul>"},{"location":"interview-questions/interview-theory/#example_5","title":"Example:","text":"<pre><code># Original list\nmy_list = [1, 2, 3]\n\n# Extend the list with another list\nmy_list.extend([4, 5])\nprint(my_list)  # Output: [1, 2, 3, 4, 5]\n\n# Extend the list with a tuple\nmy_list.extend((6, 7))\nprint(my_list)  # Output: [1, 2, 3, 4, 5, 6, 7]\n</code></pre>"},{"location":"interview-questions/interview-theory/#key-differences_1","title":"Key Differences","text":"Feature <code>append()</code> <code>extend()</code> Argument Takes a single element (any type). Takes an iterable (e.g., list, tuple). Behavior Adds the entire element as-is. Adds each element of the iterable. Effect Increases the list length by 1. Increases the list length by the size of the iterable. Result Adds nested lists or iterables. Flattens the iterable into the list."},{"location":"interview-questions/interview-theory/#example-comparison","title":"Example Comparison","text":"<pre><code># Using append()\nlist1 = [1, 2, 3]\nlist1.append([4, 5])\nprint(list1)  # Output: [1, 2, 3, [4, 5]]\n\n# Using extend()\nlist2 = [1, 2, 3]\nlist2.extend([4, 5])\nprint(list2)  # Output: [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"interview-questions/interview-theory/#when-to-use_1","title":"When to Use?","text":"<ul> <li>Use <code>append()</code> when you want to add a single element or when adding an entire object (like a list) as a single item.</li> <li>Use <code>extend()</code> when you want to add multiple elements from an iterable to the list individually.</li> </ul> <p>These methods make list manipulations more versatile and efficient depending on the task. Q13. What are the main principles of oops? Q14. Explain type of inheritance Q15. What is aws lambda function Q16. Explain your project briefly Q17. regular expression for email validation</p>"},{"location":"interview-questions/interview-theory/#regular-expression-for-email-validation","title":"Regular Expression for Email Validation","text":"<p>A regular expression (regex) can be used to validate email addresses by ensuring they conform to a specific pattern. Here's an example of a commonly used regex for email validation:</p> <pre><code>import re\n\n# Define a regex pattern for email validation\nemail_regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n\n# Sample email validation function\ndef validate_email(email):\n    if re.match(email_regex, email):\n        return True\n    return False\n\n# Test the function\nprint(validate_email(\"example@test.com\"))  # Output: True\nprint(validate_email(\"invalid-email\"))     # Output: False\n</code></pre>"},{"location":"interview-questions/interview-theory/#explanation-of-the-regex-pattern","title":"Explanation of the Regex Pattern","text":"<pre><code>^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\n</code></pre> Component Meaning <code>^</code> Start of the string. <code>[a-zA-Z0-9._%+-]+</code> Matches the local part of the email (before the <code>@</code>). Can contain letters, digits, dots (<code>.</code>), underscores (<code>_</code>), percent signs (<code>%</code>), plus (<code>+</code>), and hyphens (<code>-</code>). <code>@</code> Matches the <code>@</code> symbol separating the local part and the domain. <code>[a-zA-Z0-9.-]+</code> Matches the domain name (e.g., <code>gmail</code>, <code>yahoo</code>). Can contain letters, digits, dots (<code>.</code>), and hyphens (<code>-</code>). <code>\\.</code> Matches the dot (<code>.</code>) separating the domain and top-level domain (TLD). <code>[a-zA-Z]{2,}</code> Matches the top-level domain (TLD) with at least 2 characters (e.g., <code>com</code>, <code>org</code>). <code>$</code> End of the string."},{"location":"interview-questions/interview-theory/#examples-of-valid-and-invalid-emails","title":"Examples of Valid and Invalid Emails","text":""},{"location":"interview-questions/interview-theory/#valid-emails","title":"Valid Emails","text":"<ol> <li><code>example@test.com</code></li> <li><code>user.name+tag+sorting@example.com</code></li> <li><code>x@example.org</code></li> <li><code>email@subdomain.example.com</code></li> </ol>"},{"location":"interview-questions/interview-theory/#invalid-emails","title":"Invalid Emails","text":"<ol> <li><code>plainaddress</code> (No <code>@</code> symbol)</li> <li><code>@missingusername.com</code> (No local part)</li> <li><code>username@.com</code> (Domain is missing)</li> <li><code>username@domain</code> (No TLD)</li> </ol>"},{"location":"interview-questions/interview-theory/#important-notes","title":"Important Notes","text":"<ul> <li>This regex is a basic implementation and covers most use cases.</li> <li>Some valid emails might not match this regex (e.g., unusual but technically valid domain names).</li> <li>For stricter validation or internationalized email addresses, consider libraries like <code>email-validator</code>:</li> </ul> <pre><code>pip install email-validator\n</code></pre> <pre><code>from email_validator import validate_email, EmailNotValidError\n\ntry:\n    valid = validate_email(\"example@test.com\")\n    print(\"Valid Email:\", valid.email)\nexcept EmailNotValidError as e:\n    print(\"Invalid Email:\", str(e))\n</code></pre>"},{"location":"interview-questions/interview-theory/#how-to-define-private-and-public-variables","title":"How to define private and public variables","text":"<ul> <li>Public variables: Accessible everywhere; no underscore.</li> <li>Protected variables: Should be used only in class and subclasses; single underscore _.</li> <li>Private variables: Accessible only inside the class; double underscore __. Python uses name mangling to prevent external access.</li> </ul> <ol> <li>Public Variables</li> </ol> <p>Definition: Accessible from anywhere \u2013 inside the class, in subclasses, and outside the class.</p> <p>How to define: Simply define a variable without any underscores.</p> <pre><code>class Employee:\n    def __init__(self, name):\n        self.name = name  # Public variable\n\nemp = Employee(\"Ashish\")\nprint(emp.name)  # Accessible outside the class \u2192 Ashish\n</code></pre> <ol> <li>Protected Variables</li> </ol> <p>Definition: Intended to be accessible only within the class and its subclasses.</p> <p>Not strictly enforced in Python, it\u2019s just a convention.</p> <p>How to define: Prefix the variable name with a single underscore _</p> <pre><code>class Employee:\n    def __init__(self, name, salary):\n        self._salary = salary  # Protected variable\n\nclass Manager(Employee):\n    def show_salary(self):\n        print(self._salary)  # Accessible in subclass\n\nemp = Employee(\"Ashish\", 50000)\nprint(emp._salary)  # Technically accessible, but discouraged\n</code></pre> <ol> <li>Private Variables</li> </ol> <p>Definition: Variables that are accessible only within the class. Python mangles the name to prevent accidental access from outside.</p> <p>How to define: Prefix the variable name with double underscore __.</p> <pre><code>class Employee:\n    def __init__(self, name, salary):\n        self.__salary = salary  # Private variable\n\n    def show_salary(self):\n        print(self.__salary)\n\nemp = Employee(\"Ashish\", 50000)\nemp.show_salary()  # 50000\nprint(emp.__salary)  # Error \u2192 AttributeError\n</code></pre>"},{"location":"interview-questions/interview-theory/#magic-methods","title":"magic methods","text":"<p>magic methods in Python (also called dunder methods). Magic methods are special methods in Python with double underscores (method).</p> <p>They define the behavior of Python objects for built-in operations.</p> <p>Python automatically calls them in response to operators or built-in functions.</p> Magic Method Purpose / Example <code>__init__</code> Constructor; called when creating an object <code>__str__</code> Defines string representation (used by <code>print</code>) <code>__repr__</code> Developer-friendly string representation <code>__len__</code> Called by <code>len()</code> <code>__add__</code> Defines behavior for <code>+</code> operator <code>__sub__</code> Defines behavior for <code>-</code> operator <code>__getitem__</code> Access elements using indexing (<code>obj[key]</code>) <code>__setitem__</code> Set element via indexing (<code>obj[key] = value</code>) <code>__iter__</code> Makes object iterable <code>__next__</code> Returns next item for iterator <code>__call__</code> Makes object callable like a function <pre><code>class Employee:\n    def __init__(self, name, salary):\n        self.name = name\n        self.salary = salary\n\n    def __str__(self):\n        return f\"{self.name} earns {self.salary}\"\n\n    def __add__(self, other):\n        return self.salary + other.salary\n\nemp1 = Employee(\"Ashish\", 50000)\nemp2 = Employee(\"Bindra\", 60000)\n\nprint(emp1)          # Calls __str__: Ashish earns 50000\nprint(emp1 + emp2)   # Calls __add__: 110000\n</code></pre>"},{"location":"interview-questions/interview-theory/#iterables-and-iterators-in-python","title":"iterables and iterators in Python","text":"<p>Definition: An iterable is any Python object that can return an iterator.</p> <p>Examples: list, tuple, dict, set, str, etc.</p> <p>Key point: You can loop over it using a for loop. How to check if an object is iterable:</p> <pre><code>from collections.abc import Iterable\n\nprint(isinstance([1, 2, 3], Iterable))  # True\nprint(isinstance(123, Iterable))        # False\n</code></pre> <ol> <li>Iterator</li> </ol> <p>Definition: An iterator is an object that produces items one at a time from an iterable.</p> <p>It implements two methods:</p> <p>iter() \u2192 returns the iterator object itself</p> <p>next() \u2192 returns the next value, raises StopIteration when exhausted How to get an iterator from an iterable:</p> <pre><code>my_list = [1, 2, 3]\nit = iter(my_list)  # Get iterator\n\nprint(next(it))  # 1\nprint(next(it))  # 2\nprint(next(it))  # 3\n# print(next(it))  # Raises StopIteration\n</code></pre> <ol> <li> <p>Key Differences | Feature    | Iterable               | Iterator                                          | | ---------- | ---------------------- | ------------------------------------------------- | | Definition | Can return an iterator | Produces items one by one                         | | Methods    | <code>__iter__()</code>           | <code>__iter__()</code> and <code>__next__()</code>                     | | Looping    | Can use <code>for</code> loop     | Can use <code>for</code> loop but is consumed after one pass | | Example    | list, tuple, str, set  | <code>iter(list)</code>, generator objects                   |</p> </li> <li> <p>Generators</p> </li> </ol> <p>Generators are special iterators created using:</p> <p>yield keyword in functions</p> <p>Generator expressions (x*x for x in range(5))</p> <p>They are lazy, meaning they generate values on demand.</p> <pre><code>def my_gen():\n    for i in range(3):\n        yield i\n\ng = my_gen()\nprint(next(g))  # 0\nprint(next(g))  # 1\n</code></pre> <ol> <li>Interview-Friendly Answer</li> </ol> <p>Iterable: Any object you can loop over (for), like lists, tuples, sets, strings.</p> <p>Iterator: An object that produces items from an iterable one by one using next().</p> <p>Key idea: You can convert an iterable to an iterator using iter(). Iterators are consumed once, while iterables can produce multiple iterators.</p>"},{"location":"interview-questions/interview-theory/#1-what-is-caching-in-python","title":"1. What is Caching in Python?","text":"<p>Python caching is a technique to store frequently used results in memory to avoid repeated computation and improve performance. Common approaches include functools.lru_cache for function results, manual caching with dictionaries, and caching frameworks in web apps like Django or Flask.\u201d Definition: Caching is the process of storing frequently used data in memory to avoid recomputation.</p> <p>Helps improve performance for expensive operations like function calls, database queries, or API calls.</p> <ol> <li>Common Python Caching Techniques a) Using functools.lru_cache lru_cache stands for Least Recently Used cache.</li> </ol> <p>It stores results of a function call in memory and returns cached results if the same arguments are passed again.</p> <pre><code>from functools import lru_cache\n\n@lru_cache(maxsize=5)\ndef fibonacci(n):\n    if n &lt; 2:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))\n</code></pre> <p>The function caches the last 5 calls.</p> <p>Performance boost for recursive functions like Fibonacci.</p> <p>b) Using a Dictionary</p> <p>Simple manual caching using a dictionary.</p> <pre><code>cache = {}\n\ndef square(n):\n    if n in cache:\n        return cache[n]\n    result = n * n\n    cache[n] = result\n    return result\n\nprint(square(4))  # Computes and stores\nprint(square(4))  # Returns from cache\n</code></pre> <p>c) Caching in Web Frameworks</p> <p>Django cache framework:</p> <p>Stores database query results, templates, or API responses.</p> <p>Backends: Memory, Redis, Memcached, file-based, database.</p> <pre><code>from django.core.cache import cache\n\ncache.set('my_key', 'my_value', timeout=60)  # 60 seconds\nvalue = cache.get('my_key')\n</code></pre> <ol> <li>Why Use Caching</li> </ol> <p>Faster performance by avoiding repeated computations.</p> <p>Reduces load on databases and external APIs.</p> <p>Improves user experience in web applications.</p> <ol> <li>What is Reference Counter?</li> <li>What is a .pyc file? .pyc stands for Python Compiled file.</li> </ol> <p>It is a bytecode-compiled version of a Python .py source file.</p> <p>Python compiles .py files to bytecode before execution and stores it as .pyc for faster subsequent runs</p>"},{"location":"interview-questions/interview-theory/#python-chache","title":"python chache","text":"<p>Q24. Define a class. SDLC models Q25. Asked to describe iterators in Python, and implement it Q26. Asked about generators? Asked how I implemented Python in my project Q27. datatypes in python Q28. SLice , list , dict , django, CROSS, API Q29. Midlewares, session,cookies,APIs,oops Q30. Reverse character string in python Q32. map</p>"},{"location":"interview-questions/interview-theory/#671","title":"671","text":"<p>Iteration is a general term for taking each item of something, one after another. Any time you use a loop, explicit or implicit, to go over a group of items, that is iteration.</p> <p>In Python, iterable and iterator have specific meanings.</p> <p>An iterable is an object that has an iter method which returns an iterator, or which defines a getitem method that can take sequential indexes starting from zero (and raises an IndexError when the indexes are no longer valid). So an iterable is an object that you can get an iterator from.</p> <p>An iterator is an object with a next (Python 2) or next (Python 3) method.</p> <p>Whenever you use a for loop, or map, or a list comprehension, etc. in Python, the next method is called automatically to get each item from the iterator, thus going through the process of iteration.</p> <p>An iterable is an object from which an iterator can be obtained, such as a list or string, while an iterator is an object that produces the next value in a sequence and maintains its state through an internal counter, obtained by calling the iter() function on an iterable. Key differences include: iterables provide the data, iterators control the traversal one item at a time; iterators are always iterable, but the reverse is not true; and iterables implement the iter() method, while iterators implement both iter() and next(). Iterable Definition: An object that can return an iterator. Purpose: To allow iteration over its elements. Implementation: Often includes a iter() method that returns an iterator, or a getitem() method that can be accessed with sequential indexes. Examples: Lists, strings, dictionaries, and ranges are common iterables. Usage: A for loop automatically calls iter() on the iterable, obtaining an iterator to go through the elements. Iterator Definition: An object that represents a stream of data and iterates over a collection of elements one by one. Purpose: To control the iteration process by keeping track of the internal state. Implementation: Implements both the iter() method (which returns itself) and the next() method. Usage: The next() method retrieves the next item from the iterable. When there are no more items, it raises a StopIteration exception, which terminates the for loop. Key Relationship Every iterator is also an iterable. Not every iterable is an iterator. A list is iterable, but it is not an iterator because it doesn't have the next() method and doesn't keep an internal state for traversal.</p>"},{"location":"interview-questions/interview-theory/#map-filter-and-sorted-in-python_1","title":"<code>map()</code>, <code>filter()</code>, and <code>sorted()</code> in Python","text":"<p>These are built-in Python functions commonly used for applying operations to collections like lists, tuples, or sets. They allow for efficient, functional-style operations.</p>"},{"location":"interview-questions/interview-theory/#1-map_1","title":"1. <code>map()</code>","text":"<p>The <code>map()</code> function applies a given function to each item in an iterable and returns a new iterable (a <code>map</code> object).</p>"},{"location":"interview-questions/interview-theory/#syntax_5","title":"Syntax","text":"<pre><code>map(function, iterable)\n</code></pre> <ul> <li><code>function</code>: A function to apply to each element of the iterable.</li> <li><code>iterable</code>: The collection (like a list, tuple) whose items the function will process.</li> </ul>"},{"location":"interview-questions/interview-theory/#example_6","title":"Example","text":"<pre><code># Doubling each number in a list\nnums = [1, 2, 3, 4]\ndoubled = list(map(lambda x: x * 2, nums))\nprint(doubled)  # Output: [2, 4, 6, 8]\n</code></pre>"},{"location":"interview-questions/interview-theory/#use-cases_3","title":"Use Cases","text":"<ul> <li>Transforming data in a collection.</li> <li>Applying mathematical or custom operations on each element.</li> </ul>"},{"location":"interview-questions/interview-theory/#2-filter_1","title":"2. <code>filter()</code>","text":"<p>The <code>filter()</code> function filters elements from an iterable based on a condition defined by a function. It returns a new iterable (a <code>filter</code> object) containing elements where the function evaluates to <code>True</code>.</p>"},{"location":"interview-questions/interview-theory/#syntax_6","title":"Syntax","text":"<pre><code>filter(function, iterable)\n</code></pre> <ul> <li><code>function</code>: A function that returns <code>True</code> or <code>False</code> for each element.</li> <li><code>iterable</code>: The collection to filter.</li> </ul>"},{"location":"interview-questions/interview-theory/#example_7","title":"Example","text":"<pre><code># Filtering even numbers from a list\nnums = [1, 2, 3, 4, 5, 6]\nevens = list(filter(lambda x: x % 2 == 0, nums))\nprint(evens)  # Output: [2, 4, 6]\n</code></pre>"},{"location":"interview-questions/interview-theory/#use-cases_4","title":"Use Cases","text":"<ul> <li>Extracting elements that meet a specific condition.</li> <li>Filtering data like even numbers, strings that match a pattern, etc.</li> </ul>"},{"location":"interview-questions/interview-theory/#3-sorted_1","title":"3. <code>sorted()</code>","text":"<p>The <code>sorted()</code> function sorts the elements of an iterable and returns a new sorted list.</p>"},{"location":"interview-questions/interview-theory/#syntax_7","title":"Syntax","text":"<pre><code>sorted(iterable, key=None, reverse=False)\n</code></pre> <ul> <li><code>iterable</code>: The collection to be sorted.</li> <li><code>key</code> (optional): A function defining the sorting logic (e.g., based on length or specific property).</li> <li><code>reverse</code> (optional): If <code>True</code>, sorts in descending order; otherwise, ascending (default).</li> </ul>"},{"location":"interview-questions/interview-theory/#example_8","title":"Example","text":"<pre><code># Sorting numbers in ascending and descending order\nnums = [5, 2, 9, 1, 3]\nprint(sorted(nums))               # Output: [1, 2, 3, 5, 9]\nprint(sorted(nums, reverse=True)) # Output: [9, 5, 3, 2, 1]\n\n# Sorting strings by length\nwords = [\"apple\", \"banana\", \"kiwi\"]\nsorted_by_length = sorted(words, key=len)\nprint(sorted_by_length)  # Output: ['kiwi', 'apple', 'banana']\n</code></pre> <ul> <li>Sorting data numerically, alphabetically, or based on custom criteria.</li> <li>Rearranging complex data like dictionaries, tuples, or custom objects.</li> </ul> Function Purpose Returns Use Case <code>map()</code> Applies a function to every element of an iterable A <code>map</code> object Transform all elements of a collection <code>filter()</code> Filters elements based on a condition A <code>filter</code> object Extract specific elements from a collection <code>sorted()</code> Sorts elements based on criteria A list Arrange elements in a specific order <p>These functions are integral for efficient data processing and align well with functional programming styles in Python.x Q33. filter Q34. tertools (Advanced Iterators)</p>"},{"location":"interview-questions/interview-theory/#itertools-advanced-iterators-in-python","title":"<code>itertools</code> (Advanced Iterators) in Python","text":"<p>The <code>itertools</code> module in Python provides a set of fast, memory-efficient tools for working with iterators. These tools allow you to create complex iterators for handling combinatorics, permutations, combinations, and more. It's part of Python's standard library.</p>"},{"location":"interview-questions/interview-theory/#key-features","title":"Key Features","text":"<ol> <li>Efficient iteration over large data sets without loading everything into memory.</li> <li>Provides advanced functions for:    - Infinite iterators    - Iterators for combinations and permutations    - Utility functions for iterator manipulation</li> </ol>"},{"location":"interview-questions/interview-theory/#categories-of-functions","title":"Categories of Functions","text":""},{"location":"interview-questions/interview-theory/#1-infinite-iterators","title":"1. Infinite Iterators","text":"<p>These iterators produce values indefinitely and are useful for repetitive tasks.</p> <ul> <li><code>itertools.count(start=0, step=1)</code>: Generates an infinite sequence starting at <code>start</code> and incremented by <code>step</code>.</li> </ul> <pre><code>from itertools import count\nfor num in count(5, 2):  # Starts at 5, increments by 2\n    if num &gt; 15:\n        break\n    print(num)  # Output: 5, 7, 9, 11, 13, 15\n</code></pre> <ul> <li><code>itertools.cycle(iterable)</code>: Cycles through an iterable indefinitely.</li> </ul> <pre><code>from itertools import cycle\ncounter = 0\nfor item in cycle(['A', 'B', 'C']):\n    if counter &gt; 5:\n        break\n    print(item)  # Output: A, B, C, A, B, C\n    counter += 1\n</code></pre> <ul> <li><code>itertools.repeat(object, times=None)</code>: Repeats an object a fixed number of times (or indefinitely if <code>times</code> is not specified).</li> </ul> <pre><code>from itertools import repeat\nfor item in repeat(\"Hello\", 3):\n    print(item)  # Output: Hello, Hello, Hello\n</code></pre>"},{"location":"interview-questions/interview-theory/#2-combinatoric-iterators","title":"2. Combinatoric Iterators","text":"<p>Generate permutations, combinations, or Cartesian products.</p> <ul> <li><code>itertools.permutations(iterable, r=None)</code>: Generates all possible permutations of <code>r</code> elements from the iterable.</li> </ul> <pre><code>from itertools import permutations\nfor perm in permutations([1, 2, 3], 2):\n    print(perm)  # Output: (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)\n</code></pre> <ul> <li><code>itertools.combinations(iterable, r)</code>: Generates all possible combinations of <code>r</code> elements from the iterable.</li> </ul> <pre><code>from itertools import combinations\nfor comb in combinations([1, 2, 3], 2):\n    print(comb)  # Output: (1, 2), (1, 3), (2, 3)\n</code></pre> <ul> <li><code>itertools.product(*iterables, repeat=1)</code>: Generates the Cartesian product of input iterables.</li> </ul> <pre><code>from itertools import product\nfor prod in product([1, 2], ['A', 'B']):\n    print(prod)  # Output: (1, 'A'), (1, 'B'), (2, 'A'), (2, 'B')\n</code></pre>"},{"location":"interview-questions/interview-theory/#3-utility-iterators","title":"3. Utility Iterators","text":"<p>Helpers for combining, grouping, or slicing iterators.</p> <ul> <li><code>itertools.chain(*iterables)</code>: Combines multiple iterables into a single iterator.</li> </ul> <pre><code>from itertools import chain\nfor item in chain([1, 2], ['A', 'B']):\n    print(item)  # Output: 1, 2, A, B\n</code></pre> <ul> <li><code>itertools.islice(iterable, start, stop, step)</code>: Slices an iterable.</li> </ul> <pre><code>from itertools import islice\nfor item in islice(range(10), 2, 8, 2):\n    print(item)  # Output: 2, 4, 6\n</code></pre> <ul> <li><code>itertools.groupby(iterable, key=None)</code>: Groups items in an iterable by a key function.</li> </ul> <pre><code>from itertools import groupby\ndata = [(\"cat\", 1), (\"cat\", 2), (\"dog\", 3), (\"dog\", 4)]\nfor key, group in groupby(data, lambda x: x[0]):\n    print(key, list(group))  \n    # Output: \n    # cat [('cat', 1), ('cat', 2)]\n    # dog [('dog', 3), ('dog', 4)]\n</code></pre>"},{"location":"interview-questions/interview-theory/#advantages","title":"Advantages","text":"<ol> <li>Memory Efficiency: Operates lazily, producing values on demand instead of storing them in memory.</li> <li>Combinatoric Power: Simplifies tasks like generating permutations, combinations, or Cartesian products.</li> <li>Enhanced Productivity: Provides many ready-to-use tools that reduce the need for custom implementations.</li> </ol>"},{"location":"interview-questions/interview-theory/#real-world-example","title":"Real-World Example","text":"<p>Summing two lists element-wise using <code>itertools.zip_longest</code>:</p> <pre><code>from itertools import zip_longest\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5]\nresult = [a + b for a, b in zip_longest(list1, list2, fillvalue=0)]\nprint(result)  # Output: [5, 7, 3]\n</code></pre>"},{"location":"interview-questions/interview-theory/#summary_1","title":"Summary","text":"<p>The <code>itertools</code> module is a powerful toolkit for working with iterators. It helps perform complex operations like infinite looping, combinations, or slicing in a memory-efficient way. This makes it especially useful in data processing, mathematical computations, and generating sequences.</p>"},{"location":"interview-questions/interview-theory/#you-are-given-a-singly-linked-list-that-stores-integer-values-in-ascending-order-your-task-is-to-determine-the-time-complexity-for-performing-an-insertion-operation-on-the-numeric-value-6-in-the-given-linkedlist","title":"You are given a singly linked list that stores integer values in ascending order. Your task is to determine the time complexity for performing an insertion operation on the numeric value 6 in the given LinkedList","text":"<pre><code>class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_sorted(self, value):\n        new_node = Node(value)\n        # If the list is empty or the value should be inserted at the head\n        if not self.head or self.head.data &gt;= value:\n            new_node.next = self.head\n            self.head = new_node\n            return\n\n        # Traverse the list to find the insertion point\n        current = self.head\n        while current.next and current.next.data &lt; value:\n            current = current.next\n\n        # Insert the new node\n        new_node.next = current.next\n        current.next = new_node\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -&gt; \")\n            current = current.next\n        print(\"None\")\n\n# Example usage\nlinked_list = SinglyLinkedList()\nfor val in [2, 5, 8, 12]:\n    linked_list.insert_sorted(val)\n\nprint(\"Before insertion:\")\nlinked_list.display()\n\nlinked_list.insert_sorted(6)\n\nprint(\"After insertion:\")\nlinked_list.display()\n</code></pre>"},{"location":"interview-questions/interview-theory/#what-is-the-difference-between-is-and-operators-in-python","title":"What is the difference between is and == operators in Python?","text":"<ul> <li>Feature == Operator is Operator</li> <li>Comparison Type Compare the values of the objects Compares the identity (whether the objects are the same in memory)</li> <li>What it checks Checks if the two objects are equal Checks if the two objects are the same object in memory</li> <li>Use Case Used to compare the values of variables or objects Used to check if two variables refer to the same object in memory</li> </ul> <pre><code>a = [1, 2]\nb = [1, 2]\n\nprint(a == b)     # True: As both the lists have the same values\nprint(a is b)      # False: As a and b are different objects in memory\n</code></pre> <ol> <li>What are Python closures, and how are they useful?</li> </ol> <p>The closure in Python is created when a function within another function (nested function) captures a variable from the outer function. These captured variables are stored even after the outer function\u2019s execution is finished, which allows the inner functions to use these variables later.   The closure helps in maintaining the state of the program without the need to use global variables and classes. They are very helpful in the decorators, callbacks, and factory functions, where storing and reusing the data is very important.</p>"},{"location":"interview-questions/interview-theory/#what-is-duck-typing-in-python","title":"What is duck typing in Python?","text":"<p>Duck typing in Python refers to focusing on what the object can do without the need for the type of the object. The term \u2018duck\u2019 comes from the saying: \u201cIf it looks like a duck and quacks like a duck, it\u2019s probably a duck.\u201d Python follows this by only considering the behaviour and the methods of the object without checking the actual type of the object. For example: When an object is looped over, it is treated as an iterable, even if the object is not in list in Python. This makes Python more flexible and efficient, but the code must be checked properly to avoid runtime errors.</p> <ol> <li>How do you handle large files efficiently in Python? It is better to avoid loading the entire file into memory when working on large files, which may be time-consuming. Instead, loops can be used for better file handling, which reads the file line by line using the for line in file, which uses very little memory, and is efficient for text files. When working with binary files like PDF, images mmap module can be used, which helps in accessing the file content directly from the disk. Also, the chunk-based reading and the file buffering can be used for better file handling.</li> </ol>"},{"location":"interview-questions/interview-theory/#what-is-monkey-patching-in-python","title":"What is monkey patching in Python?","text":"<p>Monkey patching in Python helps in changing or adding code to the program that is already running. The method in a class or a module can be replaced or updated easily without the need to change the source code. This is mainly used for testing and fixing small issues in the libraries. Monkey patching should be used carefully when dealing with large projects, as the changes can be harder to trace and debug.</p> <ol> <li>How does Python handle type hinting? Type handling is very useful in Python, which helps in adding additional information to the functions and variables, and specifying the kind of data expected. It does not affect the execution of the Python code, but helps others to understand the functions or the variables. It also allows tools like linkers and IDEs that help in catching errors in the code, and improve the process of debugging. Static type checkers like \u2018mypy\u2019 are used in large projects, which helps in improving the readability of the code and reducing errors. The type hints follow the Python PEP 484 format.</li> </ol>"},{"location":"interview-questions/interview-theory/#mro-method-resolution-order-in-oop-python","title":"\ud83e\uddf5 MRO (Method Resolution Order) in OOP / Python","text":""},{"location":"interview-questions/interview-theory/#what-is-the-gil-global-interpreter-lock-in-python","title":"What is the GIL (Global Interpreter Lock) in Python?","text":"<p>The Global Interpreter Lock (GIL) is a mechanism in the standard Interpreter of Python that allows only one thread to execute a bytecode at a time. This helps in making the process of memory management simpler by preventing the race conditions, and also helps in proper multithreading, for the tasks that are bound to the CPU.   GIL is also very helpful for the IO-bound tasks like reading files or making network requests, where the threads are used, as the GIL is reassessed during the waiting. GIL is one of the main reasons for Python being among the best choices for CPU-bound multithreaded operations.</p> <ol> <li> <p>Why isn\u2019t all memory deallocated when Python exits? In Python, some objects that are referred to the other objects in a cyclic manner or are linked to global variables may not get deleted automatically when the program ends. Some portions of memory remain out of reach since they were reserved by the C library. The cleaning process of Python automatically attempts to release all the objects before program termination.</p> </li> <li> <p>How do you securely store API keys and secrets in a Python application? Storing API keys and secrets securely in a Python is really important if you want to protect sensitive information and prevent hackers from getting access. Below are the best steps to follow for securely handling secrets:</p> </li> <li> <p>Use Environment Variables</p> </li> </ol> <p>Rather than directly embedding secrets in your Python files, save them as environment variables and then retrieve them with the os module.</p> <p>import os</p> <p>api_key = os.getenv(\"API_KEY\") How to set environment variables:</p> <p>On Linux/macOS:</p> <p>export API_KEY='your_api_key_here' On Windows:</p> <p>set API_KEY=your_api_key_here 2. Use a .env File with python-dotenv (for local development)</p> <p>Create a .env file to keep your secrets, then load it securely using python-dotenv.</p>"},{"location":"interview-questions/interview-theory/#env","title":".env","text":"<p>API_KEY=your_api_key_here Install the library:</p> <p>pip install python-dotenv Then use it in your code:</p> <p>from dotenv import load_dotenv import os</p> <p>load_dotenv() api_key = os.getenv(\"API_KEY\") 3. Use Secret Management Services (for Production)</p> <p>For production environments, use secret managers like:</p> <p>AWS Secrets Manager Azure Key Vault Google Secret Manager HashiCorp Vault These services:</p> <p>Store secrets in encrypted form. Control access via IAM policies. Rotate secrets automatically.</p> <ol> <li>What is a Walrus Operator? The Walrus Operator (:=) is a new feature introduced in Python 3.8. It allows you to assign a value to a variable and return the value within a single expression. This is known as an assignment expression, and is very helpful in making the Python code simpler, more readable, especially when the unwanted variables need to be avoided. The walrus operators are very helpful in loops and conditional statements in Python. Example:</li> </ol> <pre><code>numbers = [1, 2, 3, 4, 5]\n\n# Using the walrus operator\nwhile (n := len(numbers)) &gt; 0:\n     print(numbers.pop())\n</code></pre>"},{"location":"interview-questions/interview-theory/#does-python-support-switch-case","title":"Does Python support Switch Case?","text":"<p>No, Python does not have a built-in switch statement like some other languages (such as C or Java). Instead, Python developers typically use Match and Case, if-elif-else chains, or dictionary mappings to achieve similar functionality, as these approaches help in writing cleaner and more readable code, compared to the traditional switch case method.</p>"},{"location":"interview-questions/interview-theory/#does-python-support-multiple-inheritance","title":"Does Python support multiple inheritance?","text":"<p>Yes, Python supports multiple inheritance, which means a class can inherit from more than one parent class. In multiple inheritance, a class can have multiple base classes, and it inherits attributes and methods from all of them. This helps in increasing the reusability and the flexibility of the code. It is also confusing in cases like method resolution order (MRO), where multiple inheritance can result in an issue while searching a path.</p> <p>Example:</p> <pre><code>class Base1:\n    # Body of 1st base class\n    def __init__(self):\n        print(\"Base1 initialized\")\n\nclass Base2:\n    # Body of 2nd base class\n    def __init__(self):\n        print(\"Base2 initialized\")\n\nclass Derived(Base1, Base2):\n    # Body of derived class\n    def __init__(self):\n        Base1.__init__(self)  # Calling constructor of Base1\n        Base2.__init__(self)  # Calling constructor of Base2\n        print(\"Derived class initialized\")\n\n# Example usage\nd = Derived()\n</code></pre>"},{"location":"interview-questions/interview-theory/#how-is-memory-managed-in-python_1","title":"How is memory managed in Python?","text":"<p>Memory management is handled by the Python memory manager in Python. The process of automatic memory management is done in Python by the Garbage Collector and Heap Space.</p> <ul> <li>Garbage collection is a built-in feature in Python that identifies and clears circular references automatically. Circular References are when two objects refer to each other, but aren\u2019t needed by the program.</li> <li>A private heap memory contains all the Python objects and data structures. Every object in Python has a reference count, which tracks how many variables or objects refer to that object. When the reference count drops to zero, Python frees up the memory for that object.</li> <li>Python uses a system of memory pools to optimize the allocation and deallocation of small objects. It improves performance, which helps in improving efficiency.</li> </ul>"},{"location":"interview-questions/interview-theory/#what-is-multi-threading-in-python","title":"What is multi-threading in Python?","text":"<p>Multithreading is a technique where the processors execute multiple threads concurrently within a single process. A thread is the smallest unit of a CPU\u2019s execution that can run independently. By using multiple threads, a program can perform several tasks at the same time. This improves performance, especially for I/O-bound operations such as reading files, handling user inputs, and other similar tasks.</p> <p>Example:</p> <pre><code>import threading\nimport time\n\ndef show():\n    for i in range(3):\n        print(f\"Running in thread: {threading.current_thread().name}\")\n        time.sleep(1)\n\n# Create and start thread\n\nt = threading.Thread(target=show)\nt.start()\n\n# Main thread continues\n\nfor i in range(3):\n    print(\"Main thread working\")\n    time.sleep(1)\n\nt.join()\nprint(\"Both threads finished.\")\n</code></pre>"},{"location":"interview-questions/interview-theory/#explain-the-use-of-yield-in-python-with-an-example","title":"Explain the use of yield in Python with an example","text":"<p>The yield keyword is used to create a generator function, which is used to return an iterator that helps in yielding one value at a time, instead of running the whole list at once. Using the yield keywords helps in making the memory more efficient, mainly when working on large datasets.</p> <p>Example:</p> <p>Python</p> <pre><code>def countdown(n):\n    while n &gt; 0:\n        yield n     # Yield the current value of n\n        n -= 1     # Decrement n\n\n# Using the generator\nfor number in countdown(5):\n    print(number)\n</code></pre>"},{"location":"interview-questions/interview-theory/#what-is-the-purpose-of-using-super-in-python-classes","title":"What is the purpose of using super() in Python classes?","text":"<p>The super() function in Python is used to call methods from a parent class within a subclass. It is commonly used in object-oriented programming for ensuring that the parent class has been properly initialized, which helps in inheritance. The super() function helps in making the code simpler by avoiding the need to call the parent class again, when there is multiple inheritance.   Example:</p> <pre><code># Base class\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def get_details(self):\n        return f\"Name: {self.name}, Age: {self.age}\"\n\n# Derived class\nclass Employee(Person):\n    def __init__(self, name, age, id):\n        # Call the constructor of the parent class using super()\n        super().__init__(name, age)\n        self.id = id\n\n    def get_details(self):\n        # Override the method to include employee ID\n        return f\"Name: {self.name}, Age: {self.age}, ID: {self.id}\"\n\n# Create an Employee object\nemp = Employee(\"Lithin\", 23, 1234)\n\n# Print the details of the employee\nprint(emp.get_details())\n</code></pre>"},{"location":"interview-questions/interview-theory/#how-do-you-identify-missing-values-and-deal-with-missing-values-in-a-dataframe","title":"How do you identify missing values and deal with missing values in a Dataframe?","text":"<p>For identifying the missing values in the Pandas DataFrame, the isnull() and isna() functions can be used.</p> <p>missing_count=data_frame1.isnull().sum()   There are two ways of handling the missing values :</p> <ol> <li>Replace the  missing values with 0</li> </ol> <p>df['col_name'].fillna(0) 2. Replace the missing values with the mean value of that column</p> <p> df['col_name'] = df['col_name'].fillna((df['col_name'].mean()))</p>"},{"location":"interview-questions/interview-theory/#how-do-you-load-and-preprocess-data-for-machine-learning-in-python","title":"How do you load and preprocess data for machine learning in Python?","text":"<p>In Python loading and preprocessing data is very important step in any machine learning pipeline. Basically, structured and clean data enhance the accuracy and performance of model.</p> <p>Here\u2019s how to do it effectively in Python:</p> <pre><code>1. Load Data Using Pandas or Numpy\n\nimport pandas as pd\n\n# Load from CSV\n\ndf = pd.read_csv(\"data.csv\")\n2. Explore the Data\n\nUse methods like .head(), .info(), .describe() to inspect structure and find out the missing or inconsistent values:\n\nprint(df.head())\nprint(df.info())\nprint(df.describe())\n3. Handle Missing Values\n\n# Fill missing values\n\ndf.fillna(method='ffill', inplace=True)\n\n# Or drop missing rows\n\ndf.dropna(inplace=True)\n4. Encode Categorical Variables\n\nConvert non-numeric features into numeric format:\n\n# Label encoding\n\ndf['Gender'] = df['Gender'].map({'Male': 0, 'Female': 1})\n\n# One-hot encoding\n\ndf = pd.get_dummies(df, columns=['Country'])\n5. Scale and Normalize Features\n\nUse sklearn.preprocessing for standardization:\n\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndf[['age', 'income']] = scaler.fit_transform(df[['age', 'income']])\n6. Split the Data\n\nfrom sklearn.model_selection import train_test_split\n\nX = df.drop(\"target\", axis=1)\ny = df[\"target\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n</code></pre>"},{"location":"interview-questions/interview-theory/#48-how-can-you-randomize-the-items-of-a-list-in-python","title":"48. How can you randomize the items of a list in Python?","text":"<p>To randomise the items in a list in Python, we use the <code>shuffle()</code> from the random module. Here is an example:</p> <pre><code>import random\n\nlist1 = [\"Intellipaat\", \"is\", \"the\", \"best\", \"edtech\", \"to\", \"learn\", \"python\"]\n\n# Shuffle the list items randomly\nrandom.shuffle(list1)     # Shuffle the list items in random place\n\n# Print the shuffled list\nprint(list1)\n</code></pre>"},{"location":"interview-questions/interview-theory/#what-do-you-understand-about-iterators-in-python","title":". What do you understand about iterators in Python?","text":"<p>The Iterators in Python are objects that allow us to traverse through a collection (such as lists, tuples, dictionaries, or sets). They use the iter() and next() methods to retrieve the next element, until there are no methods left. Iterators are commonly used in for loops, and can be created for custom objects. They promote efficient memory usage and enable the lazy evaluation of elements in Python.</p>"},{"location":"interview-questions/interview-theory/#1-what-is-reference-counter","title":"1. What is Reference Counter?","text":"<p>\u201cReference counter in Python is a mechanism used to keep track of how many references point to an object. Each object has a reference count. When the count drops to zero, the memory occupied by the object is automatically freed. This is part of Python\u2019s memory management and helps in automatic garbage collection.\u201d</p> <ul> <li>Python uses reference counting as a part of its memory management system.</li> <li>Every Python object keeps track of how many references point to it.</li> <li>This count is called the reference count.</li> </ul> <ol> <li>How it Works</li> </ol> <p>When you create a new reference to an object, the reference count increases.</p> <p>When a reference is deleted or goes out of scope, the reference count decreases.</p> <p>When the reference count becomes zero, Python automatically deletes the object from memory.</p> <pre><code>import sys\n\na = [1, 2, 3]        # Create list object\nprint(sys.getrefcount(a))  # Output: 2 (1 from 'a', 1 from getrefcount argument)\n\nb = a                 # New reference\nprint(sys.getrefcount(a))  # Output: 3\n\ndel b                 # Remove reference\nprint(sys.getrefcount(a))  # Output: 2\n</code></pre> <p>Explanation:</p> <p>sys.getrefcount() shows the number of references pointing to the object.</p> <p>When the reference count reaches 0, Python garbage collector frees the memory. 4. Why Reference Counting is Important</p> <p>Prevents memory leaks by freeing unused objects.</p> <p>Helps manage memory efficiently without manual intervention.</p> <p>Works with Python\u2019s garbage collector to clean cyclic references (cycles where objects reference each other).</p>"},{"location":"interview-questions/interview-theory/#1-what-is-a-pyc-file","title":"1. What is a .pyc file?","text":"<ul> <li>.pyc stands for Python Compiled file.</li> <li>It is a bytecode-compiled version of a Python .py source file.</li> <li>Python compiles .py files to bytecode before execution and stores it as .pyc for faster subsequent runs</li> </ul> <p>\u201cA .pyc file in Python is a compiled bytecode version of a .py source file. It is automatically generated by Python during module import to speed up execution by avoiding recompilation of unchanged source files. These files are stored in the pycache directory.\u201d</p> <ol> <li>How .pyc files are generated</li> </ol> <p>When you import a Python module, Python automatically compiles it to bytecode and stores it in the pycache folder.</p> <p>Example: my_module.py</p> <p>after importing pycache/my_module.cpython-310.pyc</p> <p>cpython-310 indicates Python version 3.10 used to compile. 3. Why .pyc files exist Faster loading: Python can skip recompiling .py files on subsequent imports.</p> <p>Portability: Bytecode is platform-independent within the same Python version.</p> <p>Caching: Saves compilation time for large projects.</p> <ol> <li>Key Points</li> </ol> <p>.pyc files are not human-readable.</p> <p>They are optional; Python can run .py files directly.</p> <p>Stored in pycache by default in Python 3.x.</p> <p>Python automatically updates .pyc files if the .py source changes.</p> <pre><code># my_module.py\ndef hello():\n    print(\"Hello World!\")\n\n# In Python shell\nimport my_module\nmy_module.hello()\n</code></pre>"},{"location":"interview-questions/interview-theory/#what-is-annotate-in-django","title":"What is annotate in Django?","text":"<p>annotate() is a QuerySet method in Django ORM used to add summary or computed fields to each object in a queryset.</p> <p>Typically used with aggregate functions like Count, Sum, Avg, Max, Min.</p> <p>Adds the result as a new field for each object in the queryset.</p> <ol> <li>Basic Syntax</li> </ol> <pre><code>from django.db.models import Count, Sum, Avg\nqueryset.annotate(new_field=AggregateFunction('field_name'))\n</code></pre> <p>new_field \u2192 name of the computed field</p> <p>AggregateFunction \u2192 Count, Sum, Avg, etc.</p> <p>'field_name' \u2192 field to aggregate</p> <p>Models:</p> <pre><code>class Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    pages = models.IntegerField()\n</code></pre> <p>Use annotate() to count books per author:</p> <pre><code>from django.db.models import Count\n\nauthors = Author.objects.annotate(num_books=Count('book'))\nfor author in authors:\n    print(author.name, author.num_books)\n</code></pre> <p>Each Author object now has an extra field num_books.</p> <p>Use annotate() to get total pages per author:</p> <pre><code>from django.db.models import Sum\n\nauthors = Author.objects.annotate(total_pages=Sum('book__pages'))\nfor author in authors:\n    print(author.name, author.total_pages)\n</code></pre> <p>annotate() adds computed fields to each object.</p> <p>Often combined with aggregate() or filter() for more complex queries.</p> <p>Works with related fields using Django\u2019s double underscore (__).</p> <ol> <li>Interview-Friendly Answer</li> </ol> <p>\u201cIn Django, annotate() is a QuerySet method that allows you to add a calculated field to each object in the queryset. It\u2019s commonly used with aggregate functions like Count, Sum, or Avg, and is very useful for reporting or summarizing related data.</p>"},{"location":"interview-questions/interview-theory/#asynchronous-programming","title":"asynchronous programming","text":"<p>Async in Python</p> <ol> <li>Definition</li> </ol> <p>async is used to define asynchronous functions (also called coroutines) in Python.</p> <p>These functions do not block the main thread while waiting for I/O operations.</p> <p>Typically used with await to pause execution until the awaited task completes.</p> Keyword Description <code>async def</code> Defines an asynchronous function (coroutine) <code>await</code> Waits for an asynchronous operation to complete <code>asyncio</code> Python\u2019s library for managing async tasks and event loops <pre><code>import asyncio\n\nasync def fetch_data():\n    print(\"Start fetching...\")\n    await asyncio.sleep(2)  # Simulates I/O operation\n    print(\"Done fetching!\")\n    return {\"data\": 123}\n\nasync def main():\n    print(\"Main started\")\n    result = await fetch_data()  # Wait for fetch_data to complete\n    print(result)\n\n# Run the event loop\nasyncio.run(main())\n</code></pre> <p>Main started Start fetching... Done fetching!</p> <p>asyncio.run(main()) starts the event loop.</p> <p>await asyncio.sleep(2) simulates a non-blocking delay.</p> <p>Why Use Async in Python?</p> <p>Non-blocking I/O: Handles many tasks simultaneously without waiting.</p> <p>Better performance for I/O-bound tasks (APIs, web scraping, DB queries).</p> <p>Can replace traditional multithreading for certain scenarios with less overhead.</p> <ol> <li>Important Notes</li> </ol> <p>CPU-bound tasks do not benefit from async; use multiprocessing for those.</p> <p>Async functions return coroutines, not actual results. You need await to get the result.</p> <p>Async is widely used in FastAPI, aiohttp, and other asynchronous Python frameworks.</p> <p>Async in Python allows functions to run asynchronously without blocking the main thread. Using async def and await, Python can handle multiple I/O-bound operations concurrently, which improves performance for tasks like network requests, database calls, or file operations.\u201d</p>"},{"location":"interview-questions/interview-theory/#3-difference-between-list-and-dict-comprehension","title":"3. Difference Between List and Dict Comprehension","text":"<p>List Comprehension</p> <p>Syntax:</p> <pre><code>    [expression for item in iterable if conditional]\n</code></pre> <p>Example: Common Way:</p> <pre><code>l = []\nfor i in range(10):\n    if i%2:\n        l.append(i)\nprint(l)\n\nUsing List Comprehension:\nls = [i for i in range(10) if i%2]\nprint(ls)\n\nOutput:\n[1, 3, 5, 7, 9]\n</code></pre> <p>Dict Comprehension</p> <p>Syntax :</p> <pre><code>     {key:value for (key,value) in iterable if conditional}\n</code></pre> <p>Example: Common Way:</p> <pre><code>d = {}\nfor i in range(1,10):\nsqr = i*i\nd[i] = i*i\nprint(d)\n\nUsing Dict Comprehension:\nd1={n:n*n for n in range(1,10)}\nprint (d1)\n\nOutput:\n{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}\n</code></pre>"},{"location":"interview-questions/interview-theory/#4-how-memory-managed-in-python","title":"4. How Memory Managed In Python?","text":"<p>Memory management in Python involves a private heap containing all Python objects and data structures. Interpreter takes care of Python heap and that the programmer has no access to it. The allocation of heap space for Python objects is done by Python memory manager. The core API of Python provides some tools for the programmer to code reliable and more robust program. Python also has a build-in garbage collector which recycles all the unused memory. When an object is no longer referenced by the program, the heap space it occupies can be freed. The garbage collector determines objects which are no longer referenced by the program frees the occupied memory and make it available to the heap space. The gc module defines functions to enable /disable garbage collector:</p> <p>gc.enable() -Enables automatic garbage collection. gc.disable() - Disables automatic garbage collection.</p>"},{"location":"interview-questions/interview-theory/#5-difference-between-generators-and-iterators","title":"5. Difference Between Generators And Iterators","text":"<p>GENERATOR</p> <p>Generators are iterators which can execute only once. Generator uses \u201cyield\u201d keyword. Generators are mostly used in loops to generate an iterator by returning all the values in the loop without affecting the iteration of the loop. Every generator is an iterator.</p> <p>EXAMPLE:</p> <pre><code>def sqr(n):\n    for i in range(1, n+1):\n        yield i*i \na = sqr(3)  \nprint(next(a))\nprint(next(a))\nprint(next(a))\n</code></pre> <pre><code>Output:\n1\n4\n9\n</code></pre> <p>ITERATOR</p> <p>An iterator is an object which contains a countable number of values and it is used to iterate over iterable objects like list, tuples, sets, etc. Iterators are used mostly to iterate or convert other objects to an iterator using iter() function. Iterator uses iter() and next() functions. Every iterator is not a generator.</p> <p>Example:</p> <pre><code>iter_list = iter(['A', 'B', 'C'])\nprint(next(iter_list))\nprint(next(iter_list))\nprint(next(iter_list))\n</code></pre> <p>Output: A B C</p> <ol> <li>What is \u2018init\u2019 Keyword In Python? init.py file The init.py file lets the Python interpreter know that a directory contains code for a Python module. It can be blank. Without one, you cannot import modules from another folder into your project. The role of the init.py file is similar to the init function in a Python class. The file essentially the constructor of your package or directory without it being called such. It sets up how packages or functions will be imported into your other files.</li> </ol> <p>init() function The init method is similar to constructors in C++ and Java. Constructors are used to initialize the object\u2019s state.</p> <pre><code># A Sample class with init method  \nclass Person: \n    # init method or constructor   \n    def __init__(self, name):  \n        self.name = name  \n\n    # Sample Method   \n    def say_hi(self):  \n        print('Hello, my name is', self.name)  \n\np = Person('Nitin')  \np.say_hi()   \n</code></pre> <p>Output: Hello, my name is Nitin</p>"},{"location":"interview-questions/interview-theory/#7-difference-between-modules-and-packages-in-python","title":"7. Difference Between Modules and Packages in Python","text":"<p>Module</p> <p>The module is a simple Python file that contains collections of functions and global variables and with having a .py extension file. It is an executable file and to organize all the modules we have the concept called Package in Python.</p> <p>A module is a single file (or files) that are imported under one import and used. E.g. import my_module</p> <p>Package</p> <p>The package is a simple directory having collections of modules. This directory contains Python modules and also having init.py file by which the interpreter interprets it as a Package. The package is simply a namespace. The package also contains sub-packages inside it.</p> <p>A package is a collection of modules in directories that give a package hierarchy. from my_package.abc import a</p>"},{"location":"interview-questions/interview-theory/#9-what-are-generators-explain-it-with-example","title":"9. What are Generators. Explain it with Example","text":"<p>Generators are iterators which can execute only once.</p> <p>Every generator is an iterator.</p> <p>Generator uses \u201cyield\u201d keyword.</p> <p>Generators are mostly used in loops to generate an iterator by returning all the values in the loop without affecting the iteration of the loop</p> <pre><code>Example:\ndef sqr(n):\n    for i in range(1, n+1):\n        yield i*i \na = sqr(3)  \n\nprint(\"The square are : \")\nprint(next(a))\nprint(next(a))\nprint(next(a))\n</code></pre> <p>Output: The square are : 1 4 9</p>"},{"location":"interview-questions/interview-theory/#10-what-are-in-built-data-types-in-python","title":"10. What are in-built Data Types in Python","text":"<p>OR</p>"},{"location":"interview-questions/interview-theory/#explain-mutable-and-immutable-data-types","title":"Explain Mutable and Immutable Data Types","text":"<p>A first fundamental distinction that Python makes on data is about whether or not the value of an object changes.</p> <p>DataType Mutable Or Immutable? Boolean (bool) Immutable Integer (int) Immutable Float Immutable String (str) Immutable tuple Immutable frozenset Immutable list Mutable set Mutable dict Mutable</p>"},{"location":"interview-questions/interview-theory/#11-explain-ternary-operator-in-python","title":"11. Explain Ternary Operator in Python?","text":"<p>The syntax for the Python ternary statement is as follows:</p> <p>[if_true] if [expression] else [if_false]</p> <p>Ternary Operator Example:</p> <p>age = 25 discount = 5 if age &lt; 65 else 10 print(discount)</p>"},{"location":"interview-questions/interview-theory/#12-what-is-inheritance-in-python","title":"12. What is Inheritance In Python","text":"<p>In inheritance, the child class acquires the properties and can access all the data members and functions defined in the parent class. A child class can also provide its specific implementation to the functions of the parent class.</p> <p>In python, a derived class can inherit base class by just mentioning the base in the bracket after the derived class name.</p> <p>Class A(B):  </p> <pre><code>class A:  \n    def display(self):  \n        print(\"A Display\")  \n\nclass B(A):  \n    def show(self):  \n        print(\"B Show\")  \nd = B()  \nd.show()  \nd.display()  \n\n\nOutput:\nB Show\nA Display\n</code></pre>"},{"location":"interview-questions/interview-theory/#13-difference-between-local-and-global-variable-in-python","title":"13. Difference Between Local and Global Variable in Python","text":"<p>Local Variable Global Variable It is declared inside a function. It is declared outside the function. If it is not initialized, a garbage value is stored If it is not initialized zero is stored as default. It is created when the function starts execution and lost</p> <p>when the functions terminate. It is created before the program\u2019s global execution starts and</p> <p>lost when the program terminates. Data sharing is not possible as data of the local variable can</p> <p>be accessed by only one function. Data sharing is possible as multiple functions can access the</p> <p>same global variable. Parameters passing is required for local variables to access</p> <p>the value in other function Parameters passing is not necessary for a global variable as it</p> <p>is visible throughout the program When the value of the local variable is modified in one</p> <p>function, the changes are not visible in another function. When the value of the global variable is modified in one</p> <p>function changes are visible in the rest of the program. Local variables can be accessed with the help of statements,</p> <p>inside a function in which they are declared. You can access global variables by any statement in the</p> <p>program. It is stored on the stack unless specified. It is stored on a fixed location decided by the compiler.</p>"},{"location":"interview-questions/interview-theory/#14-explain-break-continue-and-pass-statement","title":"14. Explain Break, Continue and Pass Statement","text":"<p>A break statement, when used inside the loop, will terminate the loop and exit. If used inside nested loops, it will break out from the current loop. A continue statement will stop the current execution when used inside a loop, and the control will go back to the start of the loop. A pass statement is a null statement. When the Python interpreter comes across the pass statement, it does nothing and is ignored.</p> <pre><code>Break Statement Example\n\nfor i in range(10):    \n    if i == 7:\n        break  \n    print( i, end = \",\")\n\nOutput:\n0,1,2,3,4,5,6,\n</code></pre> <pre><code>Continue Statement Example\n\nfor i in range(10):    \n    if i == 7:\n        continue  \n    print( i, end = \",\")\n\nOutput:\n0,1,2,3,4,5,6,8,9,\n</code></pre> <pre><code>Pass Statement Example\n\ndef my_func():\n    print('pass inside function')\n    pass\nmy_func()\n\nOutput:\npass inside function\n</code></pre>"},{"location":"interview-questions/interview-theory/#15-what-is-self-keyword-in-python","title":"15. What is 'self' Keyword in python?","text":"<p>The \u2018self\u2019 parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.</p> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def info(self):\n        print(f\"My name is {self.name}. I am {self.age} years old.\")\n\nc = Person(\"Nitin\",23)\nc.info()\n</code></pre> <p>Output: My name is Nitin. I am 23 years old.</p>"},{"location":"interview-questions/interview-theory/#16-difference-between-pickling-and-unpickling","title":"16. Difference Between Pickling and Unpickling?","text":"<p>Pickling: In python, the pickle module accepts any Python object, transforms it into a string representation, and dumps it into a file by using the dump function. This process is known as pickling. The function used for this process is pickle.dump() Unpickling: The process of retrieving the original python object from the stored string representation is called unpickling. The function used for this process is pickle.load()</p> <p>They are inverses of each other. Pickling, also called serialization, involves converting a Python object into a series of bytes which can be written out to a file. Unpicking, or de-serialization, does the opposite\u2013it converts a series of bytes into the Python object it represents.</p> <ol> <li>Explain Function of List, Set, Tuple And Dictionary? Functions Of List sort(): Sorts the list in ascending order. append(): Adds a single element to a list. extend(): Adds multiple elements to a list. index(): Returns the first appearance of the specified value. max(list): It returns an item from the list with max value. min(list): It returns an item from the list with min value. len(list): It gives the total length of the list. list(seq): Converts a tuple into a list. cmp(list1, list2): It compares elements of both lists list1 and list2. type(list): It returns the class type of an object.</li> </ol> <p>Functions Of Tuple cmp(tuple1, tuple2) - Compares elements of both tuples. len(): total length of the tuple. max(): Returns item from the tuple with max value. min(): Returns item from the tuple with min value. tuple(seq): Converts a list into tuple. sum(): returns the arithmetic sum of all the items in the tuple. any(): If even one item in the tuple has a Boolean value of True, it returns True. Otherwise, it returns False. all(): returns True only if all items have a Boolean value of True. Otherwise, it returns False. sorted(): a sorted version of the tuple. index(): It takes one argument and returns the index of the first appearance of an item in a tuple count(): It takes one argument and returns the number of times an item appears in the tuple.</p> <p>Functions Of Dictionary clear(): Removes all the elements from the dictionary copy(): Returns a copy of the dictionary fromkeys(): Returns a dictionary with the specified keys and value get(): Returns the value of the specified key items(): Returns a list containing a tuple for each key value pair keys(): Returns a list containing the dictionary's keys pop(): Removes the element with the specified key popitem(): Removes the last inserted key-value pair setdefault(): Returns the value of the specified key. If the key does not exist: insert the key, with the specified value update(): Updates the dictionary with the specified key-value pairs values(): Returns a list of all the values in the dictionary cmp(): compare two dictionaries</p> <p>Functions Of Set add(): Adds an element to the set clear(): Removes all the elements from the set copy(): Returns a copy of the set difference(): Returns a set containing the difference between two or more sets difference_update(): Removes the items in this set that are also included in another, specified set discard(): Remove the specified item intersection(): Returns a set, that is the intersection of two or more sets intersection_update(): Removes the items in this set that are not present in other, specified set(s) isdisjoint(): Returns whether two sets have a intersection or not issubset(): Returns whether another set contains this set or not issuperset(): Returns whether this set contains another set or not pop(): Removes an element from the set remove(): Removes the specified element symmetric_difference(): Returns a set with the symmetric differences of two sets symmetric_difference_update(): inserts the symmetric differences from this set and another union(): Return a set containing the union of sets update(): Update the set with another set, or any other iterable</p>"},{"location":"interview-questions/interview-theory/#18-what-are-python-iterators","title":"18. What are Python Iterators?","text":"<p>An iterator is an object which contains a countable number of values and it is used to iterate over iterable objects like list, tuples, sets, etc. Iterators are used mostly to iterate or convert other objects to an iterator using iter() function. Iterator uses iter() and next() functions. Every iterator is not a generator.</p> <pre><code>Example:\n\niter_list = iter(['A', 'B', 'C'])\nprint(next(iter_list))\nprint(next(iter_list))\nprint(next(iter_list))\n\nOutput:\nA\nB\nC\n</code></pre> <ol> <li>Explain Type Conversion in Python.       [(int(), float(), ord(), oct(), str() etc.)] int() - Converts\u202fany data type into an integer. float() - Returns A floating point number from a number or string oct() - Returns its octal representation in a string format. hex() - Convert the integer into a suitable hexadecimal form for the number of the integer. ord() - Returns the integer of the Unicode point of the character in the Unicode case or the byte value in the case of an 8-bit argument. chr(number) - Returns the character (string) from the integer (represents unicode code point of the character). eval() - Parses the expression argument and evaluates it as a python expression. str() - Convert a value (integer or float) into a string. repr() - Returns the string representation of the value passed to eval function by default. For the custom class object, it returns a string enclosed in angle brackets that contains the name and address of the object by default.</li> </ol>"},{"location":"interview-questions/interview-theory/#20-what-does-args-and-kwargs-mean-expain","title":"20. What does *args and **kwargs mean? Expain","text":"<p>When you are not clear how many arguments you need to pass to a particular function, then we use *args and **kwargs.</p> <p>The *args keyword represents a varied number of arguments.  It is used to add together the values of multiple arguments</p> <p>The **kwargs keyword represents an arbitrary number of arguments that are passed to a function.**kwargs keywords are stored in a dictionary. You can access each item by referring to the keyword you associated with an argument when you passed the argument.</p> <pre><code>*args Python Example:\n\ndef sum(*args):\n total = 0\n for a in args:\n  total = total + a\n print(total)\n\nsum(1,2,3,4,5)\n\nOutput:\n15\n</code></pre> <pre><code>**Kwargs Python Example\n\ndef show(**kwargs):\n print(kwargs)\n\nshow(A=1,B=2,C=3)\n\n\nOutput:\n{'A': 1, 'B': 2, 'C': 3}\n</code></pre>"},{"location":"interview-questions/interview-theory/#21-what-is-open-and-with-statement-in-python","title":"21. What is \"Open\" and \"With\" statement in Python?","text":"<p>Both Statements are used in case of file handling. With the \u201cWith\u201d statement, you get better syntax and exceptions handling.</p> <pre><code>f = open(\"nitin.txt\")\ncontent = f.read()\nprint(content)\nf.close()\n</code></pre> <pre><code>with open(\"nitin.txt\") as f:\n content = f.read()\n print(content)\n</code></pre>"},{"location":"interview-questions/interview-theory/#22-different-ways-to-read-and-write-in-a-file-in-python","title":"22. Different Ways To Read And Write In A File In Python?","text":"<p>Syntax of Python open file function:</p> <p>file_object  = open(\"filename\", \"mode\")</p> <p>Read Only (\u2018r\u2019) : Open text file for reading. The handle is positioned at the beginning of the file. If the file does not exists, raises I/O error. This is also the default mode in which file is opened.</p> <p>Read and Write (\u2018r+\u2019) : Open the file for reading and writing. The handle is positioned at the beginning of the file. Raises I/O error if the file does not exists.</p> <p>Write Only (\u2018w\u2019) : Open the file for writing. For existing file, the data is truncated and over-written. The handle is positioned at the beginning of the file. Creates the file if the file does not exists</p> <p>Write and Read (\u2018w+\u2019) : Open the file for reading and writing. For existing file, data is truncated and over-written. The handle is positioned at the beginning of the file.</p> <p>Append Only (\u2018a\u2019) : Open the file for writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.</p> <p>Append and Read (\u2018a+\u2019) : Open the file for reading and writing. The file is created if it does not exist. The handle is positioned at the end of the file. The data being written will be inserted at the end, after the existing data.</p> <p>Text mode (\u2018t\u2019): meaning \\n characters will be translated to the host OS line endings when writing to a file, and back again when reading.</p> <p>Exclusive creation (\u2018x\u2019): File is created and opened for writing \u2013 but only if it doesn't already exist. Otherwise you get a FileExistsError.</p> <p>Binary mode (\u2018b\u2019): appended to the mode opens the file in binary mode, so there are also modes like 'rb', 'wb', and 'r+b'.</p>"},{"location":"interview-questions/interview-theory/#23-what-is-pythonpath","title":"23. What is Pythonpath?","text":"<p>PYTHONPATH is an environment variable which you can set to add additional directories where python will look for modules and packages</p> <p>The \u2018PYTHONPATH\u2019 variable holds a string with the name of various directories that need to be added to the sys.path directory list by Python.</p> <p>The primary use of this variable is to allow users to import modules that are not made installable yet.</p>"},{"location":"interview-questions/interview-theory/#24-how-exception-handled-in-python","title":"24. How Exception Handled In Python?","text":"<p>Try: This block will test the exceptional error to occur.</p> <p>Except: Here you can handle the error.</p> <p>Else: If there is no exception then this block will be executed.</p> <p>Finally: Finally block always gets executed either exception is generated or not.</p> <pre><code>try:\n      # Some Code....!\n\nexcept:\n      # Optional Block\n      # Handling of exception (if required)\n\nelse:\n      # Some code .....\n      # execute if no exception\n\nfinally:\n      # Some code .....(always executed)\n</code></pre> <ol> <li>What is \u2018PIP\u2019 In Python Python pip is the package manager for Python packages. We can use pip to install packages that do not come with Python.</li> </ol> <p>The basic syntax of pip commands in command prompt is: pip 'arguments' Pip install  <ol> <li>How to Get List of all keys in a Dictionary?</li> </ol> <p>Using List:</p> <pre><code>dct = {'A': 1, 'B': 2, 'C': 3}\nall_keys = list(dct.keys())\nprint(all_keys)  # ['A', 'B', 'C']\n\nShortcut for Above Code:\ndct = {'A': 1, 'B': 2, 'C': 3}\nall_keys = list(dct)\nprint(all_keys)  # ['A', 'B', 'C']\n\n\nUsing Iterable Unpacking Operator:\nd = {'A': 1, 'B': 2, 'C': 3}\nx = [*d.keys()]\nprint(x)\n\nShortcut For Above Code:\nd = {'A': 1, 'B': 2, 'C': 3}\nx = [*d]\nprint(x)\n\nUsing Keys() Function:\nd = {'A': 1, 'B': 2, 'C': 3}\nx = d.keys()\nprint([k for k in x])\n\n\nUsing Iterable Unpacking Operator:\nd = {'A': 1, 'B': 2, 'C': 3}\n*x, = d.keys()\nprint(x)\n\nShortcut For Above Code:\nd = {'A': 1, 'B': 2, 'C': 3}\n*x, = d\nprint(x)\n</code></pre> <p>Output Is Same In All 7 Cases: ['A', 'B', 'C']</p> <ol> <li>Difference Between Abstraction and Encapsulation.</li> </ol> <p>Abstraction Encapsulation Abstraction works on the design level. Encapsulation works on the application level. Abstraction is implemented to hide unnecessary data and withdrawing</p> <p>relevant data. Encapsulation is the mechanism of hiding the code and the data</p> <p>together from the outside world or misuse. It highlights what the work of an object instead of how the object</p> <p>works is It focuses on the inner details of how the object works. Modifications</p> <p>can be done later to the settings. Abstraction focuses on outside viewing, for example, shifting the car. Encapsulation focuses on internal working or inner viewing, for</p> <p>example, the production of the car. Abstraction is supported in Java with the interface and the abstract</p> <p>class. Encapsulation is supported using, e.g. public, private and secure</p> <p>access modification systems. In a nutshell, abstraction is hiding implementation with the help of an</p> <p>interface and an abstract class.  In a nutshell, encapsulation is hiding the data with the help of getters</p> <p>and setters.</p> <ol> <li>Does Python Support Multiple Inheritance. (Diamond Problem)</li> </ol> <p>Yes, Python Supports Multiple Inheritance.</p> <p>What Is Diamond Problem? What Java does not allow is multiple inheritance where one class can inherit properties from more than one class. It is known as the diamond problem.</p> <pre><code>class A  \n{\n  public void display()  \n    {\n      System.out.println(\"class A\");\n    }  \n}\n\nclass B extends A  \n{ \n  @Override  \n    public void display()  \n    {  \n      System.out.println(\"class B\");  \n    }  \n} \n\nclass C extends A  \n{  \n  @Override  \n    public void display()  \n      {  \n        System.out.println(\"class C\");  \n       }  \n} \n\n//not supported in Java  \npublic class D extends B,C  \n{  \npublic static void main(String args[])  \n{  \nD d = new D();  \n//creates ambiguity which display() method to call  \nd.display();   \n}  \n}  \n</code></pre> <p>In the above figure, we find that class D is trying to inherit form class B and class C, that is not allowed in Java.</p> <pre><code>Multiple Inheritance In Python:\n\n\nclass A:\n def abc(self):\n  print(\"a\")\n\nclass B(A):\n def abc(self):\n  print(\"b\")\n\nclass C(A):\n def abc(self):\n  print(\"c\")\n\nclass D(B,C):\n pass\n\nd = D()\nd.abc()\n</code></pre> <p>Output: b</p> <ol> <li>How to initialize Empty List, Tuple, Dict and Set?</li> </ol> <p>Empty List: a = []</p> <p>Empty Tuple: a = ()</p> <p>Empty Dict: a = {} Empty Set: a = set()</p> <ol> <li> <p>Difference Between .py and .pyc .py files contain the source code of a program. Whereas, .pyc file contains the bytecode of your program. Python compiles the .py files and saves it as .pyc files , so it can reference them in subsequent invocations. The .pyc contain the compiled bytecode of Python source files. This code is then executed by Python's virtual machine .</p> </li> <li> <p>How Slicing Works In String Manipulation. Explain.</p> </li> </ol> <p>Syntax: Str_Object[Start_Position:End_Position:Step]</p> <p>s = 'HelloWorld'</p> <p>Indexing:</p> <p>print(s[:])</p> <p>Output: HelloWorld print(s[:])  #HelloWorld print(s[::])  #HelloWorld print(s[:5])  #Hello print(s[2:5])  #llo print(s[2:8:2])  #loo print(s[8:1:-1])  #lroWoll print(s[-4:-2])  #or print(s[::-1])  #dlroWolleH</p> <ol> <li>Can You Concatenate Two Tuples. If Yes, How Is It Possible?        Since it is Immutable?</li> </ol> <p>How To Concatenate Two Tuple:</p> <p>t1 = (1,2,3) t2 = (7,9,10) t1 = t1 + t2 print(\"After concatenation is : \", t1 )</p> <p>Output: After concatenation is :  (1, 2, 3, 7, 9, 10)</p> <p>Why Tuple Is Immutable and List Is Mutable?</p> <p>tuple_1 = (1,2,3) print(id(tuple_1))  #140180965800128 tuple_2 = (7,9,10) print(id(tuple_2))  #140180965665600 tuple_1 = tuple_1 + tuple_2 tuple_3 = tuple_1 print(\"The tuple after concatenation is : \", tuple_1 )</p>"},{"location":"interview-questions/interview-theory/#the-tuple-after-concatenation-is-1-2-3-7-9-10","title":"The tuple after concatenation is :  (1, 2, 3, 7, 9, 10)","text":"<p>print(id(tuple_3))  #140180966177280</p> <p>list_1 = [1,2,3] print(id(list_1))  #140180965602048 list_2 = [7,9,10] print(id(list_2))  #140180965601408 list_1.extend(list_2) list_3 = list_1 print(\"The List after concatenation is : \", list_1 )</p>"},{"location":"interview-questions/interview-theory/#the-list-after-concatenation-is-1-2-3-7-9-10","title":"The List after concatenation is :  [1, 2, 3, 7, 9, 10]","text":"<p>print(id(list_3))  #140180965602048</p> <ol> <li>Difference Between Python Arrays and Lists</li> </ol> <p>LIST</p> <p>ARRAY</p> <p>The list can store the value of different types.</p> <p>It can only consist of value of same type.</p> <p>The list cannot handle the direct arithmetic operations.</p> <p>It can directly handle arithmetic operations.</p> <p>The lists are the build-in data structure so we don't need to</p> <p>import it.</p> <p>We need to import the array before work with the array</p> <p>The lists are less compatible than the array to store the data.</p> <p>An array are much compatible than the list.</p> <p>It consumes a large memory.</p> <p>It is a more compact in memory size comparatively list.</p> <p>It is suitable for storing the longer sequence of the data item.</p> <p>It is suitable for storing shorter sequence of data items.</p> <p>We can print the entire list using explicit looping.</p> <p>We can print the entire list without using explicit looping.</p>"},{"location":"interview-questions/interview-theory/#37-what-is-a-__a-__a_-in-python","title":"37. What Is a, __a,  __a_ in Python?","text":"<p>_a Python doesn't have real private methods, so one underline in the beginning of a variable/function/method name means it's a private variable/function/method and It is for internal use only We also call it weak Private</p> <p>a Leading double underscore tell python interpreter to rewrite name in order to avoid conflict in subclass. Interpreter changes variable name with class extension and that feature known as the Mangling. In Mangling python interpreter modify variable name with. So Multiple time It use as the Private member because another class can not access that variable directly. Main purpose for __ is to use variable/method in class only If you want to use it outside of the class you can make public api.</p> <p>a Name with start with __ and ends with same considers special methods in Python. Python provide this methods to use it as the operator overloading depending on the user. Python provides this convention to differentiate between the user defined function with the module\u2019s function</p>"},{"location":"interview-questions/interview-theory/#38-how-to-read-multiple-values-from-single-input","title":"38. How To Read Multiple Values From Single Input?","text":"<p>By Using Split()</p> <pre><code>x = list(map(int, input(\"Enter a multiple value: \").split()))\nprint(\"List of Values: \", x)\n\nx = [int(x) for x in input(\"Enter multiple value: \").split()]\nprint(\"Number of list is: \", x)\n\nx = [int(x) for x in input(\"Enter multiple value: \").split(\",\")]\nprint(\"Number of list is: \", x)\n</code></pre>"},{"location":"interview-questions/interview-theory/#39-how-to-copy-and-delete-a-dictionary","title":"39. How To Copy and Delete A Dictionary","text":"<pre><code>Delete By Using clear():\nd1 = {'A':1,'B':2,'C':3}\nd1.clear()\nprint(d1)  #{}\n\nDelete By Using pop():\nd1 = {'A':1,'B':2,'C':3}\nprint(d1) #{'A': 1, 'B': 2, 'C': 3}\nd1.pop('A')\nprint(d1)  # {'B': 2, 'C': 3}\n\nDelete By Using del():\ndel d1['B']\nprint(d1)  # {'C': 3}\n</code></pre> <pre><code>Copy A Dictionary Using copy():\nd2 = {'A':1,'B':2,'C':3}\nprint(d2)  # {'A': 1, 'B': 2, 'C': 3}\nd3 = d2.copy()\nprint(d3)  # {'A': 1, 'B': 2, 'C': 3}\n\nCopy A Dictionary Using \u2018=\u2019:\nd2 = {'A':1,'B':2,'C':3}\nprint(d2)  # {'A': 1, 'B': 2, 'C': 3}\nd3 = d2\nprint(d3) # {'A': 1, 'B': 2, 'C': 3}\n</code></pre> <pre><code>Benefit Of Using Copy():\nd2 = {'A':1,'B':2,'C':3}\nprint(d2)  # {'A': 1, 'B': 2, 'C': 3}\nd3 = d2.copy()\nprint(d3)  # {'A': 1, 'B': 2, 'C': 3}\ndel d2['B']\nprint(d2)   # {'A': 1, 'C': 3}\nprint(d3)   # {'A': 1, 'B':2, 'C': 3}\n\nDrawBack Of Using \u2018=\u2019\nd2 = {'A':1,'B':2,'C':3}\nprint(d2)  # {'A': 1, 'B': 2, 'C': 3}\nd3 = d2\nprint(d3) # {'A': 1, 'B': 2, 'C': 3}\ndel d2['B']\nprint(d2)  # {'A': 1, 'C': 3}\nprint(d3)  # {'A': 1, 'C': 3}\n</code></pre> <ol> <li>Difference Between Anonymous and Lambda Function</li> </ol> <p>Lambda function:</p> <p>It can have any number of arguments but only one expression. The expression is evaluated and returned. Lambda functions can be used wherever function objects are required.</p> <p>Anonymous function:</p> <p>In Python, Anonymous function is a function that is defined without a name. While normal functions are defined using the def keyword, Anonymous functions are defined using the lambda keyword. Hence, anonymous functions are also called lambda functions.</p> <p>Syntax:</p> <p>lambda [arguments] : expression</p> <p>Example:</p> <p>square = lambda x : x * x square(5) #25</p> <p>The above lambda function definition is the same as the following function: def square(x):     return x * x</p> <p>Anonymous Function:  We can declare a lambda function and call it as an anonymous function, without assigning it to a variable. print((lambda x: x*x)(5))</p> <p>Above, lambda x: x*x defines an anonymous function and call it once by passing arguments in the parenthesis (lambda x: x*x)(5).</p>"},{"location":"interview-questions/interview-theory/#41-how-to-achieve-multiprocessing-and-multithreading-in-python","title":"41. How to achieve Multiprocessing and Multithreading in Python?","text":"<p>Multithreading:</p> <p>It is a technique where multiple threads are spawned by a process to do different tasks, at about the same time, just one after the other. This gives you the illusion that the threads are running in parallel, but they are actually run in a concurrent manner. In Python, the Global Interpreter Lock (GIL) prevents the threads from running simultaneously.</p> <p>Multiprocessing:</p> <p>It is a technique where parallelism in its truest form is achieved. Multiple processes are run across multiple CPU cores, which do not share the resources among them. Each process can have many threads running in its own memory space. In Python, each process has its own instance of Python interpreter doing the job of executing the instructions.</p> <pre><code># importing the multiprocessing module\nimport multiprocessing\n\ndef print_cube(num):\n print(\"Cube: {}\".format(num * num * num))\n\ndef print_square(num):\n print(\"Square: {}\".format(num * num))\n\nif __name__ == \"__main__\":\n # creating processes\n p1 = multiprocessing.Process(target=print_square, args=(10, ))\n p2 = multiprocessing.Process(target=print_cube, args=(10, ))\n p1.start()\n p2.start()\n # wait until process 1 is finished\n p1.join()\n p2.join()\n\n # both processes finished\n print(\"Done!\")\n</code></pre> <pre><code># A multithreaded program in python\nimport time\nfrom threading import Thread\nnum= 0\n\n# The bottleneck of the code which is CPU-bound\ndef upgrade(n):\nwhile num&lt;400000000:\nnum=num+1\n\n# Creation of multiple threads\nt1 = Thread(target=upgrade, args=(num//2,))\nt2 = Thread(target=upgrade, args=(num//2,))\n\n# multi thread architecture, recording time\nstart = time.time()\nt1.start()\nt2.start()\nt1.join()\nt2.join()\nend = time.time()\n\nprint('Time taken in seconds -', end - start)\n</code></pre>"},{"location":"interview-questions/interview-theory/#42-what-is-gil-explain","title":"42. What is GIL. Explain","text":"<p>The Global Interpreter Lock (GIL) of Python allows only one thread to be executed at a time. It is often a hurdle, as it does not allow multi-threading in python to save time</p> <p>The Python Global Interpreter Lock or GIL, in simple words, is a mutex (or a lock) that allows only one thread to hold the control of the Python interpreter.</p> <p>This means that only one thread can be in a state of execution at any point in time. The impact of the GIL isn\u2019t visible to developers who execute single-threaded programs, but it can be a performance bottleneck in CPU-bound and multi-threaded code.</p> <p>Since the GIL allows only one thread to execute at a time even in a multi-threaded architecture with more than one CPU core, the GIL has gained a reputation as an \u201cinfamous\u201d feature of Python.</p> <p>Basically, GIL in Python doesn\u2019t allow multi-threading which can sometimes be considered as a disadvantage.</p>"},{"location":"interview-questions/interview-theory/#43-how-class-and-object-created-in-python","title":"43. How Class and Object Created in Python?","text":"<p>Python is an object oriented programming language. Almost everything in Python is an object, with its properties and methods. A Class is like an object constructor, or a \"blueprint\" for creating objects.</p> <p>Create a Class: To create a class, use the keyword \u2018class\u2019: class MyClass:   x = 5</p> <p>Create Object: Now we can use the class named MyClass to create objects: (Create an object named obj, and print the value of x:)</p> <p>obj= MyClass() print(obj.x)</p> <ol> <li>Explain Namespace and Its Types in Python. Namespace:</li> </ol> <p>In python we deal with variables, functions, libraries and modules etc. There is a chance the name of the variable you are going to use is already existing as name of another variable or as the name of another function or another method. In such scenario, we need to learn about how all these names are managed by a python program. This is the concept of namespace. Categories Of Namespace: Following are the three categories of namespace</p> <p>Local Namespace: All the names of the functions and variables declared by a program are held in this namespace. This namespace exists as long as the program runs.</p> <p>Global Namespace: This namespace holds all the names of functions and other variables that are included in the modules being used in the python program. It includes all the names that are part of the Local namespace.</p> <p>Built-in Namespace: This is the highest level of namespace which is available with default names available as part of the python interpreter that is loaded as the programing environment. It include Global Namespace which in turn include the local namespace.</p> <p>We can access all the names defined in the built-in namespace as follows. builtin_names = dir(builtins) for name in builtin_names:     print(name)</p> <ol> <li>Explain Recursion by Reversing a List.</li> </ol> <pre><code>def reverseList(lst):\n    if not lst:\n        return []\n    return [lst[-1]] + reverseList(lst[:-1])\n\nprint(reverseList([1, 2, 3, 4, 5]))\n\nOutput:\n[5,4,3,2,1]\n</code></pre> <ol> <li>What are Unittests in Python Unit Testing is the first level of software testing where the smallest testable parts of a software are tested. This is used to validate that each unit of the software performs as designed. The unittest test framework is python's xUnit style framework. This is how you can import it.</li> </ol> <p>import unittest</p> <p>Unit testing is a software testing method by which individual units of source code are put under various tests to determine whether they are fit for use (Source). It determines and ascertains the quality of your code. Generally, when the development process is complete, the developer codes criteria, or the results that are known to be potentially practical and useful, into the test script to verify a particular unit's correctness. During test case execution, various frameworks log tests that fail any criterion and report them in a summary. The developers are expected to write automated test scripts, which ensures that each and every section or a unit meets its design and behaves as expected. Though writing manual tests for your code is definitely a tedious and time-consuming task, Python's built-in unit testing framework has made life a lot easier. The unit test framework in Python is called unittest, which comes packaged with Python. Unit testing makes your code future proof since you anticipate the cases where your code could potentially fail or produce a bug. Though you cannot predict all of the cases, you still address most of them.</p>"},{"location":"interview-questions/interview-theory/#47-how-to-use-map-filter-and-reduce-function-in-python","title":"47. How to use Map, Filter and Reduce Function in Python?","text":"<p>Map() Function</p> <p>The map() function iterates through all items in the given iterable and executes the function we passed as an argument on each of them.</p> <p>The syntax is: map(function, iterable(s))</p> <p>fruit = [\"Apple\", \"Banana\", \"Pear\"] map_object = map(lambda s: s[0] == \"A\", fruit) print(list(map_object))</p> <p>Output: [True, False, False]</p> <p>Filter() Function</p> <p>The filter() function takes a function object and an iterable and creates a new list. As the name suggests, filter() forms a new list that contains only elements that satisfy a certain condition, i.e. the function we passed returns True.</p> <p>The syntax is: filter(function, iterable(s))</p> <p>fruit = [\"Apple\", \"Banana\", \"Pear\"] filter_object = filter(lambda s: s[0] == \"A\", fruit) print(list(filter_object))</p> <p>Output: ['Apple', 'Apricot']</p> <p>Reduce() Function</p> <p>The reduce() Function  works differently than map() and filter(). It does not return a new list based on the function and iterable we've passed. Instead, it returns a single value.</p> <p>Also, in Python 3 reduce() isn't a built-in function anymore, and it can be found in the functools module.</p> <p>The syntax is: reduce(function, sequence[, initial])</p> <p>from functools import reduce list = [2, 4, 7, 3] print(reduce(lambda x, y: x + y, list)) print(\"With an initial value: \" + str(reduce(lambda x, y: x + y, list, 10)))</p> <p>Output: 16 With an initial value: 26</p> <ol> <li>Difference Between Shallow Copy and Deep Copy</li> </ol> <p>Shallow Copy: Shallow copies duplicate as little as possible. A shallow copy of a collection is a copy of the collection structure, not the elements. With a shallow copy, two collections now share the individual elements.</p> <p>Shallow copying is creating a new object and then copying the non static fields of the current object to the new object. If the field is a value type, a bit by bit copy of the field is performed. If the field is a reference type, the reference is copied but the referred object is not, therefore the original object and its clone refer to the same object.</p> <p>Deep Copy: Deep copies duplicate everything. A deep copy of a collection is two collections with all of the elements in the original collection duplicated.</p> <p>Deep copy is creating a new object and then copying the non-static fields of the current object to the new object. If a field is a value type, a bit by bit copy of the field is performed. If a field is a reference type, a new copy of the referred object is performed. A deep copy of an object is a new object with entirely new instance variables, it does not share objects with the old. While performing Deep Copy the classes to be cloned must be flagged as [Serializable].</p> <ol> <li>How An Object Be Copied in Python You can Explain Deep Copy and Shallow Copy In This</li> <li>What does term MONKEY PATCHING refer to in python? In Python, the term monkey patch refers to dynamic (or run-time) modifications of a class or module. In Python, we can actually change the behavior of code at run-time.</li> </ol>"},{"location":"interview-questions/interview-theory/#monkeypy","title":"monkey.py","text":"<p>class A:      def func(self):           print (\"func() is called\")</p> <p>We use above module (monkey) in below code and change behavior of func() at run-time by assigning different value.</p> <p>import monkey def monkey_func(self):  print (\"monkey_func() is called\")</p>"},{"location":"interview-questions/interview-theory/#replacing-address-of-func-with-monkey_func","title":"replacing address of \"func\" with \"monkey_func\"","text":"<p>monkey.A.func = monkey_func obj = monkey.A()</p>"},{"location":"interview-questions/interview-theory/#calling-function-func-whose-address-got-replaced","title":"calling function \"func\" whose address got replaced","text":""},{"location":"interview-questions/interview-theory/#with-function-monkey_func","title":"with function \"monkey_func()\"","text":"<p>obj.func()</p> <p>Examples: Output :monkey_func() is called</p> <ol> <li>What is Operator Overloading &amp; Dunder Method. Dunder methods in Python are special methods. In Python, we sometimes see method names with a double underscore (), such as the __init method that every class has. These methods are called \u201cdunder\u201d methods. In Python, Dunder methods are used for operator overloading and customizing some other function\u2019s behavior.</li> </ol> <p>Some Examples:</p> <ul> <li> <p>add(self, other) \u2013 sub(self, other)</p> </li> <li> <p>mul(self, other) / truediv(self, other) // floordiv(self, other) % mod(self, other) ** pow(self, other)</p> </li> </ul> <p>rshift(self, other) &lt;&lt; lshift(self, other) &amp; and(self, other) | or(self, other) ^ xor(self, other)</p> <ol> <li>Draw Pattern.</li> </ol>"},{"location":"interview-questions/interview-theory/#this-is-the-example-of-print-simple-pyramid-pattern","title":"This is the example of print simple pyramid pattern","text":"<p>n = int(input(\"Enter the number of rows\"))  </p>"},{"location":"interview-questions/interview-theory/#outer-loop-to-handle-number-of-rows","title":"outer loop to handle number of rows","text":"<p>for i in range(0, n):     # inner loop to handle number of columns     # values is changing according to outer loop         for j in range(0, i + 1):             # printing stars             print(\"* \", end=\"\")</p> <pre><code>    # ending line after each row  \n    print()\n</code></pre> <p>Output: *</p> <ul> <li>-</li> </ul> <ul> <li></li> <li> <ul> <li></li> </ul> </li> </ul>"},{"location":"interview-questions/interview-theory/#-","title":"- -","text":"<pre><code>         * \n         * * \n        * * * \n       * * * * \n        * * * \n         * * \n          *\n\n * \n * * \n* * *\n</code></pre>"},{"location":"interview-questions/string/","title":"String","text":""},{"location":"interview-questions/string/#list-of-programs","title":"List of Programs","text":"<p>Q1. Write a Program To REVERSE content of the given String by using slice operator?</p> <ul> <li>input: ashish</li> <li>output: hsihsa</li> </ul> <pre><code>s = input('Enter Some String to Reverse:')\noutput = s[::-1]\nprint(output)\ns =\"ashish\" #read -ve indexing then do\n\n# print(s[:-7:-1])\n\nprint(s[5:1:-1])\n</code></pre> <p>if step value is zero are you moving forword or backword</p> <p>Q2. Write a Program To REVERSE content of the given String by using reversed() function?</p> <pre><code>s = input(\"Enter Some String to Reverse:\")\nr = reversed(s)\nprint(r)\n\ns = input(\"Enter Some String to Reverse:\")\nr = reversed(s)\nprint(r) # we are getting reversed object\n\noutput= ''.join(r)\nprint(output)\n\ns = input(\"Enter Some String to Reverse:\")\nr = reversed(s)\n\nfor v in r:\n    print(v,end='')\n</code></pre> <p>Q3. Write a Program to REVERSE content of given String By uing while loop?</p> <pre><code>s = input(\"Enter Some String to Reverse:\")\noutput=''\nn = len(s)-1\nwhile(n&gt;-1):\n    output = output+s[n]\n    n-=1\nprint(output)\n</code></pre> <p>Q4. Write a Program to REVERSE order of words present in the given String?</p> <pre><code>s = input(\"Enter Some String to Reverse:\")\nl = s.split()\nl1=l[::-1]\noutput = ' '.join(l1)\nprint(output)\n</code></pre> <p>Q5. Write a Program to REVERSE internal contentvof each word?</p> <pre><code>s = input(\"Enter Some String to Reverse:\")\nl = s.split()\nl1 = []\nfor word in l:\n    l1.append(word[::py-1])\noutput = ' '.join(l1)\nprint(output)\n</code></pre> <p>Q6. Write a Program to REVERSE internal contentv of every second word present int the given string?</p> <pre><code>s = input(\"Enter Some String to Reverse:\")\nl = s.split()\nl1 = []\ni=0\nwhile i&lt;len(l):\n    if i%2 == 0:\n        l1.append(l[i])\n    else:\n        l1.append(l[i][::-1])\n    i+=1\noutput = ' '.join(l1)\nprint(output)\n</code></pre> <pre><code>s = \"ashish bindra\"\nl = s.split()\nl1=[]\nfor i,word in enumerate(l):\n    if i%2==1:\n        l1.append(l[i][::-1])\n    else:\n        l1.append(l[i])\nprint(l1)\n</code></pre> <pre><code>s = \"ashish bindra\"\nl = s.split()\nl1=[l[i][::-1] if i%2==1 else l[i] for i,word in enumerate(l)]\nl1\n</code></pre> <p>Q7. Write a Program to print the character present at even and odd index seperatly for givern string ?</p>"},{"location":"interview-questions/string/#1-st-way","title":"1 st way","text":"<pre><code>s = input(\"Enter Some String to Reverse:\")\nprint('Character present at even index:')\ni=0\nwhile i&lt;len(s):\n    print(s[i])\n    i+=2\nprint('Charater present at Odd Index:')\ni=1\nwhile i&lt;len(s):\n    print(s[i])\n    i+=2\n</code></pre> <pre><code># 2nd way\ns = input(\"Enter Some String to Reverse:\")\nprint('Character present at Even Index:',s[0::2])\nprint('Character present at Even Index:',s[::2])\nprint('Character present at odd Index:',s[1::2])\n</code></pre> <p>Q8. Write a Program to merge charaters of 2 strings inti a single string by taking charater alternatively ?</p> <pre><code># if strings are having same length\n\ns1 = \"RAVI\"\ns2 = \"TEJA\"\noutput=''\ni,j=0,0\nwhile i&lt;len(s1) or j&lt;len(s2):\n    output = output + s1[i]+s2[j]\n    i+=1\n    j+=1\nprint(output)\n</code></pre> <p>Note : The above program can work if the lengths of 2 strings are same.</p> <pre><code># if strings are having different length\n\ns1 = input('Enter First String: ')\ns2 = input('Enter Second String: ')\noutput=''\ni,j=0,0\nwhile i&lt;len(s1) or j&lt;len(s2):\n    if i&lt;len(s1):\n        output = output + s1[i]\n        i+=1\n    if j&lt;len(s2):\n        output = output + s2[j]\n        j+=1\nprint(output)\n</code></pre> <p>Q9. Write a Program to sort charaters of the strings, first alphabet symbols followed by digits?</p> <ul> <li>input: B4A1D3</li> <li>output: ABD134</li> </ul> <pre><code>s = 'B4A1D3'\nalphabets = []\ndigits = []\nfor ch in s:\n    if ch.isalpha():\n        alphabets.append(ch)\n    else:\n        digits.append(ch)\noutput = ''.join(sorted(alphabets) + sorted(digits))\nprint(output)\n</code></pre> <pre><code># -----------------\n# alternative way\n# -----------------\ns = 'B4A1D3'\nalphabets = ''\ndigits = ''\nfor ch in s:\n    if ch.isalpha():\n        alphabets+=ch\n    else:\n        digits+=ch\noutput = ''\nfor ch in sorted(alphabets):\n    output=output+ch\nfor ch in sorted(digits):\n    output=output + ch\nprint(output)\n</code></pre> <p>Q10. Write a Program for the following requirment?</p> <ul> <li>input: a4b3c2</li> <li>output: aaaabbbcc</li> </ul> <pre><code>s = input('Enter some string where alphabet symbol should be followed by digit: ')\noutput = ''\nfor ch in s:\n    if ch.isalpha():\n        x = ch\n    else:\n        d = int(ch)\n        output = output + x*d\nprint(output)\n</code></pre> <p>Q11. WAP for the following requirment</p> <ul> <li>input: aaaabbbccz</li> <li>output: 4a3b2c1z</li> </ul> <pre><code>s = 'aaaabbbccz'\noutput = ''\nprevious = s[0]\nc=1\ni=1\nwhile i&lt;len(s):\n    if s[i] == previous:\n        c=c+1\n    else:\n        output = output+str(c)+previous\n        previous = s[i]\n        c = 1\n    if i == len(s) - 1:\n        output = output+str(c) + previous\n    i = i+1\nprint(output)\n</code></pre> <pre><code># s = 'aaaabbbccz'\n# output = ''\n# global p\n# p =''\n# c = 1\n# for i in s\n# if p == i\n# c+=1\n# else\n# output = output + c\n# p = i\n# c = 1\n</code></pre> <p>Q12. Write a Program for the following requirment?</p> <ul> <li>input: a4k3b2</li> <li>output: aekndb In this example the following two functions are required to use</li> </ul> <ol> <li>ord(): To find unicode value for the given character     eg:<ul> <li>ord('a') --&gt; 97</li> </ul> </li> <li>chr(): To find corresponding character for the given unicode value<ul> <li>chr(98) --&gt; b</li> </ul> </li> </ol> <pre><code>s = 'a4k3b2'\noutput = ''\nfor ch in s:\n    if ch.isalpha():\n        x= ch\n        output = output + ch\n    else:\n        d = int(ch)\n        newc = chr(ord(x) + d)\n        output = output + newc\nprint(output)\n</code></pre> <p>Q13. Write a program to remove duplicate characters from the given input string?</p> <ul> <li>input: aaaavvvhhhjjj</li> <li>output: avhj</li> </ul> <pre><code># 1st way\n\n# --------\n\ns='AAAAZZZZZBCHGGJBBCCBHGFFCSSSFVA'\noutput=''\n\nfor ch in s:\n    if ch not in output:\n        output = output + ch\nprint(output)\n</code></pre> <pre><code># 2nd way\n\n# --------\n\ns='AAAAZZZZZBCHGGJBBCCBHGFFCSSSFVA'\nl=[]\nfor ch in s:\n    if ch not in l:\n        l.append(ch)\noutput = ''.join(l)\nprint(output)\n</code></pre> <pre><code># 3rd way by using set (but no gurantee for the order)\n\ns='AAAAZZZZZBCHGGJBBCCBHGFFCSSSFVA'\ns1 = dict.fromkeys(s).keys()\noutput =''.join(s1)\nprint(output,type(s1))\n</code></pre> <p>Q14. Program to find the number of occurrences of each character present in the given string with count() method</p> <pre><code># By using cout() method and list\n\ns='AAAAZZZZZBCHGGJBBCCBHGFFCSSSFVA'\n\nl = []\nfor ch in s:\n    if ch not in l:\n        l.append(ch)\nfor ch in sorted(l):\n    print(f'{ch} occurrs {s.count(ch)} times')\ns = input(\"enter any string \")\ns1 = set(s)\nfor ch in sorted(s1):\n    print(f'{ch} occurrs {s.count(ch)} times')\n</code></pre> <p>Q15. Program to find the number of occurrences of each character present in the given string without sing count() method</p> <pre><code>s='AAAAZZZZZBCHGGJBBCCBHGFFCSSSFVA'\nd ={}\n\nfor ch in s:\n    d[ch] = d.get(ch,0) + 1\nfor k,v in d.items():\n    print(f'{k} occurrs {v} times')\nprint()\n</code></pre> <pre><code># for sorting propose\n\nfor k,v in sorted(d.items()):\n    print(f'{k} occurrs {v} times')\n</code></pre> <p>Q16.Write a Program to find the number of occurrences of each vowel present in the given string?</p> <pre><code>s = input('Enter some string to search for vowels:')\nv = ['a','e','i','o','u','A','E','I','O','U']\nd = {}\n\nfor ch in s:\n    if ch in v:\n        d[ch] = d.get(ch,0) + 1\nfor k,v in sorted(d.items()):\n    print(f'{k} occures {v} times')\n</code></pre> <p>Q17.Write a Program to check whether the given two strings are anagrams or not? Two strings are said to be anagrams iff both are having same content irrespective of characters position.</p> <p>e.g</p> <ul> <li>lazy and zaly</li> <li>SILENT and LISTEN</li> <li>TRIANGLE and INTEGRAL</li> </ul> <pre><code>s1 = input(\"Enter first string: \")\ns2 = input(\"Enter second string: \")\nif(sorted(s1) == sorted(s2)):\n    print(\"The string are anagrams.\")\nelse:\n    print(\"The strings are't anagrams.\")\n</code></pre> <p>Q18.Write a Program to check whether the strings is palindrome or not?</p> <pre><code>eg. level, malayalam, eye,..\n</code></pre> <p>A string is said to be palindrome iff original string and its reversed strings are equal.</p> <pre><code>s = input(\"Enter Some string:\")\nif s == s[::-1]:\n    print('The given string is palindrome')\nelse:\n    print('The given string is not palindrome')\n</code></pre> <p>Q19. Program to generate words from the given input strings ny taking characters alternatively?</p> <pre><code>inputs: s1 = 'abcdefg'\n        s2 = 'xyz'\n        s3 = '12345'\noutput: ax1, by2, cz3, d4 ,es, f, g\n</code></pre> <pre><code>s1 = 'abcdefg'\ns2 = 'xyz'\ns3 = '12345'\n\ni=j=k=0\nwhile i&lt; len(s1) or j&lt;len(s2) or k&lt;len(s3):\n    output = ''\n    if i&lt; len(s1):\n        output = output + s1[i]\n        i+=1\n    if j&lt; len(s2):\n        output = output + s2[j]\n        j+=1\n    if k&lt; len(s3):\n        output = output + s3[k]\n        k+=1\n    print(output)\n</code></pre> <ol> <li>First convert the given string to \u201ca11\u201d i.e. write, character along with its frequency.</li> <li>Then, change \u201ca11\u201d to \u201cab\u201d because 11 is b in hexadecimal.</li> <li> <p>Then, finally reverse the string i.e \u201cba\u201d.</p> <p><code>Input: S = \u201cabc\u201d Output: 1c1b1a</code></p> </li> </ol> <pre><code>input_string = \"aabbcc\"\nfrequecy = {}\nfor i in input_string:\n    frequecy[i] = frequecy.get(i,0) + 1\nfor k,v in reversed(frequecy.items()):\n    print(k)\n</code></pre> <pre><code>input_string = \"aabbcc\"\nfrequecy = {}\nfor i in reversed(input_string):\n    frequecy[i] = frequecy.get(i,0) + 1\nprint(frequecy)\n</code></pre> <pre><code>import json\ninput_string = \"aabbcc\"\nfrequecy = {}\nfor i in reversed(input_string):\n    frequecy[i] = frequecy.get(i,0) + 1\na = json.dumps(frequecy)\nprint(a)\n\n# `Input: str = \u201cgeEks\u201d`\n# `Output: 1`\n</code></pre> <ul> <li>Either the first 2 characters can be converted to uppercase characters i.e. \u201cGEEks\u201d with 2 operations.</li> <li> <p>Or the third character can be converted to a lowercase character i.e. \u201cgeeks\u201d with a single operation.</p> <p><code>Input: str = \u201cgeek\u201d</code> <code>Output: 0</code></p> </li> <li> <p>The string is already in the specified forma</p> </li> </ul>"},{"location":"project/test/","title":"Test","text":"<p>@st.cache_data def convert_for_download(df):     return df.to_csv().encode(\"utf-8\")</p> <p>df = get_data() csv = convert_for_download(df)</p> <p>st.download_button(     label=\"Download CSV\",     data=csv,     file_name=\"data.csv\",     mime=\"text/csv\",     icon=\":material/download:\", )</p>"},{"location":"python-versions/Python-3.10/","title":"Python 3.10","text":"<p>Python 3.10 was released on October 4th, 2021.</p> <p>Python language that will help to make your Python code even cleaner:</p> <ol> <li>Structural pattern matching</li> <li>Parenthesized context managers</li> <li>Clearer error messages</li> <li>Improved type annotations</li> <li>Strict argument for zipping</li> </ol>"},{"location":"python-versions/Python-3.10/#structural-pattern-matching","title":"Structural Pattern Matching","text":"<p>It introduces a match/case statement to the Python language, which looks very much like a switch/case statement in other programming languages. With structural pattern matching, you can test an object against one or more patterns to determine if the structure of the comparison object matches one of the given patterns.</p> <pre><code>code = 404\n\nmatch code:\n    case 200:\n        print(\"OK\")\n    case 404:\n        print(\"Not found\")\n    case 500:\n        print(\"Server error\")\n    case _:\n        print(\"Code not found\")\n</code></pre> <p>Patterns can be:</p> <ol> <li>literals</li> <li>captures</li> <li>wildcards</li> <li>values</li> <li>groups</li> <li>sequences</li> <li>mappings</li> <li>classes</li> </ol> <pre><code>from http import HTTPStatus\n\ncode = 404\n\nmatch code:\n    case HTTPStatus.OK:\n        print(\"OK\")\n    case HTTPStatus.NOT_FOUND:\n        print(\"Not found\")\n    case HTTPStatus.INTERNAL_SERVER_ERROR:\n        print(\"Server error\")\n    case _:\n        print(\"Code not found\")\n\n\n# =&gt; \"Not found\"\n</code></pre> <p>You can also combine multiple patterns using the OR pattern:</p> <pre><code>from http import HTTPStatus\n\ncode = 400\n\nmatch code:\n    case HTTPStatus.OK:\n        print(\"OK\")\n    case HTTPStatus.NOT_FOUND | HTTPStatus.BAD_REQUEST:\n        print(\"You messed up\")\n    case HTTPStatus.INTERNAL_SERVER_ERROR | HTTPStatus.BAD_GATEWAY:\n        print(\"Our bad\")\n    case _:\n        print(\"Code not found\")\n\n\n# =&gt; \"You messed up\"\n</code></pre> <p>What makes structural pattern matching different from the switch/case syntax in other languages is that you can unpack complex data types and perform actions based on the resulting data:</p> <pre><code>point = (0, 10)\n\nmatch point:\n    case (0, 0):\n        print(\"Origin\")\n    case (0, y):\n        print(f\"Y={y}\")\n    case (x, 0):\n        print(f\"X={x}\")\n    case (x, y):\n        print(f\"X={x}, Y={y}\")\n    case _:\n        raise ValueError(\"Not a point\")\n\n\n# =&gt; Y=10\n</code></pre> <p>Here, the value (10) is bound from the subject ((0, 10)) to a variable inside the case. This is the capture pattern.</p> <p>You can achieve nearly the same thing with the class pattern:</p> <pre><code>from dataclasses import dataclass\n@dataclass\nclass Point:\n    x: int\n    y: int\n\npoint = Point(10, 10)\n\nmatch point:\n    case Point(x=0, y=0):\n        print(\"Origin\")\n    case Point(x=0, y=y):\n        print(f\"On Y axis with Y={y}\")\n    case Point(x=x, y=0):\n        print(f\"On X axis with X={x}\")\n    case Point(x=x, y=y):\n        print(f\"Somewhere in a X, Y plane with X={x}, Y={y}\")\n    case _:\n        print(\"Not a point\")\n\n\n# =&gt; Somewhere in a X, Y plane with X=10, Y=10\n</code></pre>"},{"location":"python-versions/Python-3.10/#parenthesized-context-managers","title":"Parenthesized Context Managers","text":"<p>Python now supports continuation across multiple lines when using context managers:</p> <pre><code>with (\n    CtxManager1() as ctx1,\n    CtxManager2() as ctx2\n):\n</code></pre>"},{"location":"python-versions/Python-3.10/#clearer-error-messages","title":"Clearer Error Messages","text":"<p>As you can tell, it's much easier to spot the actual issue with the new error message</p>"},{"location":"python-versions/Python-3.10/#improved-type-annotations","title":"Improved Type Annotations","text":""},{"location":"python-versions/Python-3.10/#union-operator","title":"Union Operator","text":"<p>First, you'll also be able to use a new type union operator, <code>|</code>, so you can express either type X or Y rather than having to import <code>Union</code> from the <code>typing</code>module:</p> <pre><code># before\nfrom typing import Union\n\ndef sum_xy(x: Union[int, float], y: Union[int, float]) -&gt; Union[int, float]:\n    return x + y\n\n\n# after\ndef sum_xy(x: int | float, y: int | float) -&gt; int | float:\n    return x + y\n</code></pre>"},{"location":"python-versions/Python-3.10/#type-aliases","title":"Type Aliases","text":"<p>Another bit of sugar is the ability to explicitly define type aliases. Static type checkers, as well as other developers, sometimes have problems distinguishing between variable assignments and type aliases.</p> <p>Take, for example, the following two flavors of is_employee:</p> <pre><code># without type guards\ndef is_employee(user: User) -&gt; bool:\n    return isinstance(user, Employee)\n\n\n# with type guards\nfrom typing import TypeGuard\n\ndef is_employee(user: User) -&gt; TypeGuard[Employee]:\n    return isinstance(user, Employee)\n</code></pre> <p>So, with the second flavor of is_employee, when it returns True, the type checker will be able to narrow user down from User to Employee.</p>"},{"location":"python-versions/Python-3.10/#strict-argument-for-zipping","title":"Strict Argument for Zipping","text":"<p>What happens when you try to zip two iterables that don't have the same length?</p> <pre><code>names = [\"Jan\", \"Mike\", \"Marry\", \"Daisy\"]\ngrades = [\"B+\", \"A\", \"A+\"]\n\nfor name, grade in zip(names, grades):\n    print(name, grade)\n\n\"\"\"\nJan B+\nMike A\nMarry A+\n\"\"\"\n</code></pre> <p>Iteration stops when the end of the shorter iterable is reached.</p> <p>Python 3.10 introduces a new strict keyword parameter to ensure at runtime all iterables have the same length:</p> <pre><code>names = [\"Jan\", \"Mike\", \"Marry\", \"Daisy\"]\ngrades = [\"B+\", \"A\", \"A+\"]\n\nfor name, grade in zip(names, grades, strict=True):\n    print(name, grade)\n\n# ValueError: zip() argument 2 is shorter than argument 1\n</code></pre>"},{"location":"python-versions/Python-3.11/","title":"Python 3.11","text":"<p>Python 3.11 was released on October 24th, 2021</p> <p>artilcle link: https://testdriven.io/blog/python311/</p>"},{"location":"python-versions/Python-3.11/#aganda","title":"Aganda","text":"<ul> <li>Faster CPython</li> <li>Improved type hints</li> <li>Better error messages</li> <li>Exception notes</li> <li>TOML library</li> </ul>"},{"location":"python-versions/Python-3.11/#faster-cpython","title":"Faster CPython","text":"<p>Python 3.11 is 10 - 60% faster than Python 3.10. On average, it's 25% faster.</p>"},{"location":"python-versions/Python-3.11/#faster-startup","title":"Faster Startup","text":"<p>In terms of startup, rather than Reading pycache -&gt; Unmarshall -&gt; Heap allocated code object -&gt; Evaluate, Python 3.11 uses a new process. Core modules essential for the startup of the Python interpreter are now frozen in the interpreter -- their code is statically allocated. The new flow is Statically allocated code object -&gt; Evaluate. The latter is 10 - 15% faster.</p>"},{"location":"python-versions/Python-3.11/#faster-runtime","title":"Faster Runtime","text":"<p>Every time you call a function in Python, a frame gets created. It holds information about function execution. The core developers simplified their creation process, internal information, and memory allocation. Another improvement occurred with inline function calls. From now on, most of the Python function calls consume no C stack space.</p> <p>Maybe the most important improvement in this regard is PEP 659: Specializing Adaptive Interpreter. This PEP is one of the key elements for fast Python. Its main idea is that Python code has regions where types rarely change. Within those regions, Python can optimize operations by using more specialized types when it sees that some operation is always done only for certain types of data. For example, instead of using general multiplication, it can use multiplication for integers if only integers are being used. Another example is the direct call of underlying C implementations for common built-in functions like len and str instead of going through the internal calling convention</p> <p>You can observe this by checking generated bytecode:</p> <pre><code>import dis\nfrom random import random\n\n\ndef dollars_to_pounds(dollars):\n    return 0.87 * dollars\n\n\ndis.dis(dollars_to_pounds, adaptive=True)\n#   5           0 RESUME                   0\n#\n#   6           2 LOAD_CONST               1 (0.87)\n#               4 LOAD_FAST                0 (dollars)\n#               6 BINARY_OP                5 (*)\n#              10 RETURN_VALUE\n\nfor _ in range(8):\n    dollars_to_pounds(random() * 100)\n\n\ndis.dis(dollars_to_pounds, adaptive=True)\n#   5           0 RESUME_QUICK             0\n#\n#   6           2 LOAD_CONST__LOAD_FAST     1 (0.87)\n#               4 LOAD_FAST                0 (dollars)\n#               6 BINARY_OP_MULTIPLY_FLOAT     5 (*)  # &lt;--  CHANGED!\n#              10 RETURN_VALUE\n</code></pre> <p>As you can see, after 8 calls of dollars_to_pounds with a float, the bytcode is optimized. Instead of using BINARY_OP, it's using specialized BINARY_OP_MULTIPLY_FLOAT, which is faster when multiplying floats. If you'd run the same thing with an older Python version there wouldn't be any difference.</p>"},{"location":"python-versions/Python-3.11/#improved-type-hints","title":"Improved Type Hints","text":"<p>there are improvements on the type hinting front.</p>"},{"location":"python-versions/Python-3.11/#self-type","title":"Self Type","text":"<p>Python finally has support for a Self type. So, now you can easily type class methods and dunder methods:</p> <pre><code>from typing import Self\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass Car:\n    manufacture: str\n    model: str\n\n    @classmethod\n    def from_dict(cls, car_data: dict[str, str]) -&gt; Self:\n        return cls(manufacture=car_data[\"manufacture\"], model=car_data[\"model\"])\n\n\nprint(Car.from_dict({\"manufacture\": \"Alfa Romeo\", \"model\": \"Stelvio\"}))\n# Car(manufacture='Alfa Romeo', model='Stelvio')\n</code></pre>"},{"location":"python-versions/Python-3.11/#typeddict-notrequired","title":"TypedDict NotRequired","text":"<p>Another improvement is the NotRequired type for typed dictionaries:</p> <pre><code>from typing import TypedDict, NotRequired\n\n\nclass Car(TypedDict):\n    manufacture: str\n    model: NotRequired[str]\n\n\ncar1: Car = {\"manufacture\": \"Alfa Romeo\", \"model\": \"Stelvio\"}  # OK\ncar2: Car = {\"manufacture\": \"Alfa Romeo\"}  # model (model is not required)\ncar3: Car = {\"model\": \"Stelvio\"}  # ERROR (missing required field manufacture)\n</code></pre>"},{"location":"python-versions/Python-3.11/#literal-string-type","title":"Literal String Type","text":"<p>There's also a new LiteralString type that allows literal strings and strings created from other literal strings. This can be used for type checking when executing SQL and shell commands to add another layer of safety for preventing injection attacks.</p> <pre><code>def run_query(sql: LiteralString) -&gt; ...\n    ...\n\ndef caller(\n    arbitrary_string: str,\n    query_string: LiteralString,\n    table_name: LiteralString,\n) -&gt; None:\n    run_query(\"SELECT * FROM students\")       # ok\n    run_query(query_string)                   # ok\n    run_query(\"SELECT * FROM \" + table_name)  # ok\n    run_query(arbitrary_string)               # type checker error\n    run_query(                                # type checker error\n        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n    )\n</code></pre>"},{"location":"python-versions/Python-3.11/#better-error-messages","title":"Better Error Messages","text":"<p>One of the exciting new features is more descriptive tracebacks. Python 3.10 saw some improvements made by introducing better and more descriptive errors. Python 3.11 takes it a step further with improved descriptions of the exact error position. Let's take a look at an example.</p> <pre><code>def average_grade(grades):\n    return sum(grades) / len(grades)\n\n\naverage_grade([])\n</code></pre> <pre><code>Error in Python 3.10:\n\n    return sum(grades) / len(grades)\nZeroDivisionError: division by zero\n\nError in Python 3.11:\n\n    return sum(grades) / len(grades)\n           ~~~~~~~~~~~~^~~~~~~~~~~~~\nZeroDivisionError: division by zero\n</code></pre>"},{"location":"python-versions/Python-3.11/#exception-notes","title":"Exception Notes","text":"<p>add_note was added to BaseExceptions. This allows you to add additional context to an exception after it was created. For example:</p> <pre><code>try:\n    raise ValueError()\nexcept ValueError as exc:\n    exc.add_note(\"When this happened my dog was barking and my kids were sleeping.\")\n    raise\n\n#     raise ValueError()\n# ValueError\n# When this happened my dog was barking and my kids were sleeping.\n</code></pre>"},{"location":"python-versions/Python-3.11/#toml-library","title":"TOML Library","text":"<p>Python now has a library for parsing TOML files called tomllib. Its usage is very similar to that of the built-in json library.</p> <pre><code>[tool.poetry]\nname = \"example\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython = \"^3.11\"\n\n\n[tool.poetry.dev-dependencies]\n\n[build-system]\nrequires = [\"poetry-core&gt;=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n</code></pre> <p>You can load the file like so:</p> <pre><code>import pprint\nimport tomllib\n\nwith open(\"pyproject.toml\", \"rb\") as f:\n    data = tomllib.load(f)\n\npp = pprint.PrettyPrinter(depth=4)\npp.pprint(data)\n\"\"\"\n{'build-system': {'build-backend': 'poetry.core.masonry.api',\n                  'requires': ['poetry-core&gt;=1.0.0']},\n 'tool': {'poetry': {'authors': [],\n                     'dependencies': {'python': '^3.11'},\n                     'description': '',\n                     'dev-dependencies': {},\n                     'name': 'example',\n                     'version': '0.1.0'}}}\n\"\"\"\n</code></pre>"},{"location":"python-versions/Python-3.9/","title":"Python 3.9","text":""},{"location":"python-versions/Python-3.9/#dictionary-unions","title":"Dictionary Unions","text":"<p>Merge dictionaries We now have a merge operator for performing dictionary unions: |. It works the same as a.update(b) or {**a,**b}, with one difference: It works for any instance of the dict subclass</p> <p>You can merge two dictionaries like so:</p> <pre><code>user = {'name': 'John', 'surname': 'Doe'}\naddress = {'street': 'Awesome street 42', 'city': 'Huge city', 'post': '420000'}\n\nuser_with_address = user | address\n\nprint(user_with_address)\n# {'name': 'John', 'surname': 'Doe', 'street': 'Awesome street 42', 'city': 'Huge city', 'post': '420000'}\n</code></pre> <p>Updating dictionaries</p> <p>As for updating, you now have the operator |=. This works in place.</p> <p>You can update the first dictionary with keys and values from the second like so:</p> <pre><code>grades = {'John': 'A', 'Marry': 'B+'}\ngrades_second_try = {'Marry': 'A', 'Jane': 'C-', 'James': 'B'}\n\ngrades |= grades_second_try\n\nprint(grades)\n# {'John': 'A', 'Marry': 'A', 'Jane': 'C-', 'James': 'B'}\n</code></pre>"},{"location":"python-versions/Python-3.9/#generating-random-bytes","title":"Generating Random Bytes","text":"<p>The random library can now be used to generate random bytes via randbytes.</p> <p>For example, to generate ten random bytes:</p> <pre><code>import random\n\nprint(random.Random().randbytes(10))\nb'CO\\x0e\\x0e~\\x12\\x0c\\xa4\\xa0p'\n</code></pre>"},{"location":"python-versions/Python-3.9/#string-methods","title":"String Methods","text":"<p>Two methods were added to the str object:</p> <ol> <li>removeprefix</li> <li>removesuffix</li> </ol>"},{"location":"python-versions/Python-3.9/#removeprefix","title":"removeprefix","text":"<p>This first method removes the inputted string from the beginning of another string.</p> <p>For example:</p> <pre><code>file_name = 'DOCUMENT_001.pdf'\n\nprint(file_name.removeprefix('DOCUMENT_'))\n#  001.pdf\n</code></pre> <p>If the string doesn't start with the input string, a copy of the original string will be returned:</p> <pre><code>file_name = 'DOCUMENT_001.pdf'\n\nprint(file_name.removeprefix('DOC_'))\n# DOCUMENT_001.pdf\n### removesuffix\n</code></pre> <p>Similarly, we can remove the suffix from the selected string with the second method.</p> <p>To remove the .pdf file extension from the file name:</p> <pre><code>file_name = 'DOCUMENT_001.pdf'\n\nprint(file_name.removesuffix('.pdf'))\n# DOCUMENT_001\n\n\nfile_name = 'DOCUMENT_001.pdf'\n\nprint(file_name.removesuffix('.csv'))\n# DOCUMENT_001.pdf\n## IANA Timezone Support\n</code></pre> <p>The zoneinfo module has been added to support the IANA time zone database.</p> <p>For example, to create a time zone\u2013aware timestamp, you can add the tz or tzinfo arguments to the datetime method:</p> <pre><code>import datetime\nfrom zoneinfo import ZoneInfo\n\ndatetime.datetime(2020, 10, 7, 1, tzinfo=ZoneInfo('America/Los_Angeles'))\n# datetime.datetime(2020, 10, 7, 1, 0, tzinfo=zoneinfo.ZoneInfo(key='America/Los_Angeles'))\n</code></pre> <p>You can easily convert between time zones as well:</p> <pre><code>import datetime\nfrom zoneinfo import ZoneInfo\n\nstart = datetime.datetime(2020, 10, 7, 1, tzinfo=ZoneInfo('America/Los_Angeles'))\nstart.astimezone(ZoneInfo('Europe/London'))\ndatetime.datetime(2020, 10, 7, 9, 0, tzinfo=zoneinfo.ZoneInfo(key='Europe/London'))\n</code></pre>"},{"location":"python-versions/Python-3.9/#generic-type-annotations","title":"Generic Type Annotations","text":"<p>From now on you can use generic types for type annotations. Instead of having to use typing.List or typing.Dict, you can use the list or dict built-in collection types as generic types</p> <pre><code>def sort_names(names: list[str]):\n    return sorted(names)\n</code></pre>"},{"location":"python-versions/Python-3.9/#string-replace-fix","title":"String Replace Fix","text":"<p>An issue with string replace for empty strings has been fixed.</p> <p>In previous versions:</p> <pre><code>\"\".replace(\"\", \"prefix\", 1)\n# ''\nFrom now on:\n\n\"\".replace(\"\", \"prefix\", 1)\n# 'prefix'\n</code></pre>"},{"location":"python-versions/python-3.12/","title":"Python 3.12","text":"<p>Python 3.12 was released on October 2nd, 2023.</p> <ol> <li>Syntactic formalization of f-strings - more flexible f-strings</li> <li>A per-interpreter GIL - take full advantage of multiple CPU cores</li> <li>Better error messages - hints for mistakes like not importing a module from the standard library</li> <li>Improved typing<ul> <li>Using <code>TypedDict</code> for more precise <code>**kwargs</code> typing</li> <li>Override decorator for static typing</li> </ul> </li> <li>Comprehension inlining - faster list/dict/set comprehensions</li> </ol>"},{"location":"python-versions/python-3.12/#syntactic-formalization-of-f-strings","title":"Syntactic Formalization of F-Strings","text":"<p>switch between single and double</p> <pre><code>friends = [\"Rolf\", \"Bob\", \"Jen\", \"Anne\"]\nprint(f\"I invited: {\", \".join(friends)}\")\n\n\n\"\"\"\n    print(f\"I invited: {\", \".join(friends)}\")\n                         ^\nSyntaxError: f-string: expecting '}'\n\"\"\"\n</code></pre> <p>you'd need to update your code like:</p> <pre><code>friends = [\"Rolf\", \"Bob\", \"Jen\", \"Anne\"]\nprint(f'I invited: {\", \".join(friends)}')\n\n\n# I invited: Rolf, Bob, Jen, Anne\n</code></pre> <p>You can now also use comments and multiline expressions inside f-strings:</p> <pre><code>users = [{\"id\": 1, \"name\": \"John\"}, {\"id\": 2, \"name\": \"Jane\"}]\n\n\nprint(\n    f\"User IDs: {\", \".join([str(user[\"id\"]) for user in users])\n    # We need to convert IDs to string because join expects string.\n    }\"\n) # o/pUser IDs: 1, 2\n</code></pre> <p>Note:  be careful to not introduce too much complexity into your f-strings. It's easy to go overboard and make them unreadable.</p>"},{"location":"python-versions/python-3.12/#a-per-interpreter-gil","title":"A Per-Interpreter GIL","text":"<p>The Global Interpreter Lock (GIL) is a mutex (or lock) that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once.</p> <p>This lock is necessary mainly because CPython's memory management is not thread-safe.</p> <p>The GIL is controversial because it prevents multithreaded CPython programs from taking full advantage of multiprocessor systems in certain situations.</p> <p>Python 3.12 introduces a per-interpreter GIL. This change will allow Python to take full advantage of multiple CPU cores.</p> <p>Python 3.12 will only support the per-interpreter GIL through the C-API</p> <p></p>"},{"location":"python-versions/python-3.12/#better-error-messages","title":"Better Error Messages","text":"<p>Python 3.12 also brings better error messages. This time, it's about hints for resolving the errors with suggestions like</p> <pre><code>\"Did you mean...\"\n\"Did you forget...\"\n\"Did you mean to use...\"\n</code></pre> <p>Let's take a look at some examples...</p> <pre><code>if os.getenv(\"DEBUG\"):\n    print(\"Debugging is on\")\n\n\n\"\"\"\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nNameError: name 'os' is not defined. Did you forget to import 'os'?\n\"\"\"\n</code></pre> <p>Improved error suggestions for <code>NameError</code> exceptions for instances:</p> <pre><code>class User:\n    def __init__(self, first_name, last_name):\n        self.first_name = first_name\n        self.last_name = last_name\n    def full_name(self):\n        return f\"{self.first_name} {last_name}\"\n\n\nuser = User(\"Jan\", \"Smith\")\nprint(user.full_name())\n\n\n# NameError: name 'last_name' is not defined. Did you mean: 'self.last_name'?\n</code></pre> <p>Improved <code>SyntaxError</code> error message when the user types import x from y instead of from y import x:</p> <pre><code>import datetime from datetime\n\n# SyntaxError: Did you mean to use 'from ... import ...' instead?\n</code></pre> <p>ImportError exceptions raised from failed from  import  statements now include suggestions for the value of  based on the available names in : <pre><code>from datetime import TimeDelta\n\n# ImportError: cannot import name 'TimeDelta' from 'datetime'. Did you mean: 'timedelta'?\n</code></pre>"},{"location":"python-versions/python-3.12/#improved-typing","title":"Improved Typing","text":"<p>The first one is the ability to better type <code>kwargs</code> with <code>TypedDict</code>. Have you ever tried to type <code>kwargs</code> that were of different types? I bet you ended up with Any or some other sub-optimal solution. Function signatures, as introduced by PEP-484, allowed type annotations for <code>kwargs</code> only if they were of the same type. This could be very annoying, when you try to type a bit more evolved codebase. Fortunately, Python 3.12 comes with support to type <code>kwargs</code> with different types by using <code>TypedDict</code>:</p> <pre><code>from typing import TypedDict, Unpack\n\n\nclass OAuthState(TypedDict):\n  name: str\n  user_id: int\n  is_internal: bool\n\n\ndef redirect_to_idp(**kwargs: Unpack[OAuthState]):\n</code></pre> <p>Another improvement worth mentioning is the <code>@override</code> decorator. Have you ever tried to override some method to extend behavior of a class and end up scratching your head when things don't work as expected? This sure has happened to me. For example, I wanted to extend the behavior of a Django REST Framework view, but something was off. It took me quite some time to realize that my method that should override <code>put</code> was called <code>putt</code>. Python 3.12 introduces protection for that via the <code>@override</code> decorator. If a method is decorated with <code>@override</code>, Python type checkers will check if the method is actually overriding something. If not, it will raise an error. This is how it works:</p> <pre><code>from typing import override\n\n\nclass Cat:\n    def meow(self) -&gt; str:\n        return \"meow\"\n\n\nclass EgyptianCat(Cat):\n    @override  # ok: overrides Cat.meow\n    def meow(self) -&gt; str:\n        return \"meow meow\"\n\n\nclass PersianCat(Cat):\n    @override  # type checker error: does not override Cat.mew\n    def mew(self) -&gt; str:\n        return \"meow mew\"\n\n# mypy error\n# error: Method \"mew\" is marked as an override, but no base method was found with this name  [misc]\n</code></pre>"},{"location":"python-versions/python-3.12/#comprehension-inlining","title":"Comprehension Inlining","text":"<p>Python 3.12 also brings a new optimization for list/dict/set comprehensions. Comprehensions are now inlined, which means that they are faster. Instead of creating a new single-use function for each execution, comprehensions are now inlined. This speeds up comprehensions up to 2</p>"},{"location":"python-versions/python-3.13/","title":"Python 3.13","text":"<p>source: https://testdriven.io/blog/python313/ It was released on October 7th, 2024 It will make your Python development even better</p> <ol> <li>Improved interactive interpreter - e.g., multiline editing with history preservation</li> <li>No-GIL, free-threaded Python - utilize all available processing power by running threads in parallel on all available CPUs</li> <li>Improved error messages - more helpful error messages for common mistakes</li> <li>Improved typing - <code>typing.ReadOnly</code> to mark read-only attributes inside typed dicts</li> <li>Improved warnings - new w<code>arnings.deprecated()</code> decorator to emit warnings at runtime and type checking if a deprecated object/function/overload is used</li> <li>Improved argparse - a new <code>deprecated</code> argument was added to support deprecation of command-line options, positional arguments, and subcommands</li> </ol>"},{"location":"python-versions/python-3.13/#1-improved-interactive-interpreter","title":"1. Improved Interactive Interpreter","text":"<p>The new REPL now supports calling REPL-specific commands just by name -- no need to call them as functions anymore.</p> <p>Python &lt; 3.13:</p> <pre><code>&gt;&gt;&gt; exit()\n</code></pre> <p>Python &gt;= 3.13:</p> <pre><code>&gt;&gt;&gt; exit\n</code></pre> <p>Note: The old way of calling them as functions still works.</p> <p>You can now edit multiline statements in the REPL without losing the history of the previous lines.</p> <p>This is a great improvement for debugging and testing code snippets.</p> <p>Using history with Python &lt; 3.13</p> <p>Defining function:</p> <pre><code>&gt;&gt;&gt; def foo():\n...     print('Hello')\n</code></pre> <p>Going through history with up arrow:</p> <pre><code>&gt;&gt;&gt;     print('Hello')\n&gt;&gt;&gt; def foo():\n</code></pre> <p>Using history with Python &gt;= 3.13 Going through history with up arrow:</p> <pre><code>&gt;&gt;&gt; def foo():\n...     print('Hello')\n</code></pre> <p>Now you can go up using uparrow  and eit the functions</p> <p>Prompts and tracebacks are now colored by default. That makes everything much more readable.</p>"},{"location":"python-versions/python-3.13/#no-gil-free-threaded-python","title":"No-GIL, Free-threaded Python","text":"<p>The Global Interpreter Lock (GIL) is a mutex (or lock) that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once.</p> <p>This lock is necessary mainly because CPython's memory management is not thread-safe.</p> <p>The GIL is controversial because it prevents multithreaded CPython programs from taking full advantage of multiprocessor systems in certain situations.</p> <p>CPython finally comes with an option for execution with the GIL disabled.</p> <p>For now, this is only experimental</p> <p>To make use of it, you'll need to install a special version of Python. Anyhow, with that, you can utilize all available processing power by running threads in parallel on all available CPUs.</p>"},{"location":"python-versions/python-3.13/#improved-error-messages","title":"Improved Error Messages","text":"<p>hey've improved error messages for some of the common mistakes. Also, the interpreter now uses color when showing errors inside the terminal. This will make debugging easier and more efficient.</p> <pre><code># math.py\n\nimport math\n\nprint(math.sqrt(25))\n</code></pre> <p>Python &lt; 3.13:</p> <pre><code>$ python math.py\n\nAttributeError: partially initialized module 'math' has no attribute 'sqrt'\n(most likely due to a circular import)\n</code></pre> <p>Python &gt;= 3.13:</p> <pre><code>$ python math.py\n\nAttributeError: module 'math' has no attribute 'sqrt'\n(consider renaming 'math.py' since it has the same name as the standard library\nmodule named 'math' and the import system gives it precedence)\n</code></pre> <p>Another example is when you provide an incorrect keyword argument to a function -- the interpreter will now try to suggest the correct one:</p> <pre><code>#  hello.py\n\ndef say_hello(*, full_name):\n    return f\"Hello, {full_name}!\"\n\nprint(say_hello(fullname=\"Python\"))\n</code></pre> <p>Python &lt; 3.13:</p> <pre><code>$ python hello.py\n\nTypeError: say_hello() got an unexpected keyword argument 'fullname'\n</code></pre> <p>Python &gt;= 3.13:</p> <pre><code>$ python hello.py\n\nTypeError: say_hello() got an unexpected keyword argument 'fullname'.\nDid you mean 'full_name'?\n</code></pre>"},{"location":"python-versions/python-3.13/#improved-typing","title":"Improved Typing","text":"<p>The new typing.ReadOnly type. It can be used to mark read-only attributes inside typed dicts.</p> <p>This is a great way to ensure that some key is not modified by mistake.</p> <pre><code># song.py\n\nfrom typing import ReadOnly, TypedDict\n\nclass Song(TypedDict):\n   name: ReadOnly[str]\n   band: ReadOnly[str]\n   number_of_plays: int\n\ndef count_plays(s: Song) -&gt; None:\n   s[\"number_of_plays\"] += 1  # OK\n   s[\"name\"] = \"New Name\"  # Error\n</code></pre> <pre><code>$ python -m mypy song.py\n\nsong.py:11: error: ReadOnly TypedDict key \"name\"\nTypedDict is mutated  [typeddict-readonly-mutated]\n</code></pre>"},{"location":"python-versions/python-3.13/#improved-warnings","title":"Improved Warnings","text":"<p>Python 3.13 comes with the new warnings.deprecated() decorator.</p> <p>It can be used to emit warnings at runtime if a deprecated object/function/overload is used.</p> <p>This is a great way to inform users that some part of the code is deprecated and should be replaced with a new one.</p> <pre><code># integration.py\n\nfrom warnings import deprecated\n\n@deprecated(\"Use NewIntegration instead\")\nclass LegacyIntegration:\n    pass\n\nclass NewIntegration:\n    pass\n\nLegacyIntegration()\n</code></pre> <pre><code>$ python integration.py\n\nintegration.py:12: DeprecationWarning: Use NewIntegration instead\n  LegacyIntegration()\n</code></pre> <p>Type checkers will also complain when an object is decorated with the warnings.deprecated() decorator</p>"},{"location":"python-versions/python-3.13/#improved-argparse","title":"Improved argparse","text":"<p>It can be used to support deprecation of command-line options, positional arguments, and subcommands.</p> <p>This is a great way to inform users that some part of the CLI is deprecated and should be replaced with a new one.</p> <pre><code># cli.py\n\nimport argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--old\", help=\"Old option\", deprecated=True, required=False)\nparser.add_argument(\"--new\", help=\"New option\", required=False)\n\nargs = parser.parse_args()\n</code></pre> <pre><code>$ python cli.py --old foo\n\ncli.py:  warning: option '--old' is deprecated\n</code></pre>"},{"location":"python-versions/python_3.8/","title":"python 3.8 version enhasment","text":""},{"location":"python-versions/python_3.8/#the-38-version-new-features","title":"The 3.8 version new features","text":"<ol> <li>Warlous Operator</li> <li>Postional only Parameters</li> <li>Fstring Support</li> <li>iSqrt function</li> <li>continue with finally</li> <li>reversed dictionary</li> <li>syntax warning</li> </ol>"},{"location":"python-versions/python_3.8/#python-38-version-enhasment-related-to-f-string","title":"python 3.8 version enhasment  related to f-string","text":"<ul> <li> <p>We can use <code>=</code> symbol f-string for self documentating expressions and it is useful for debugging purposes.</p> <pre><code>x = 10\ny = 10\nprint(f'{x = }')  # =&gt; print(f'x = {x}')\nprint(f'{y = }')  # =&gt; print(f'y = {y}')\n</code></pre> </li> <li> <p>We can also use walrus operator (<code>:=</code>) inside f-string:</p> <pre><code>import math\n\nhalf_radious = 10\n\nprint(f'The Area of circle with radius {(r := 2 * half_radious)} is {math.pi ** r*r }')\n</code></pre> <p>Note: <code>()</code> -&gt; This is important in walrous operator in this example other wise we will get error.</p> <pre><code>print(f'The Area of circle with radius {r := 2 * half_radious} is {math.pi ** r*r }')\n</code></pre> </li> <li> <p>f - string can in python 3.6 version but <code>=</code> and <code>:=</code> operator are allowed inside f-string in python 3.8 version</p> </li> <li> <p><code>%</code> -&gt; formating and <code>str.formate()</code> Not Recommanded.</p> </li> </ul>"},{"location":"python-versions/python_3.8/#f-string","title":"f string","text":"<ul> <li> <p>has performance</p> </li> <li> <p>concise</p> </li> <li>less verbose</li> <li>more readable</li> </ul> <pre><code>class Student:\n    def __init__(self, name, rollno, marks):\n        self.name = name\n        self.rollno = rollno\n        self.marks = marks\n    def __str__(self):\n        return f'Name: {self.name}, RollNo: {self.rollno}, Marks: {self.marks}'\n\n    def __repr__(self):\n        return f'Student Name: {self.name}, Student RollNo: {self.rollno}, Student Marks: {self.marks}'\n\ns = Student('ashish',101,80)\nprint('Information-------&gt; {}'.format(s))\nprint(f'Information-------&gt; {s}')\nprint(f'Information-------&gt; {s!r}')\n</code></pre>"},{"location":"python-versions/python_3.8/#expression-inside-f-string","title":"Expression inside f-string","text":"<p>We can pass expression inside f-string and those expressions will be evaluated at runtime</p> <pre><code>print({8*8})\n</code></pre>"},{"location":"python-versions/python_3.8/#how-to-use-curly-braces-inside-f-string","title":"How to use curly braces inside f-string","text":"<ul> <li> <p>{ =&gt; replacement operator</p> </li> <li> <p>{{=&gt; it is simple of '{'</p> </li> </ul> <pre><code>print(f'{{ is special symbol ')\nprint(f'{{{ is special symbol ')\n</code></pre>"},{"location":"python-versions/python_3.8/#new-syntax-warning-in-python-38-version","title":"New Syntax Warning in python 3.8 version","text":"<ul> <li> <p>In python warning are Exception</p> </li> <li> <p>Python has a syntaxWarning that can warn about doubtful syntax,that is typically not syntaxerror</p> </li> </ul> <pre><code>BaseException\n    \u2514\u2500\u2500 Exception\n        \u2514\u2500\u2500 Warning\n            \u2514\u2500\u2500 SyntaxWarning\n</code></pre> <ol> <li><code>is</code> and <code>is not</code> operators are used for numbers and strings.</li> <li>While creating larger collections, we may miss some elements.</li> </ol>"},{"location":"python-versions/python_3.8/#is-and-is-not-operators-for-numbers-and-strings","title":"is and is not operators for numbers and strings","text":"<p>is operator vs == operator</p> <ul> <li>is operator meant for reference comparsion</li> <li>== operator meant for content comparsion </li> </ul> <p><code>l1 = [10,20,30,40]</code> <code>l2 = [10,20,30,40]</code> <code>print(l1 is l2)</code> <code>print(l1 == l2)</code></p> <ul> <li>A new SyntaxWarning added extraa in 3.8 version which will be raised if we use is and is not operator for number and string literals.</li> <li>It is highly recommended to use == operator instead of is for literal comparsion.</li> <li>While creating large collections, we may miss ',' to alert this, a new syntax warning was added to Python 3.8.</li> </ul> <pre><code>print(6 is 6)\nprint('a' is ' a')\n</code></pre> <ul> <li>python 3.8  = &gt; oct 14 2019</li> <li>python 3.9  = &gt; oct 5 2020</li> </ul> <p>More flexibility to programmer with new features</p>"},{"location":"python-versions/python_3.8/#1-the-warlus-operatorsea-hourse","title":"1. The Warlus operator:(sea hourse)","text":"<p>Syntax <code>:=</code></p> <ul> <li>This operator released as the part of PEP 577</li> <li> <p>PEP =&gt; Python Enhancement Proposals</p> </li> <li> <p>To assign values to the variable as the oasrt of expression itself</p> </li> </ul> <pre><code># Assignment Expression\nnum = [10,20,30,40,50,60]\nlength = len(num)\n\nif length &gt; 3:\n    print('List conatins more than 3 element')\n    print('The length of the list is', length)\n</code></pre> <pre><code>num = [10,20,30,40,50,60]\n\nif (n:=len(num)) &gt; 3:\n    print('List conatins more than 3 element')\n    print('The length of the list is', length)\n</code></pre> <pre><code># Example 2\nheriones = []\n\nherion = input('Enter your Favourit Herione ')\n\nwhile herion != 'done':\n    heriones.append(herion)\n    herion = input('Enter your Favourit Herione ')\n\nprint(heriones)\n</code></pre> <pre><code>heriones = []\n\nwhile (herion := input('Enter your Favourit Herione '))!= 'done':\n    heriones.append(herion)\n\nprint(heriones)\n</code></pre> <pre><code># Read data line by line from abc.txt file and print to the console.\n# FileNotFoundError\n\nf = open('abc.txt')\nline = f.readline()\n\nwhile line != '':\n    print(line, end='')\n    line = f.readline()\n\nf.close()\n</code></pre> <p>The Walrus Operator is a new addition to Python 3.8 and higher. In this article, we\u00e2\u20ac\u2122re going to discuss the Walrus operator and explain it with an example.</p>"},{"location":"python-versions/python_3.8/#introduction","title":"Introduction","text":"<p>Walrus Operator allows you to assign a value to a variable within an expression. This can be useful when you need to use a value multiple times in a loop, but don\u00e2\u20ac\u2122t want to repeat the...</p> <pre><code>numbers = [1, 2, 3, 4, 5]\nwhile (n := len(numbers)) &gt; 0:\n    print(numbers.pop())\n</code></pre> <pre><code>f = open('abc.txt')\n\nwhile (line := f.readline()) != '':\n    print(line, end='')\n\nf.close()\n</code></pre>"},{"location":"python-versions/python_3.8/#the-main-advantage-of-warlous-operator","title":"The main advantage of warlous Operator","text":"<ul> <li>It won't do any new thing</li> <li>It just reduce length of code and readablity will be imporoved</li> </ul>"},{"location":"python-versions/python_3.8/#2-postional-only-parameter","title":"2. Postional-only parameter","text":"<p>python 3.8 version PEP 570</p> <ol> <li>Postional argument<ul> <li>order and number both are implemented</li> </ul> </li> <li>keyword argument<ul> <li>By keyword (parameter name) (a=10, b=20), (b=20, a=10)</li> <li>The number of argument must be match order is notimportant</li> </ul> </li> <li>default arguments:<ul> <li><code>def sum(a=0,b=0)</code> argument with default value</li> <li>`def sum(a=0,b) -- x after a arument, we cannot take non-default argument</li> </ul> </li> <li>varable length argument and all value will be converted into touple<ul> <li>def f(*args)     -print(args)</li> <li>*args and **kwargs</li> </ul> </li> </ol> <pre><code>def calc(a,b): # a,b parameter\n    print(a+b)\n    print(a-b)\n    print(a*b)\n\ncalc(10,20) # arguments\n# Interchangable we can use\n</code></pre>"},{"location":"python-versions/python_3.8/#function-types","title":"Function types","text":"<ol> <li>Postional arguments</li> <li>Keyword arguments</li> <li>default arguments</li> <li>varable legth argument</li> </ol> <pre><code>calc(20,30) # Postional argument\n</code></pre>"},{"location":"python-versions/python_3.8/#1-the-number-of-argument-must-be-match-and-order","title":"1. The number of argument must be match and order","text":""},{"location":"python-versions/python_3.8/#keyword-only-parameters-30-version","title":"Keyword only parameters (3.0 -Version)","text":"<ul> <li> <p>After *, all parameter will become keyword only paramter</p> </li> <li> <p>At the time of calling we should pass values by keyword only</p> </li> </ul> <pre><code>def f1(*,a,b):\n    print(a,b)\n\nf1(a=10, b=20) # valid\nf1(10, 20) # TypeError: f1() takes 0 postional arguments but 2 were given\nf1(10, b=20)  # TypeError: f1() takes 0 positional arguments but 1 positional argument (and 1 keyword-only argument) were given\n</code></pre> <pre><code>def f(a,*,b,c):\n    \"\"\"\n    # For a we can pass value either by postional or keyword But\n      for b,c compulosry we should use keyword\n    \"\"\"\n    print(a,b,c)\n</code></pre> <pre><code>def f2(*,a=10,b,c): # correct\n    ...\ndef f3(a=10,b,c,*): # error SyntaxError: non-default argument follows default argument\n    ...\n</code></pre>"},{"location":"python-versions/python_3.8/#positional-only-arguments-38","title":"Positional only arguments: (3.8)","text":"<ul> <li> <p>We should pass values by postional only arguments</p> </li> <li> <p>/ =&gt; Forword slash</p> </li> <li>All paramters vefore /, will bwcome postional only paramters</li> </ul> <pre><code>def f3(a,b,/):\n    print(a,b)\n\nf3(10,20)\nf3(a=10,b=20)\n</code></pre>"},{"location":"python-versions/python_3.8/#python-38-version-as-the-past-pep-570","title":"Python 3.8 version as the past PEP 570","text":"<ul> <li>a and b are postional only parameteers</li> <li>c and d are postional or keyword paramters</li> <li>e and f are keyword only paramters</li> </ul> <pre><code>def f4(a,b,/,c,d,*,e,f):\n    print(a,b,c,d,e,f)\n\nf4(10,20,30,d=40,e=50,f=60)\nf4(10,b=20,c=30,d=40,e=50,f=60)\nf4(10,20,30,40,50,f=60)\n</code></pre>"},{"location":"python-versions/python_3.8/#f4postional-argspostional-or-keywordkeyword-only-args","title":"f4(postional args,postional or keyword,keyword only args)","text":""},{"location":"python-versions/python_3.8/#problem-without-postional-only-argument","title":"Problem without postional only argument","text":"<p>case - 1:</p> <ul> <li>Without effecting client, we cannont change parameter name based on our requirment</li> </ul> <pre><code>def display(name, arg, roll):\n    print(name, arg, roll)\n\ndisplay('Ravi',14,101)\ndisplay(name = 'Ravi', age = 14, roll = 101)\ndisplay('Ravi', 14, roll = 101)\n</code></pre>"},{"location":"python-versions/python_3.8/#if-arguments-are-postional-only-then-we-can-change-variable-names","title":"If arguments are postional only, then we can change variable names","text":"<pre><code>def display(name, arg, roll,/):\n    print(name, arg, roll)\n</code></pre>"},{"location":"python_tutorials/","title":"Welcome to Python Mastery \ud83d\udc0d","text":"<p>Welcome to Python Mastery, your one-stop platform to learn, practice, and master Python programming. Whether you're a beginner just getting started or preparing for interviews, we've got you covered.</p>"},{"location":"python_tutorials/#what-youll-find-here","title":"\ud83d\ude80 What You'll Find Here","text":"<ul> <li>\ud83d\udc68\u200d\ud83c\udfeb Tutorials: Step-by-step Python lessons with examples and explanations.</li> <li>\ud83d\udcdd Assignments: Practice problems and coding assignments to test your skills.</li> <li>\ud83d\udcbc Interview Questions: Curated Python interview questions and answers to help you prepare confidently.</li> </ul>"},{"location":"python_tutorials/#quick-navigation","title":"\ud83d\udd0d Quick Navigation","text":"<ul> <li>Start Learning Python</li> <li>View Assignments</li> <li>Interview Prep</li> </ul>"},{"location":"python_tutorials/#why-learn-python","title":"\ud83d\udccc Why Learn Python?","text":"<p>Python is one of the most in-demand programming languages used in web development, data science, machine learning, automation, and more. Learning Python opens doors to a wide range of career opportunities.</p>"},{"location":"python_tutorials/#built-with-mkdocs","title":"\ud83d\udee0 Built with MkDocs","text":"<p>This site is built using MkDocs \u2014 a fast, simple static site generator for building project documentation.</p>"},{"location":"python_tutorials/#join-the-community","title":"\ud83d\udc65 Join the Community","text":"<p>Have questions, feedback, or want to contribute? Join our discussion board or contact us.</p> <p>Tip: Bookmark this page and check back often \u2014 we're regularly updating with new tutorials and questions!</p>"},{"location":"python_tutorials/Basic/","title":"Introduction to Python","text":""},{"location":"python_tutorials/Basic/#about-python","title":"About Python","text":"<ul> <li>Python is a general-purpose, high-level programming language.</li> <li>It was developed by Guido van Rossum in 1989 at the National Research Institute in the Netherlands.</li> <li>Python was officially released to the public on February 20, 1991.</li> <li>Python is highly recommended as a first programming language for beginners due to its simplicity.</li> </ul>"},{"location":"python_tutorials/Basic/#examples","title":"Examples","text":""},{"location":"python_tutorials/Basic/#example-1-print-hello-world","title":"Example 1: Print \"Hello World\"","text":"<p>Java:</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}\n</code></pre> <p>C:</p> <pre><code>#include&lt;stdio.h&gt;\nvoid main() {\n    printf(\"Hello World\");\n}\n</code></pre> <p>Python:</p> <pre><code>print(\"Hello World\")\n</code></pre>"},{"location":"python_tutorials/Basic/#example-2-sum-of-two-numbers","title":"Example 2: Sum of Two Numbers","text":"<p>Java:</p> <pre><code>public class Add {\n    public static void main(String[] args) {\n        int a, b;\n        a = 10;\n        b = 20;\n        System.out.println(\"The Sum: \" + (a + b));\n    }\n}\n</code></pre> <p>C:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid main() {\n    int a, b;\n    a = 10;\n    b = 20;\n    printf(\"The Sum: %d\", (a + b));\n}\n</code></pre> <p>Python:</p> <pre><code>a = 10\nb = 20\nprint(\"The Sum:\", (a + b))\n</code></pre>"},{"location":"python_tutorials/Basic/#origin-of-the-name-python","title":"Origin of the Name \"Python\"","text":"<p>The name Python was inspired by the British comedy TV show \"Monty Python\u2019s Flying Circus\" broadcasted by the BBC from 1969 to 1974.</p>"},{"location":"python_tutorials/Basic/#language-influences","title":"Language Influences","text":"<p>Guido van Rossum designed Python by borrowing features from various programming languages:</p> <ul> <li>Functional programming: C</li> <li>Object-oriented programming: C++</li> <li>Scripting features: Perl, Shell Script</li> <li>Modular programming: Modula-3</li> <li>Syntax is mostly derived from C and ABC languages.</li> </ul>"},{"location":"python_tutorials/Basic/#applications-of-python","title":"Applications of Python","text":"<p>Python can be used in a wide variety of areas:</p> <ol> <li>Desktop Applications</li> <li>Web Applications</li> <li>Database Applications</li> <li>Network Programming</li> <li>Game Development</li> <li>Data Analysis</li> <li>Machine Learning</li> <li>Artificial Intelligence</li> <li>Internet of Things (IoT)</li> </ol> <p>Note: Python is used by companies like Google, Microsoft, IBM, Yahoo. It's also used in YouTube, NASA, and New York Stock Exchange.</p>"},{"location":"python_tutorials/Basic/#features-of-python","title":"Features of Python","text":"<ol> <li>Simple and Easy to Learn</li> </ol> <ul> <li>Python code reads like English.</li> <li>Minimal syntax, around 30+ keywords.</li> <li>Fewer lines of code for the same logic compared to other languages.</li> </ul> <ol> <li>Free and Open Source</li> </ol> <ul> <li>No license needed to use Python.</li> <li>Source code is open for modification (e.g., Jython for Java integration).</li> </ul> <ol> <li>High-Level Language</li> </ol> <ul> <li>Programmer-friendly; no need to manage memory or security manually.</li> </ul> <ol> <li>Platform Independent</li> </ol> <ul> <li>Write once, run anywhere (PVM handles platform translation).</li> </ul> <ol> <li>Portable</li> </ol> <ul> <li>Code produces the same result across platforms.</li> </ul> <ol> <li>Dynamically Typed</li> </ol> <ul> <li>No need to declare variable types explicitly.</li> <li>Type is inferred at runtime.</li> </ul> <ol> <li> <p>Supports Both Procedural and Object-Oriented Programming</p> </li> <li> <p>Interpreted Language</p> </li> </ol> <ul> <li>Compilation handled by Python Interpreter.</li> <li>Errors raised at runtime if any.</li> </ul> <ol> <li>Extensible</li> </ol> <ul> <li>Can integrate code from other languages for performance or legacy reuse.</li> </ul> <ol> <li> <p>Embeddable</p> <ul> <li>Python code can be embedded within other languages.</li> </ul> </li> <li> <p>Extensive Library Support</p> </li> </ol> <ul> <li>Large standard library with built-in functions and modules.</li> </ul>"},{"location":"python_tutorials/Basic/#limitations-of-python","title":"Limitations of Python","text":"<ol> <li>Performance</li> </ol> <ul> <li>Slower than compiled languages due to interpretation.</li> </ul> <ol> <li>Not Commonly Used for Mobile Development</li> </ol>"},{"location":"python_tutorials/Basic/#flavors-of-python","title":"Flavors of Python","text":"Flavor Description CPython Standard implementation using C Jython/JPython For Java applications (runs on JVM) IronPython For C#/.NET applications PyPy JIT compiler support for faster performance RubyPython Integrates Python with Ruby AnacondaPython Optimized for data processing and analytics"},{"location":"python_tutorials/Basic/#python-versions","title":"Python Versions","text":"Version Release Date Python 1.0 January 1994 Python 2.0 October 2000 Python 3.0 December 2008 <p>Note: Python 3 does not provide backward compatibility with Python 2. Python 2 programs may not run on Python 3 without modifications.</p> <p>Current Common Versions:</p> <ul> <li>Python 3.13.6</li> <li>Python 3.6.1</li> <li>Python 2.7.13</li> </ul>"},{"location":"python_tutorials/Basic/#76-python-program-to-differentiate-between-type-and-isinstance","title":"76. Python Program to Differentiate Between type() and isinstance()","text":"<pre><code>class Polygon:\n    def sides_no(self):\n        pass\n\nclass Triangle(Polygon):\n    def area(self):\n        pass\n\nobj_polygon = Polygon()\nobj_triangle = Triangle()\n\nprint(type(obj_triangle) == Triangle)    # true\nprint(type(obj_triangle) == Polygon)     # false\n\nprint(isinstance(obj_polygon, Polygon))  # true\nprint(isinstance(obj_triangle, Polygon)) # true\n</code></pre> <p>we see that type() cannot distinguish whether an instance of a class is somehow related to the base class.</p> <ul> <li>In our case, although obj_triangle is an instance of child class Triangle,</li> <li>it is inherited from the base class Polygon. If you want to relate the object of a child class with the base class,</li> <li>you can achieve this with isinstance().</li> </ul>"},{"location":"python_tutorials/Basic/#80-python-program-to-return-multiple-values-from-a-function","title":"80. Python Program to Return Multiple Values From a Function","text":"<pre><code># Example 1: Return values using comma\ndef name():\n    return \"John\",\"Armin\"\n\n# print the tuple with the returned values\nprint(name())\n\n# get the individual items\nname_1, name_2 = name()\nprint(name_1, name_2)\n</code></pre>"},{"location":"python_tutorials/Basic/#88-python-program-to-compute-the-power-of-a-number","title":"88. Python Program to Compute the Power of a Number","text":"1<pre><code># Calculate the power of a number using pow() function\nbase = 3\nexponent = 4\n\nresult = pow(base, exponent)\nprint(\"Answer = \" + str(result))\n</code></pre> <pre><code># Calculate power of a number using a for loop\nbase = 3\nexponent = 4\n\nresult = 1\n\nfor exponent in range(exponent, 0, -1):\n    result *= base\n\nprint(\"Answer = \" + str(result))\n</code></pre> <pre><code># Calculate power of a number using a while loop\nbase = 3\nexponent = 4\n\nresult = 1\n\nwhile exponent != 0:\n    result *= base\n    exponent-=1\n\nprint(\"Answer = \" + str(result))\n</code></pre> <pre><code>base = 3\nexponent = 4\nexponent+=1\nresult =1\n\nwhile exponent:=  exponent-1:\n    result *= base\nresult\n</code></pre> <pre><code>base = 3\nexponent = 4\nresult =1\n\nwhile exponent:\n    result *= base\n    exponent-=1\n\nresult\n</code></pre>"},{"location":"python_tutorials/Basic/#89-python-program-to-count-the-number-of-digits-present-in-a-number","title":"89.  Python Program to Count the Number of Digits Present In a Number","text":"<pre><code>num = 1234567\n\ndef count_digits(n):\n    count = 0\n    while n &gt; 0:\n        n = n // 10\n        count += 1\n    return count\n\ndigit_count = count_digits(abs(num)) \nprint(digit_count)\n</code></pre>"},{"location":"python_tutorials/Data_types/","title":"DATA TYPES","text":"<ul> <li>Data Type represents the type of data present inside a variable.</li> <li>In Python we are not required to specify the type explicitly. Based on value provided, the type will be assigned automatically.</li> <li>Hence Python is dynamically Typed Language</li> </ul>"},{"location":"python_tutorials/Data_types/#python-contains-the-following-inbuilt-data-types","title":"Python contains the following inbuilt data types","text":"<p>Text Type</p> <pre><code>1. **str** \u2192 Strings\n</code></pre> <p>Numeric Types</p> <pre><code>2. int \u2192 Integers\n3. float \u2192 Floating point numbers\n4. complex \u2192 Complex numbers\n</code></pre> <p>Sequence Types</p> <pre><code>5. list \u2192 Ordered, mutable collection\n6. tuple \u2192 Ordered, immutable collection\n7. range \u2192 Sequence of numbers\n</code></pre> <p>Mapping Type</p> <pre><code>8. dict \u2192 Key-value pairs\n</code></pre> <p>Set Types</p> <pre><code>9. set \u2192 Unordered collection of unique items\n10. frozenset \u2192 Immutable set\n</code></pre> <p>Boolean Type</p> <pre><code>11. bool \u2192 True / False\n</code></pre> <p>Binary Types</p> <pre><code>12. bytes \u2192 Immutable byte sequences\n13. bytearray \u2192 Mutable byte sequences\n14. memoryview \u2192 Memory view of binary data.\n</code></pre> <ol> <li>None</li> </ol> <ol> <li> <p>int Data Type:</p> <p>We can use int data type to represent whole numbers (integral values) Eg:</p> <pre><code>a = 10 \ntype(a) #int\n</code></pre> <p>We can represent int values in the following ways</p> <ul> <li>Decimal form</li> <li>Binary form</li> <li>Octal form</li> <li>Hexa decimal form</li> </ul> </li> <li> <p>Float Data Type:</p> <ul> <li>We can use float data type to represent floating point values (decimal values)     Eg:</li> </ul> <pre><code>f = 1.234 \ntype(f) # float\n</code></pre> <ul> <li>We can also represent floating point values by using exponential form (Scientific Notation) Eg:</li> </ul> <pre><code>f = 1.2e3 \n# instead of 'e' we can use 'E' \nprint(f) # 1200.0\n</code></pre> <ul> <li>The main advantage of exponential form is we can represent big values in less memory.</li> </ul> <p>Note: We can represent int values in decimal, binary, octal and hexa decimal forms. But we can represent float values only by using decimal form.</p> </li> <li> <p>Complex Data Type:</p> <ul> <li>A complex number is of the form Eg:</li> </ul> <pre><code>3 + 5j \n10 + 5.5j \n0.5 + 0.1j\n</code></pre> <ul> <li>In the real part if we use int value then we can specify that either by decimal, octal, binary or hexa decimal form.</li> <li>But imaginary part should be specified only by using decimal form.</li> </ul> </li> <li> <p>bool Data Type:</p> <ul> <li>We can use this data type to represent boolean values.</li> <li>The only allowed values for this data type are: True and False</li> <li>Internally Python represents True as 1 and False as 0</li> </ul> <pre><code>b = True \ntype(b) # bool\n\na = 10 \nb = 20 \nc = a&lt;b \nprint(c) # True\n</code></pre> </li> <li> <p>str Data Type:</p> <ul> <li>str represents String data type.</li> <li> <p>A String is a sequence of characters enclosed within single quotes or double quotes.</p> </li> <li> <p>By using single quotes or double quotes we cannot represent multi line string literals.</p> </li> <li>For this requirement we should go for triple single quotes(''') or triple double quotes(\"\"\")</li> <li> <p>We can also use triple quotes to use single quote or double quote in our String. \uf0b7</p> </li> <li> <p>We can embed one string in another string</p> </li> </ul> <pre><code>s1=\"ashish soft\"\n\uf0b7 s1='''ashish soft'''\n\ns1=\"\"\"ashish soft\"\"\"\n\n''' This is \" character''' ' This i \" Character '\n\n'''This \"Python class very helpful\" for java students'''\n</code></pre> </li> </ol>"},{"location":"python_tutorials/Data_types/#slicing-of-strings","title":"Slicing of Strings","text":"<ol> <li>slice means a piece</li> <li>[ ] operator is called slice operator, which can be used to retrieve parts of String.</li> <li>In Python Strings follows zero based index.</li> <li>The index can be either +ve or -ve.</li> <li>+ve index means forward direction from Left to Right</li> <li>-ve index means backward direction from Right to Left</li> </ol> <pre><code>s = \"Ashish\"\n\nprint(s[1])\nprint(s[1:22])\nprint(s[1:])\nprint(s[:4])\nprint(s[:])\nprint(s*3)\n</code></pre> <p>1) In Python the following data types are considered as Fundamental Data types</p> <ol> <li>int</li> <li>float</li> <li>complex</li> <li>bool</li> <li>str</li> </ol>"},{"location":"python_tutorials/Data_types/#type-casting","title":"TYPE CASTING","text":"<ul> <li> <p>We can convert one type value to another type. This conversion is called Typecasting or Type coersion.</p> </li> <li> <p>The following are various inbuilt functions for type casting.</p> </li> </ul> <ol> <li>int()</li> <li>float()</li> <li>complex()</li> <li>bool()</li> <li>str()</li> </ol>"},{"location":"python_tutorials/Data_types/#int-we-can-use-this-function-to-convert-values-from-other-types-to-int","title":"int(): We can use this function to convert values from other types to int","text":"<pre><code>int(123.987)  #123 \nint(10+5j) # TypeError: can't convert complex to int\nint(True) # 1 \nint(False) # 0 \nint(\"10\") # 10 \nint(\"10.5\") # ValueError: invalid literal for int() with base 10: '10.5'\nint(\"ten\") # ValueError: invalid literal for int() with base 10: 'ten' \nint(\"0B1111\") # ValueError: invalid literal for int() with base 10: '0B1111'\n</code></pre> <p>We can convert from any type to int except complex type.</p>"},{"location":"python_tutorials/Data_types/#float-we-can-use-float-function-to-convert-other-type-values-to-float-type","title":"float(): We can use float() function to convert other type values to float type","text":"<pre><code>float(10) # 10.0 3) \nfloat(10+5j) # TypeError: can't convert complex to float \nfloat(True) # 1.0 7) \nfloat(False) # 0.0 9) \nfloat(\"10\") #10.0 \nfloat(\"10.5\") # 10.5 \nfloat(\"ten\") # ValueError: could not convert string to float: 'ten' \nfloat(\"0B1111\") # ValueError: could not convert string to float: '0B1111\n</code></pre> <p>We can convert any type value to float type except complex type.</p>"},{"location":"python_tutorials/Data_types/#bool-we-can-use-this-function-to-convert-other-type-values-to-bool-type","title":"bool(): We can use this function to convert other type values to bool type","text":"<pre><code>bool(0) # False \n2) bool(1) # True \n3) bool(10) # True \n4) bool(10.5) # True \n5) bool(0.178) # True \n6) bool(0.0) # False \n7) bool(10-2j) # True \n8) bool(0+1.5j) # True \n9) bool(0+0j) # False \n10) bool(\"True\") # True \n11) bool(\"False\") # True \n12) bool(\"\") # False\n</code></pre>"},{"location":"python_tutorials/Data_types/#str-we-can-use-this-method-to-convert-other-type-values-to-str-type","title":"str(): We can use this method to convert other type values to str type","text":"<pre><code>str(10) # '10' \nstr(10.5) # '10.5' \nstr(10+5j) # '(10+5j)' \nstr(True) #'True'\n</code></pre>"},{"location":"python_tutorials/Data_types/#fundamental-data-types-vs-immutability","title":"Fundamental Data Types vs Immutability","text":"<ul> <li>All Fundamental Data types are immutable. i.e once we creates an object,we cannot perform any changes in that object. If we are trying to change then with those changes a new object will be created. This non-chageable behaviour is called immutability.</li> <li>In Python if a new object is required, then PVM won\u2019t create object immediately. First it will check is any object available with the required content or not. If available then existing object will be reused. If it is not available then only a new object will be created. The advantage of this approach is memory utilization and performance will be improved.</li> <li>But the problem in this approach is, several references pointing to the same object, by using one reference if we are allowed to change the content in the existing object then the remaining references will be effected. To prevent this immutability concept is required. According to this once creates an object we are not allowed to change content. If we are trying to change with those changes a new object will be created.</li> </ul> <ol> <li>List Data Type:</li> </ol> <p>If we want to represent a group of values as a single entity where insertion order required to preserve and duplicates are allowed then we should go for list data type.</p> <ul> <li>Insertion Order is preserved</li> <li>Heterogeneous Objects are allowed</li> <li>Duplicates are allowed</li> <li>Growable in nature</li> <li>Values should be enclosed within square brackets</li> </ul> <pre><code>list=[10,10.5,'ashish',True,10]\nprint(list) # [10,10.5,'ashish',True,10]\n</code></pre> <p>list is growable in nature. i.e based on our requirement we can increase or decrease the Note: An ordered, mutable, heterogenous collection of eleemnts is nothing but list,where duplicates also allowed.</p> <ol> <li>Tuple Data Type:</li> </ol> <ul> <li> <p>tuple data type is exactly same as list data type except that it is immutable.i.e we cannot chage values.</p> </li> <li> <p>Tuple elements can be represented within parenthes</p> </li> </ul> <pre><code>t=(10,20,30,40) \ntype(t) # &lt;class 'tuple'&gt;\n\nt[0]=100 # TypeError: 'tuple' object does not support item assignment \nt.append(\"ashish\")\n</code></pre> <p>Note: tuple is the read only version of list</p> <ol> <li>Range Data Type:</li> </ol> <ul> <li>range Data Type represents a sequence of numbers.</li> <li>The elements present in range Data type are not modifiable. i.e range Data type is immutable.</li> </ul> <ol> <li>set Data Type:</li> </ol> <ul> <li> <p>If we want to represent a group of values without duplicates where order is not important then we should go for set Data Type.</p> </li> <li> <p>Insertion order is not preserved</p> </li> <li>Duplicates are not allowed</li> <li>Heterogeneous objects are allowed</li> <li>Index concept is not applicable</li> <li>It is mutable collection</li> <li>Growable in nature</li> </ul> <pre><code> s={100,0,10,200,10,'ashish'} \n s # {0, 100, 'ashish', 200, 10} \n s[0] # TypeError: 'set' object does not support indexing\n</code></pre> <ul> <li>set is growable in nature, based on our requirement we can increase or decrease the size.</li> </ul> <pre><code>s.add(60) \ns # {0, 100, 'ashish', 200, 10, 60}\n\ns.remove(100) \ns # {0, 'ashish', 200, 10, 60}\n</code></pre> <ol> <li>frozenset Data Type:</li> </ol> <ul> <li>It is exactly same as set except that it is immutable.</li> <li>Hence we cannot use add or remove functions.</li> </ul> <pre><code>s={10,20,30,40} \n\nfs=frozenset(s) 3\ntype(fs) #  &lt;class 'frozenset'&gt;\n\nfs # frozenset({40, 10, 20, 30}) \n\nfor i in fs:print(i)\n</code></pre> <ol> <li>dict Data Type: If we want to represent a group of values as key-value pairs then we should go for dict data type.</li> </ol> <pre><code>d = {101:'ashish',102:'ravi',103:'shiva'}\n</code></pre> <ul> <li>Duplicate keys are not allowed but values can be duplicated. If we are trying to insert an entry with duplicate key then old value will be replaced with new value.</li> </ul> <pre><code>d={101:'ashish',102:'ravi',103:'shiva'} \n\nd[101]='sunny' \nd # {101: 'sunny', 102: 'ravi', 103: 'shiva'} \n# We can create empty dictionary as follows \nd={ } # We can add key-value pairs as follows \nd['a']='apple' \nd['b']='banana' \n\nprint(d)\n</code></pre> <ol> <li>None Data Type:</li> </ol> <ul> <li>None means nothing or No value associated.</li> </ul>"},{"location":"python_tutorials/Dict/","title":"DICT","text":"<p>In Python, the term \"hashable\" is used to describe an object that has a hash value that remains constant during its lifetime. In the context of dictionaries, hashable objects are critical because they are used as keys.</p>"},{"location":"python_tutorials/Dict/#what-does-hashable-mean","title":"What Does Hashable Mean?","text":"<ol> <li> <p>Hash Value:    A hash value is a fixed-size integer that uniquely identifies an object, generated by the <code>hash()</code> function.  </p> </li> <li> <p>Immutability:    To be hashable, an object must be immutable. This ensures that its hash value does not change over time, which is a key requirement for dictionary keys.</p> </li> <li> <p>Equality and Hashing:    Hashable objects must implement the <code>__hash__()</code> method to compute the hash value and the <code>__eq__()</code> method for equality checks. Python dictionaries use these methods to organize and retrieve keys efficiently.</p> </li> </ol>"},{"location":"python_tutorials/Dict/#why-hashable-is-important-for-dictionaries","title":"Why Hashable Is Important for Dictionaries","text":"<ul> <li> <p>Key Uniqueness:   Dictionary keys must be unique. Python uses the hash value of a key to quickly determine where to store or find a value in the dictionary.</p> </li> <li> <p>Efficient Lookups:   The hash value allows the dictionary to find a key in O(1) time complexity on average.</p> </li> </ul>"},{"location":"python_tutorials/Dict/#hashable-objects","title":"Hashable Objects","text":"<p>Objects that are immutable (and hence hashable) include:</p> <ul> <li>Strings:  </li> </ul> <pre><code>my_dict = {\"name\": \"Alice\"}  # 'name' is hashable\n</code></pre> <ul> <li>Numbers (int, float, etc.):  </li> </ul> <pre><code>my_dict = {42: \"Answer\"}  # 42 is hashable\n</code></pre> <ul> <li>Tuples (if all elements are hashable):  </li> </ul> <pre><code>my_dict = {(1, 2): \"coordinates\"}  # (1, 2) is hashable\n</code></pre>"},{"location":"python_tutorials/Dict/#unhashable-objects","title":"Unhashable Objects","text":"<p>Objects that are mutable (and hence not hashable) include:</p> <ul> <li>Lists:   Lists are mutable and cannot be used as dictionary keys.  </li> </ul> <pre><code>my_dict = {[1, 2]: \"List\"}  # Raises TypeError: unhashable type: 'list'\n</code></pre> <ul> <li>Sets:   Like lists, sets are mutable and unhashable.  </li> </ul> <pre><code>my_dict = {set([1, 2]): \"Set\"}  # Raises TypeError\n</code></pre>"},{"location":"python_tutorials/Dict/#custom-hashable-objects","title":"Custom Hashable Objects","text":"<p>You can make a custom object hashable by defining the <code>__hash__()</code> and <code>__eq__()</code> methods.</p>"},{"location":"python_tutorials/Dict/#example","title":"Example","text":"<pre><code>class MyHashableClass:\n    def __init__(self, value):\n        self.value = value\n\n    def __hash__(self):\n        return hash(self.value)  # Use the hash of 'value'\n\n    def __eq__(self, other):\n        return isinstance(other, MyHashableClass) and self.value == other.value\n\n# Using custom hashable object as dictionary key\nkey = MyHashableClass(42)\nmy_dict = {key: \"Custom Object\"}\nprint(my_dict[key])  # Output: Custom Object\n</code></pre>"},{"location":"python_tutorials/Dict/#key-points-in-the-context-of-dictionaries","title":"Key Points in the Context of Dictionaries","text":"<ol> <li>A dictionary key must be hashable.</li> <li>Hashable objects allow Python to store dictionary keys in a hash table for fast lookups.</li> <li>If you attempt to use an unhashable object as a key, Python will raise a <code>TypeError</code>.</li> </ol>"},{"location":"python_tutorials/Dict/#example_1","title":"Example","text":"<pre><code># Hashable example\nhashable_key = \"name\"\nmy_dict = {hashable_key: \"Alice\"}\nprint(my_dict[hashable_key])  # Output: Alice\n\n# Unhashable example\nunhashable_key = [1, 2, 3]  # A list\nmy_dict = {unhashable_key: \"List\"}  # Raises TypeError\n</code></pre> <p>By ensuring that objects used as dictionary keys are hashable, Python maintains the efficiency and reliability of its dictionary implementation.</p>"},{"location":"python_tutorials/Dict/#python-dictionary-data-structure","title":"\ud83d\udcd8 Python Dictionary Data Structure","text":"<p>In Python, <code>List</code>, <code>Tuple</code>, and <code>Set</code> are used to represent a group of individual objects as a single entity.</p> <p>However, if we want to represent a group of objects as key-value pairs, we should use a Dictionary.</p>"},{"location":"python_tutorials/Dict/#examples-of-dictionary-use-cases","title":"Examples of Dictionary Use Cases","text":"<ul> <li><code>rollno \u2192 name</code></li> <li><code>phone number \u2192 address</code></li> <li><code>IP address \u2192 domain name</code></li> </ul>"},{"location":"python_tutorials/Dict/#key-characteristics-of-dictionaries","title":"\ud83d\udd11 Key Characteristics of Dictionaries","text":"<ul> <li>Duplicate keys are not allowed, but values can be duplicated.</li> <li>Heterogeneous objects are allowed as both keys and values.</li> <li>Insertion order is preserved (since Python 3.7+).</li> <li>Dictionaries are mutable (modifiable).</li> <li>Dictionaries are dynamic (can grow/shrink in size).</li> <li>Indexing and slicing are not applicable.</li> <li> <p>In other languages:</p> </li> <li> <p>Known as Map in C++ and Java.</p> </li> <li>Known as Hash in Perl and Ruby.</li> </ul>"},{"location":"python_tutorials/Dict/#creating-a-dictionary","title":"\ud83d\udee0\ufe0f Creating a Dictionary","text":""},{"location":"python_tutorials/Dict/#creating-an-empty-dictionary","title":"Creating an Empty Dictionary","text":"<pre><code>d = {}\n# or\nd = dict()\n</code></pre>"},{"location":"python_tutorials/Dict/#adding-elements","title":"Adding Elements","text":"<pre><code>d[100] = \"Durga\"\nd[200] = \"Ravi\"\nd[300] = \"Shiva\"\nprint(d)\n# Output: {100: 'Durga', 200: 'Ravi', 300: 'Shiva'}\n</code></pre>"},{"location":"python_tutorials/Dict/#creating-with-predefined-data","title":"Creating with Predefined Data","text":"<pre><code>d = {100: 'Durga', 200: 'Ravi', 300: 'Shiva'}\n</code></pre>"},{"location":"python_tutorials/Dict/#accessing-dictionary-elements","title":"\ud83d\udd0d Accessing Dictionary Elements","text":"<pre><code>d = {100: 'Durga', 200: 'Ravi', 300: 'Shiva'}\nprint(d[100])  # Output: Durga\nprint(d[300])  # Output: Shiva\n</code></pre>"},{"location":"python_tutorials/Dict/#handling-missing-keys","title":"Handling Missing Keys","text":"<pre><code># Raises KeyError\nprint(d[400])\n\n# Use `in` operator (Python 3)\nif 400 in d:\n    print(d[400])\n</code></pre>"},{"location":"python_tutorials/Dict/#program-store-and-display-student-records","title":"\ud83e\uddea Program: Store and Display Student Records","text":"<pre><code>rec = {}\nn = int(input(\"Enter number of students: \"))\nfor i in range(n):\n    name = input(\"Enter Student Name: \")\n    marks = input(\"Enter % of Marks of Student: \")\n    rec[name] = marks\n\nprint(\"Name of Student\", \"\\t\", \"% of Marks\")\nfor name in rec:\n    print(\"\\t\", name, \"\\t\\t\", rec[name])\n</code></pre>"},{"location":"python_tutorials/Dict/#updating-dictionary-elements","title":"\u270f\ufe0f Updating Dictionary Elements","text":"<pre><code>d = {100: \"Durga\", 200: \"Ravi\", 300: \"Shiva\"}\nd[400] = \"Pavan\"     # Adds new key\nd[100] = \"Sunny\"     # Updates value for key 100\nprint(d)\n</code></pre>"},{"location":"python_tutorials/Dict/#deleting-elements-from-a-dictionary","title":"\u274c Deleting Elements from a Dictionary","text":""},{"location":"python_tutorials/Dict/#delete-by-key","title":"Delete by Key","text":"<pre><code>del d[100]\n</code></pre>"},{"location":"python_tutorials/Dict/#clear-all-entries","title":"Clear All Entries","text":"<pre><code>d.clear()\n</code></pre>"},{"location":"python_tutorials/Dict/#delete-entire-dictionary","title":"Delete Entire Dictionary","text":"<pre><code>del d\n</code></pre>"},{"location":"python_tutorials/Dict/#dictionary-built-in-functions","title":"\u2699\ufe0f Dictionary Built-in Functions","text":""},{"location":"python_tutorials/Dict/#1-dict","title":"1. <code>dict()</code>","text":"<pre><code>d = dict()\nd = dict({100: \"Durga\", 200: \"Ravi\"})\nd = dict([(100, \"Durga\"), (200, \"Shiva\")])\n</code></pre>"},{"location":"python_tutorials/Dict/#2-len","title":"2. <code>len()</code>","text":"<pre><code>len(d)\n</code></pre>"},{"location":"python_tutorials/Dict/#3-clear","title":"3. <code>clear()</code>","text":"<pre><code>d.clear()\n</code></pre>"},{"location":"python_tutorials/Dict/#4-get","title":"4. <code>get()</code>","text":"<pre><code>d.get(key)                 # Returns value or None\nd.get(key, default_value)  # Returns value or default\n</code></pre>"},{"location":"python_tutorials/Dict/#5-pop","title":"5. <code>pop()</code>","text":"<pre><code>d.pop(key)  # Removes and returns the value\n</code></pre>"},{"location":"python_tutorials/Dict/#6-popitem","title":"6. <code>popitem()</code>","text":"<pre><code>d.popitem()  # Removes and returns an arbitrary item\n</code></pre>"},{"location":"python_tutorials/Dict/#7-keys","title":"7. <code>keys()</code>","text":"<pre><code>d.keys()\n</code></pre>"},{"location":"python_tutorials/Dict/#8-values","title":"8. <code>values()</code>","text":"<pre><code>d.values()\n</code></pre>"},{"location":"python_tutorials/Dict/#9-items","title":"9. <code>items()</code>","text":"<pre><code>d.items()  # Returns key-value pairs\n</code></pre>"},{"location":"python_tutorials/Dict/#10-copy","title":"10. <code>copy()</code>","text":"<pre><code>d2 = d.copy()\n</code></pre>"},{"location":"python_tutorials/Dict/#11-setdefault","title":"11. <code>setdefault()</code>","text":"<pre><code>d.setdefault(key, value)\n</code></pre>"},{"location":"python_tutorials/Dict/#12-update","title":"12. <code>update()</code>","text":"<pre><code>d.update(other_dict)\n</code></pre>"},{"location":"python_tutorials/Dict/#program-sum-of-dictionary-values","title":"\ud83d\udca1 Program: Sum of Dictionary Values","text":"<pre><code>d = eval(input(\"Enter dictionary: \"))\ns = sum(d.values())\nprint(\"Sum = \", s)\n</code></pre>"},{"location":"python_tutorials/Dict/#example_2","title":"Example","text":"<pre><code>Input: {'A': 100, 'B': 200, 'C': 300}\nOutput: Sum = 600\n</code></pre>"},{"location":"python_tutorials/Dict/#program-count-character-occurrences","title":"\ud83d\udd01 Program: Count Character Occurrences","text":"<pre><code>word = input(\"Enter any word: \")\nd = {}\nfor char in word:\n    d[char] = d.get(char, 0) + 1\n\nfor k, v in d.items():\n    print(k, \"occurred\", v, \"times\")\n</code></pre>"},{"location":"python_tutorials/Dict/#program-count-vowel-occurrences","title":"\ud83d\udd20 Program: Count Vowel Occurrences","text":"<pre><code>word = input(\"Enter any word: \")\nvowels = {'a', 'e', 'i', 'o', 'u'}\nd = {}\n\nfor char in word:\n    if char in vowels:\n        d[char] = d.get(char, 0) + 1\n\nfor k, v in sorted(d.items()):\n    print(k, \"occurred\", v, \"times\")\n</code></pre>"},{"location":"python_tutorials/Dict/#program-student-marks-query-system","title":"\ud83e\uddd1\u200d\ud83c\udf93 Program: Student Marks Query System","text":"<pre><code>n = int(input(\"Enter the number of students: \"))\nd = {}\n\nfor _ in range(n):\n    name = input(\"Enter Student Name: \")\n    marks = input(\"Enter Student Marks: \")\n    d[name] = marks\n\nwhile True:\n    name = input(\"Enter Student Name to get Marks: \")\n    marks = d.get(name, -1)\n    if marks == -1:\n        print(\"Student Not Found\")\n    else:\n        print(\"The Marks of\", name, \"are\", marks)\n\n    option = input(\"Do you want to find another student marks? [Yes/No]: \")\n    if option.lower() == \"no\":\n        break\n\nprint(\"Thanks for using our application!\")\n</code></pre>"},{"location":"python_tutorials/Dict/#43-python-program-to-count-the-number-of-each-vowel","title":"43. Python Program to Count the Number of Each Vowel","text":"<pre><code># Program to count the number of each vowels\n\n# string of vowels\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\n# make it suitable for caseless comparisions\nip_str = ip_str.casefold()\n\n# make a dictionary with each vowel a key and value 0\ncount = {}.fromkeys(vowels,0)\n\n# count the vowels\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n</code></pre> <p>{'a': 2, 'e': 5, 'i': 3, 'o': 5, 'u': 3}</p> <pre><code># Using a list and a dictionary comprehension\n# Using dictionary and list comprehension\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\n# make it suitable for caseless comparisions\nip_str = ip_str.casefold()\n\n# count the vowels\ncount = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}\n\nprint(count)\n</code></pre> <pre><code>vowels = { \"a\":0, \"e\":0, \"i\":0, \"o\":0, \"u\":0 }\n\ns = \"ashish Bindru\"\n\nfor word in s:\n    if word in vowels:\n        vowels[word]+=1\n\nvowels\n</code></pre> <pre><code>vowels = { \"a\":0, \"e\":0, \"i\":0, \"o\":0, \"u\":0 }\n\ns = \"ashish Bindru\"\n\nvowels =  {word:s.count(word) for word in s if word in vowels}\n\nvowels\n</code></pre> <pre><code>vowels = { \"a\":0, \"e\":0, \"i\":0, \"o\":0, \"u\":0 }\n\ns = \"ashish Bindru\"\n\nvowels = {word: s.count(word) for word in 'aeiou'}\nvowels\n</code></pre> <pre><code>w = \"ashish Bindru\"\n\ns=set(w) \n\nv={'a','e','i','o','u'} \nd=s.intersection(v) \n\nprint(\"The different vowel present in\",w,\"are\",d)\n</code></pre> <pre><code>s = \"ashish Bindru\"\n\nv=\"aeiou\" \n\nfor w in v:\n    print(s.count(w))\n# print(\"The different vowel present in\",w,\"are\",d)\n</code></pre>"},{"location":"python_tutorials/Dict/#48-python-program-to-merge-two-dictionaries","title":"48. Python Program to Merge Two Dictionaries","text":"<pre><code>dict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\nmerged_dict = dict1 | dict2\nprint(merged_dict)\n</code></pre> <pre><code>dict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\nmerged_dict = {**dict1, **dict2}\nprint(merged_dict)\n</code></pre> <pre><code>dict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\nmerged_dict = dict1.copy()\nmerged_dict.update(dict2)\nprint(merged_dict)\n</code></pre> <pre><code>dict1.update(dict2)\ndict1\n</code></pre>"},{"location":"python_tutorials/Dict/#53-python-program-to-iterate-over-dictionaries-using-for-loop","title":"53. Python Program to Iterate Over Dictionaries Using for Loop","text":"<pre><code># Example 1: Access both key and value using items()\ndt = {'a': 'juice', 'b': 'grill', 'c': 'corn'}\n\nfor key, value in dt.items():\n    print(key, value)\n</code></pre> <p>a juice b grill c corn</p> <pre><code># Example 2: Access both key and value without using items()\ndt = {'a': 'juice', 'b': 'grill', 'c': 'corn'}\n\nfor key in dt:\n    print(key, dt[key])\n</code></pre>"},{"location":"python_tutorials/Dict/#54-python-program-to-sort-a-dictionary-by-value","title":"54. Python Program to Sort a Dictionary by Value","text":"<pre><code># Example 1: Sort the dictionary based on values\ndt = {5:4, 1:6, 6:3}\n\nsorted_dt = {key: value for key, value in sorted(dt.items(), key=lambda item: item[1])}\n\nprint(sorted_dt)\n</code></pre> <p>{6: 3, 5: 4, 1: 6}</p> <pre><code># Example 2: Sort only the values\ndt = {5:4, 1:6, 6:3}\n\nsorted_dt_value = sorted(dt.values())\nprint(sorted_dt_value)\n</code></pre> <p>[3, 4, 6]</p>"},{"location":"python_tutorials/Dict/#59-python-program-to-check-if-a-key-is-already-present-in-a-dictionary","title":"59. Python Program to Check if a Key is Already Present in a Dictionary","text":"<pre><code># Using in keyword\nmy_dict = {1: 'a', 2: 'b', 3: 'c'}\n\nif 2 in my_dict:\n    print(\"present\")\n</code></pre>"},{"location":"python_tutorials/Dict/#75-python-program-to-convert-two-lists-into-a-dictionary","title":"75. Python Program to Convert Two Lists Into a Dictionary","text":"<p>The zip() function takes iterables (can be zero or more), aggregates them in a tuple, and returns it.</p> <pre><code>keys = [\"k\",\"l\",\"m\"]\nvalues = [\"a\", \"s\", \"h\",\"i\"]\n\ndict(zip(keys, values))\n</code></pre> <p>output</p> <p>{'k': 'a', 'l': 's', 'm': 'h'}</p> <pre><code># Example 2: Using list comprehension\nindex = [1, 2, 3]\nlanguages = ['python', 'c', 'c++']\n\ndictionary = {k: v for k, v in zip(index, languages)}\nprint(dictionary)\n</code></pre> <p>output:</p> <p>{1: 'python', 2: 'c', 3: 'c++'}</p>"},{"location":"python_tutorials/Enum/","title":"ENUM","text":""},{"location":"python_tutorials/Enum/#examples","title":"EXAMPLES","text":""},{"location":"python_tutorials/Enum/#79-python-program-to-represent-enum","title":"79. Python Program to Represent enum","text":"<pre><code># Using enum module\nfrom enum import Enum\n\nclass Day(Enum):\n    MONDAY = 1\n    TUESDAY = 2\n    WEDNESDAY = 3\n\n# print the enum member\nprint(Day.MONDAY)\n\n# get the name of the enum member\nprint(Day.MONDAY.name)\n\n# get the value of the enum member\nprint(Day.MONDAY.value)\n</code></pre>"},{"location":"python_tutorials/Exception/","title":"Exception","text":""},{"location":"python_tutorials/Exception/#examples","title":"examples","text":""},{"location":"python_tutorials/Exception/#56-python-program-to-catch-multiple-exceptions-in-one-line","title":"56. Python Program to Catch Multiple Exceptions in One Line","text":"Multiple exceptions as a parenthesized tuple<pre><code>string = input()\n\ntry:\n    num = int(input())\n    print(string+num)\nexcept (TypeError, ValueError) as e:\n    print(e)\n</code></pre>"},{"location":"python_tutorials/File/","title":"FILE HANDLING","text":"<ul> <li>As the part of programming requirement, we have to store our data permanently for future purpose. For this requirement we should go for files.</li> <li>Files are very common permanent storage areas to store our data.</li> </ul>"},{"location":"python_tutorials/File/#types-of-files","title":"Types of Files","text":"<p>There are 2 types of files</p> <ol> <li>Text Files: Usually we can use text files to store character data Eg: abc.txt</li> <li>Binary Files: Usually we can use binary files to store binary data like images,video files, audio files etc...</li> </ol>"},{"location":"python_tutorials/File/#opening-a-file","title":"Opening a File","text":"<ul> <li>Before performing any operation (like read or write) on the file,first we have to open that file.For this we should use Python's inbuilt function open()</li> <li>But at the time of open, we have to specify mode,which represents the purpose of opening file.</li> <li><code>f = open(filename, mode)</code></li> <li><code>f = open(\"abc.txt\",\"w\")</code></li> <li>We are opening abc.txt file for writing data.</li> </ul> <p>Note: All the above modes are applicable for text files. If the above modes suffixed with 'b' then these represents for binary files.</p> <ul> <li>Eg: rb,wb,ab,r+b,w+b,a+b,xb</li> </ul>"},{"location":"python_tutorials/File/#closing-a-file","title":"Closing a File","text":"<p>After completing our operations on the file, it is highly recommended to close the file.</p> <ul> <li>For this we have to use close() function.</li> <li><code>f.close()</code></li> </ul>"},{"location":"python_tutorials/File/#the-allowed-modes-in-python-are","title":"The allowed modes in Python are","text":"<ol> <li>r: open an existing file for read operation. The file pointer is positioned at the beginning of the file.If the specified file does not exist then we will get FileNotFoundError.This is default mode.</li> <li>w: open an existing file for write operation. If the file already contains some data then it will be overridden. If the specified file is not already avaialble then this mode will create that file.</li> <li>a: open an existing file for append operation. It won't override existing data.If the specified file is not already avaialble then this mode will create a new file.</li> <li>r+: To read and write data into the file. The previous data in the file will not be deleted.The file pointer is placed at the beginning of the file. 5) w+ \uf0e0 To write and read data. It will override existing data.</li> <li>a+: To append and read data from the file.It wont override existing data.</li> <li>x: To open a file in exclusive creation mode for write operation. If the file already exists then we will get FileExistsError.</li> </ol>"},{"location":"python_tutorials/File/#various-properties-of-file-object","title":"Various Properties of File Object","text":"<p>Once we opend a file and we got file object, we can get various details related to that file by using its properties.</p> <ul> <li>name: Name of opened file</li> <li>mode: Mode in which the file is opened</li> <li>closed: Returns boolean value indicates that file is closed or not</li> <li>readable(): Retruns boolean value indicates that whether file is readable or not</li> <li>writable(): Returns boolean value indicates that whether file is writable or not.</li> </ul> <pre><code>f=open(\"abc.txt\",'w') \n\nprint(\"File Name: \",f.name)  # abc.txt\nprint(\"File Mode: \",f.mode)  # w\nprint(\"Is File Readable: \",f.readable()) # False\nprint(\"Is File Writable: \",f.writable()) # True\nprint(\"Is File Closed : \",f.closed)      # False\nf.close()\nprint(\"Is File Closed : \",f.closed)      # True\n</code></pre>"},{"location":"python_tutorials/File/#writing-data-to-text-files","title":"Writing Data to Text Files","text":"<p>We can write character data to the text files by using the following 2 methods.</p> <ol> <li>write(str)</li> <li>writelines(list of lines)</li> </ol> write(str)<pre><code>f=open(\"abcd.txt\",'w') \n\nf.write(\"Durga\\n\") \nf.write(\"Software\\n\") \nf.write(\"Solutions\\n\") \n\nprint(\"Data written to the file successfully\") \nf.close()\n</code></pre> <p>Note: In the above program, data present in the file will be overridden everytime if we run the program. Instead of overriding if we want append operation then we should open the file as follows.</p> writelines(list)<pre><code>f=open(\"abcd.txt\",'w') \n\nlist=[\"sunny\\n\",\"bunny\\n\",\"vinny\\n\",\"chinny\"] \n\nf.writelines(list) \n\nprint(\"List of lines written to the file successfully\") \n\nf.close()\n</code></pre> <p>Note: While writing data by using write() methods, compulsory we have to provide line seperator(\\n), otherwise total data should be written to a single line.</p>"},{"location":"python_tutorials/File/#reading-character-data-from-text-files","title":"Reading Character Data from Text Files","text":"<p>We can read character data from text file by using the following read methods.</p> <ul> <li>read(): To read total data from the file</li> <li>read(n): To read 'n' characters from the file</li> <li>readline(): To read only one line</li> <li>readlines(): To read all lines into a list</li> </ul> To read total data from the file<pre><code>f=open(\"abcd.txt\",'r') \n\ndata=f.read()\nprint(data) \nf.close()\n# o/p\n# sunny\n# bunny\n# vinny\n# chinny\n</code></pre> read(n): Eg 2: To read only first 10 characters:<pre><code>f=open(\"abcd.txt\",'r') \n\ndata=f.read(10) \nprint(data)\nf.close()\n# o/p\n# sunny\n# bunn\n</code></pre> Eg 3 readline(): To read data line by line:<pre><code>f=open(\"abcd.txt\",'r')\n\nline1=f.readline()\nprint(line1,end='') # sunny\n\nline2=f.readline() \nprint(line2,end='') # bunny\n\nline3=f.readline() \nprint(line3,end='') # vinny\n\nf.close()\n</code></pre> Eg 4: To read all lines into list:<pre><code>f=open(\"abcd.txt\",'r') \n\nlines=f.readlines()\nprint(lines,end='')\n\nf.close() # ['sunny\\n', 'bunny\\n', 'vinny\\n', 'chinny']\n</code></pre> Eg 5:<pre><code>f=open(\"abcd.txt\",\"r\")\n\nprint(f.read(3)) \nprint(f.readline())\nprint(f.read(4)) \nprint(\"Remaining data\") \nprint(f.read())\n\no/p\nsun\nny\n\nbunn\nRemaining data\ny\nvinny\nchinny\n</code></pre>"},{"location":"python_tutorials/File/#the-with-statement","title":"The with Statement","text":"<ul> <li>The with statement can be used while opening a file. We can use this to group file operation statements within a block.</li> <li>The advantage of with statement is it will take care closing of file,after completing all operations automatically even in the case of exceptions also, and we are not required to close explicitly.</li> </ul> with<pre><code>with open(\"abc.txt\",\"w\") as f: \n    f.write(\"Durga\\n\")\n    f.write(\"Software\\n\") \n    f.write(\"Solutions\\n\") \n    print(\"Is File Closed: \",f.closed) # False\n\nprint(\"Is File Closed: \",f.closed) # True\n</code></pre>"},{"location":"python_tutorials/File/#the-seek-and-tell-methods","title":"The seek() and tell() methods","text":""},{"location":"python_tutorials/File/#tell","title":"tell()","text":"<ul> <li> <p>We can use tell() method to return current position of the cursor(file pointer) from beginning of the file. [ can you plese telll current cursor position]</p> </li> <li> <p>The position(index) of first character in files is zero just like string index.</p> </li> </ul> <pre><code>f=open(\"abc.txt\",\"r\")\nprint(f.tell())\nprint(f.read(2))\nprint(f.tell())\nprint(f.read(3))\nprint(f.tell())\n</code></pre> <p>Output:</p> <pre><code>0\nsu\n2\nnny\n5\n</code></pre>"},{"location":"python_tutorials/File/#seek","title":"seek()","text":"<p>We can use seek() method to move cursor(file pointer) to specified location.[Can you please seek the cursor to a particular location]</p> <p><code>f.seek(offset, fromwhere)</code> offset represents the number of positions</p> <p>The allowed values for second attribute(from where) are</p> <ul> <li>0----&gt;From beginning of file(default value)</li> <li>1----&gt;From current position</li> <li>2---&gt;From end of the file Note: Python 2 supports all 3 values but Python 3 supports only zero.</li> </ul>"},{"location":"python_tutorials/File/#q-program-to-print-the-number-of-lines-words-and-characters-present-in-the-given-file","title":"Q Program to print the Number of Lines, Words and Characters present in the given File?","text":"<pre><code>import os\nimport sys \n\nfname=input(\"Enter File Name: \") \n\nif os.path.isfile(fname): \n    print(\"File exists:\",fname)     \n    f=open(fname,\"r\") \n\nelse:\n    print(\"File does not exist:\",fname) \n    sys.exit(0) \n\nlcount=wcount=ccount=0 \n\nfor line in f: \n    lcount=lcount+1 \n    ccount=ccount+len(line) \n    words=line.split() \n    wcount=wcount+len(words) \n\nprint(\"The number of Lines:\",lcount) \nprint(\"The number of Words:\",wcount)\nprint(\"The number of Characters:\",ccount)\n\no/p\nEnter File Name: note.txt\nFile exists: note.txt\nThe number of Lines: 12\nThe number of Words: 98\nThe number of Characters: 538\n</code></pre>"},{"location":"python_tutorials/File/#handling-binary-data","title":"Handling Binary Data","text":"<p>It is very common requirement to read or write binary data like images,video files,audio files etc.</p>"},{"location":"python_tutorials/File/#q-program-to-read-image-file-and-write-to-a-new-image-file","title":"Q Program to read Image File and write to a New Image File?","text":"<pre><code>f1=open(\"Sunny.jpeg\",\"rb\") \nf2=open(\"newpic.jpg\",\"wb\") \n\nbytes=f1.read() \nf2.write(bytes) \n\nprint(\"New Image is available with the name: newpic.jpg\")\n</code></pre>"},{"location":"python_tutorials/File/#handling-csv-files","title":"Handling CSV Files","text":"<p>\u26bd CSV : Comma seperated values \u26bd Python provides csv module to handle csv files.</p> Writing Data to CSV File:<pre><code>import csv \n\nwith open(\"emp.csv\",\"w\",newline='') as f: \n    w=csv.writer(f) # returns csv writer object \n    w.writerow([\"ENO\",\"ENAME\",\"ESAL\",\"EADDR\"]) \n\n    n=int(input(\"Enter Number of Employees:\")) \n\n    for i in range(n):\n        eno=input(\"Enter Employee No:\") \n        ename=input(\"Enter Employee Name:\")\n        esal=input(\"Enter Employee Salary:\") \n        eaddr=input(\"Enter Employee Address:\") \n        w.writerow([eno,ename,esal,eaddr]) \n\nprint(\"Total Employees data written to csv file successfully\")\n</code></pre> Reading Data from CSV File:<pre><code>import csv \n\nf=open(\"emp.csv\",'r') \n\ncsv_reader=csv.reader(f) #returns csv reader object \nfor row in csv_reader:\n    print(row)\n\nf.close()\no/p\n['ENO', 'ENAME', 'ESAL', 'EADDR']\n['101', 'ashish', '10000000', 'punjab']\n['102', 'sonu', '29999999', 'UP']\n['103', 'bindra', '900000000', 'shimla']\n['104', 'kumar', '20202020', 'Himachal']\n['105', 'sreshti', '1000000000000000', 'GOA']\n</code></pre> <p>Note: Observe the difference with newline attribute and without</p> <ul> <li>with open(\"emp.csv\",\"w\",newline='') as f:</li> <li>with open(\"emp.csv\",\"w\") as f:</li> </ul> <pre><code>import csv \n\nwith open(\"emp.csv\",'r') as f:\n    csv_reader=csv.DictReader(f) #returns csv reader object \n    for row in csv_reader:\n        print(row)\n\no/p\n{'ENO': '101', 'ENAME': 'ashish', 'ESAL': '10000000', 'EADDR': 'punjab'}\n{'ENO': '102', 'ENAME': 'sonu', 'ESAL': '29999999', 'EADDR': 'UP'}\n{'ENO': '103', 'ENAME': 'bindra', 'ESAL': '900000000', 'EADDR': 'shimla'}\n{'ENO': '104', 'ENAME': 'kumar', 'ESAL': '20202020', 'EADDR': 'Himachal'}\n{'ENO': '105', 'ENAME': 'sreshti', 'ESAL': '1000000000000000', 'EADDR': 'GOA'}\n</code></pre>"},{"location":"python_tutorials/File/#zipping-and-unzipping-files","title":"Zipping and Unzipping Files","text":"<p>It is very common requirement to zip and unzip files. The main advantages are:</p> <ol> <li>To improve memory utilization</li> <li>We can reduce transport time</li> <li>We can improve performance.</li> </ol> <p>To perform zip and unzip operations, Python contains one in-bulit module zip file. This module contains a class: ZipFile</p>"},{"location":"python_tutorials/File/#to-create-zip-file","title":"To Create Zip File","text":"<p>We have to create ZipFile class object with name of the zip file, mode and constant ZIP_DEFLATED. This constant represents we are creating zip file.</p> <ul> <li><code>f = ZipFile(\"files.zip\",\"w\",\"ZIP_DEFLATED\")</code></li> <li>Once we create ZipFile object,we can add files by using write() method.</li> <li><code>f.write(filename)</code></li> </ul> <pre><code>from zipfile import * \n\nf=ZipFile(\"files.zip\",'w',ZIP_DEFLATED) \n\nf.write(\"abc.txt\") \nf.write(\"abcd.txt\") \nf.write(\"note.txt\") \n\nf.close() \nprint(\"files.zip file created successfully\")\n</code></pre>"},{"location":"python_tutorials/File/#to-perform-unzip-operation","title":"To perform unzip Operation","text":"<p>We have to create ZipFile object as follows</p> <ul> <li> <p><code>f = ZipFile(\"files.zip\",\"r\",ZIP_STORED)</code></p> </li> <li> <p>ZIP_STORED represents unzip operation. This is default value and hence we are not required to specify.</p> </li> <li>Once we created ZipFile object for unzip operation, we can get all file names present in that zip file by using namelist() method.</li> <li><code>names = f.namelist()</code></li> </ul> <pre><code>from zipfile import *\n\nf=ZipFile(\"files.zip\",'r',ZIP_STORED) \nnames=f.namelist() \n\nfor name in names: \n    print( \"File Name: \",name)\n\no/p\nFile Name:  abc.txt\nFile Name:  abcd.txt\nFile Name:  note.txt\n</code></pre>"},{"location":"python_tutorials/File/#assignments","title":"Assignments","text":""},{"location":"python_tutorials/File/#46-python-program-to-find-hash-of-file","title":"46. Python Program to Find Hash of File","text":"Python program to find the SHA-1 message digest of a file<pre><code># importing the hashlib module\nimport hashlib\n\ndef hash_file(filepath):\n   \"\"\"\n   This function returns the SHA-1 hash\n   of the file passed into it\"\"\"\n\n   # make a hash object\n   h = hashlib.sha1()\n\n   # open file for reading in binary mode\n   with open(filepath,'rb') as file:\n\n       # loop till the end of the file\n       chunk = 0\n       while chunk != b'':\n           # read only 1024 bytes at a time\n           chunk = file.read(1024)\n           h.update(chunk)\n\n   # return the hex representation of digest\n   return h.hexdigest()\n\nmessage = hash_file(\"data_file.txt\")    # Use path of the file\nprint(message)\n</code></pre>"},{"location":"python_tutorials/File/#49-python-program-to-safely-create-a-nested-directory","title":"49. Python Program to Safely Create a Nested Directory","text":"<pre><code>import os\n\nos.makedirs(\"/root/dirA/dirB\", exist_ok=True)\n</code></pre> <pre><code>from pathlib import Path\nPath(\"/root/dirA/dirB\").mkdir(parents=True, exist_ok=True)\n</code></pre>"},{"location":"python_tutorials/File/#45-python-program-to-find-the-size-resolution-of-an-image","title":"45. Python Program to Find the Size (Resolution) of an Image","text":"<pre><code>def jpeg_res(filename):\n   \"\"\"\"This function prints the resolution of the jpeg image file passed into it\"\"\"\n\n   # open image for reading in binary mode\n   with open(filename,'rb') as img_file:\n\n       # height of image (in 2 bytes) is at 164th position\n       img_file.seek(163)\n\n       # read the 2 bytes\n       a = img_file.read(2)\n\n       # calculate height\n       height = (a[0] &lt;&lt; 8) + a[1]\n\n       # next 2 bytes is width\n       a = img_file.read(2)\n\n       # calculate width\n       width = (a[0] &lt;&lt; 8) + a[1]\n\n   print(\"The resolution of the image is\",width,\"x\",height)\n\njpeg_res(\"colored_terminal.png\")\n</code></pre>"},{"location":"python_tutorials/File/#57-python-program-to-copy-a-file","title":"57. Python Program to Copy a File","text":"<pre><code># Using shutil module\nfrom shutil import copyfile\ncopyfile(\"my_dir/a.txt\", \"my_dir/b.txt\")\n</code></pre>"},{"location":"python_tutorials/File/#66-python-program-read-a-file-line-by-line-into-a-list","title":"66. Python Program Read a File Line by Line Into a List","text":"<pre><code>with open(\"data_file.txt\") as f:\n    content_list = f.readlines()\ncontent_list\n</code></pre> <pre><code># Example 1: Using readlines()\nwith open(\"data_file.txt\") as f:\n    content_list = f.readlines()\n\nprint(content_list)\n\ncontent_list = [x.strip() for x in content_list]\nprint(content_list)\n</code></pre> <pre><code># Example 2: Using for loop and list comprehension\n\nwith open('data_file.txt') as f:\n    content_list = [line.rstrip() for line in f]\n\nprint(content_list)\n</code></pre> <pre><code>with open(\"data_file.txt\") as f:\n    content_list = f.readline()\ncontent_list\n</code></pre> <pre><code>with open(\"data_file.txt\") as f:\n    content_list = f.read()\ncontent_list\n</code></pre>"},{"location":"python_tutorials/File/#69-python-program-to-append-to-a-file","title":"69. Python Program to Append to a File","text":"<pre><code>with open(\"my_file.txt\", \"a\") as f:\n   f.write(\"new text\")\n</code></pre>"},{"location":"python_tutorials/File/#72-python-program-to-extract-extension-from-the-file-name","title":"72. Python Program to Extract Extension From the File Name","text":"<pre><code># Example 1: Using splitext() method from os module\nimport os\nfile_details = os.path.splitext('/path/file.ext')\nprint(file_details)\nprint(file_details[1])\n</code></pre> <pre><code># Example 2: Using pathlib module\nimport pathlib\nprint(pathlib.Path('/path/file.ext').suffix)\n</code></pre> <pre><code>\n</code></pre>"},{"location":"python_tutorials/File/#78-python-program-to-get-the-file-name-from-the-file-path","title":"78. Python Program to Get the File Name From the File Path","text":"<pre><code># Example 1: Using os module\nimport os\n\n# file name with extension\nfile_name = os.path.basename('/root/file.ext')\n\n# file name without extension\nprint(os.path.splitext(file_name)[0])\n</code></pre> <pre><code>import os\n\nprint(os.path.splitext(file_name))\n</code></pre> sing Path module<pre><code>from pathlib import Path\n\nprint(Path('/root/file.ext').stem)\n</code></pre>"},{"location":"python_tutorials/File/#81-python-program-to-get-line-count-of-a-file","title":"81. Python Program to Get Line Count of a File","text":"<pre><code>with open(\"data_file.txt\") as f:\n    for i, l in enumerate(f):\n        pass\ni + 1\n</code></pre> Example 2: Using list comprehension<pre><code>num_of_lines = sum(1 for l in open('data_file.txt'))\n\nprint(num_of_lines)\n</code></pre>"},{"location":"python_tutorials/File/#homework","title":"Homework:","text":"<ol> <li>Add the top 5 most common words to the analysis message.</li> <li>Find the total number of spaces in the file.</li> <li>Find the total number of characters in the file (including spaces).</li> <li>Find the total number of characters in the file (excluding spaces).</li> <li>Find the total number of words in the file.</li> <li>Find the total number of lines in the file.</li> <li>Display the file name and list of directories containing the file.</li> <li>Calculate the average word length in the file.</li> <li>Find the number of unique words in the file.</li> <li>Count the frequency of a specific word provided by the user.</li> <li>Identify and display all unique punctuation marks in the file.</li> <li>Check if the file contains any numerical digits and count them.</li> <li>Find the longest word in the file.</li> <li>Find the shortest word in the file.</li> <li>Sort all the words alphabetically and display them.</li> </ol>"},{"location":"python_tutorials/Identifiers/","title":"Python Identifiers and Reserved Words","text":""},{"location":"python_tutorials/Identifiers/#identifiers","title":"Identifiers","text":"<p>In Python, a name used in a program is called an identifier. It can be the name of a:</p> <ul> <li>Class</li> <li>Function</li> <li>Module</li> <li>Variable</li> </ul> <p>Example:</p> <pre><code>a = 10\n</code></pre>"},{"location":"python_tutorials/Identifiers/#rules-for-defining-identifiers-in-python","title":"Rules for Defining Identifiers in Python","text":"<ol> <li>Allowed Characters    Identifiers can only contain:</li> </ol> <ul> <li>Alphabet symbols (a\u2013z, A\u2013Z)</li> <li>Digits (0\u20139)</li> <li>Underscore symbol <code>_</code></li> </ul> <p>\u274c Using any other symbol like <code>$</code> will result in a syntax error.</p> <pre><code>cash = 10   # Valid\nca$h = 20   # Invalid\n</code></pre> <ol> <li>Should Not Start with a Digit</li> </ol> <pre><code>123total = 50   # Invalid\ntotal123 = 50   # Valid\n</code></pre> <ol> <li>Case Sensitivity    Identifiers in Python are case-sensitive.</li> </ol> <pre><code>total = 10\nTOTAL = 999\n\nprint(total)  # Output: 10\nprint(TOTAL)  # Output: 999\n</code></pre> <ol> <li>Cannot Use Reserved Words    Reserved words in Python cannot be used as identifiers.</li> </ol> <pre><code>def = 10   # Invalid\n</code></pre> <ol> <li> <p>No Length Limit    There is no maximum length for an identifier, but it's best to avoid excessively long names.</p> </li> <li> <p>Dollar Symbol Not Allowed <code>$</code> is not permitted in Python identifiers.</p> </li> <li> <p>Identifiers Starting with Underscore</p> </li> </ol> <ul> <li><code>_identifier</code>: Indicates private.</li> <li><code>__identifier</code>: Indicates strongly private.</li> <li> <p><code>__identifier__</code>: Indicates a language-defined special name (also known as magic methods).</p> <p>Example:</p> <pre><code>__add__  # Magic method used for operator overloading\n</code></pre> </li> </ul>"},{"location":"python_tutorials/Identifiers/#valid-and-invalid-identifiers","title":"Valid and Invalid Identifiers","text":"Identifier Validity <code>123total</code> \u274c Invalid <code>total123</code> \u2705 Valid <code>java2share</code> \u2705 Valid <code>ca$h</code> \u274c Invalid <code>_abc_abc_</code> \u2705 Valid <code>def</code> \u274c Invalid (reserved word) <code>if</code> \u274c Invalid (reserved word)"},{"location":"python_tutorials/Identifiers/#reserved-words","title":"Reserved Words","text":"<p>In Python, certain words are reserved to represent specific meanings or functionalities. These are known as reserved words or keywords.</p> <p>There are 33 reserved words in Python (as of version 3.x):</p> <pre><code>True, False, None,\nand, or, not, is,\nif, elif, else,\nwhile, for, break, continue, return, in, yield,\ntry, except, finally, raise, assert,\nimport, from, as, class, def, pass, global, nonlocal, lambda, del, with\n</code></pre>"},{"location":"python_tutorials/Identifiers/#notes","title":"Notes:","text":"<ol> <li>All reserved words contain only alphabet characters.</li> <li>All are in lowercase, except:</li> </ol> <ul> <li><code>True</code></li> <li><code>False</code></li> <li><code>None</code></li> </ul> <pre><code>a = true   # Invalid\na = True   # Valid\n</code></pre>"},{"location":"python_tutorials/Identifiers/#checking-reserved-words-in-python","title":"Checking Reserved Words in Python","text":"<p>You can view the list of reserved words using the <code>keyword</code> module:</p> <pre><code>import keyword\nprint(keyword.kwlist)\n</code></pre> <p>Output:</p> <pre><code>['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue',\n 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global',\n 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass',\n 'raise', 'return', 'try', 'while', 'with', 'yield']\n</code></pre>"},{"location":"python_tutorials/List/","title":"List","text":"<p>In Python, <code>extend()</code> and <code>append()</code> are methods used to add elements to a list, but they work in different ways. Here's a detailed comparison:</p>"},{"location":"python_tutorials/List/#methods","title":"METHODS","text":""},{"location":"python_tutorials/List/#append-method","title":"<code>append()</code> Method","text":"<ul> <li>Functionality: Adds a single element (object) to the end of the list.  </li> <li>Effect: Treats the argument as a single item and appends it directly.  </li> </ul>"},{"location":"python_tutorials/List/#example","title":"Example","text":"<pre><code># Using append\nmy_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)  # Output: [1, 2, 3, 4]\n\n# Appending a list (nested list)\nmy_list.append([5, 6])\nprint(my_list)  # Output: [1, 2, 3, 4, [5, 6]]\n</code></pre> <p>Note: If you append another list, it gets added as a single element, resulting in a nested list.</p>"},{"location":"python_tutorials/List/#extend-method","title":"<code>extend()</code> Method","text":"<ul> <li>Functionality: Adds all the elements of an iterable (e.g., list, tuple, string) to the end of the list.  </li> <li>Effect: Iterates over the argument and appends each element to the list individually.  </li> </ul>"},{"location":"python_tutorials/List/#example_1","title":"Example","text":"<pre><code># Using extend\nmy_list = [1, 2, 3]\nmy_list.extend([4, 5])\nprint(my_list)  # Output: [1, 2, 3, 4, 5]\n\n# Extending with a string (iterable)\nmy_list.extend(\"67\")\nprint(my_list)  # Output: [1, 2, 3, 4, 5, '6', '7']\n</code></pre> <p>Note: If you pass a list to <code>extend</code>, its elements are added individually, not as a nested list.</p>"},{"location":"python_tutorials/List/#key-differences","title":"Key Differences","text":"Aspect <code>append()</code> <code>extend()</code> Type of argument Any object (single element) Iterable (list, tuple, string, etc.) Behavior Adds the argument as a single item. Adds each element of the argument. Nested lists Creates a nested list when a list is appended. Merges elements into the original list. Use case Add one item or object to the list. Add multiple elements from an iterable."},{"location":"python_tutorials/List/#when-to-use-which","title":"When to Use Which","text":"<ul> <li>Use <code>append()</code> when you want to add a single element (e.g., an integer, string, or even a list as a nested list).</li> <li>Use <code>extend()</code> when you want to combine another iterable's elements into your list.</li> </ul>"},{"location":"python_tutorials/List/#comparison-example","title":"Comparison Example","text":"<pre><code># Append vs Extend\nlist1 = [1, 2, 3]\n\nlist1.append([4, 5])  # Adds as a single element (nested list)\nprint(list1)  # Output: [1, 2, 3, [4, 5]]\n\nlist2 = [1, 2, 3]\nlist2.extend([4, 5])  # Adds elements individually\nprint(list2)  # Output: [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"python_tutorials/List/#summary","title":"Summary","text":"<ul> <li>Use <code>append()</code> for adding a single object.  </li> <li>Use <code>extend()</code> for adding multiple elements.</li> </ul>"},{"location":"python_tutorials/List/#36-python-program-to-add-two-matrices","title":"36. Python Program to Add Two Matrices","text":"<pre><code># Program to add two matrices using nested loop\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[0,0,0],\n         [0,0,0],\n         [0,0,0]]\n\n# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[i][j] = X[i][j] + Y[i][j]\n\nfor r in result:\n   print(r)\n</code></pre> <pre><code># Program to add two matrices using list comprehension\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\nY = [[5,8,1],\n    [6,7,3],\n    [4,5,9]]\n\nresult = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]\n\nfor r in result:\n   print(r)\n</code></pre>"},{"location":"python_tutorials/List/#37-python-program-to-transpose-a-matrix","title":"37. Python Program to Transpose a Matrix","text":"<pre><code># Program to transpose a matrix using a nested loop\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[0,0,0],\n         [0,0,0]]\n\n# iterate through rows\nfor i in range(len(X)):\n   # iterate through columns\n   for j in range(len(X[0])):\n       result[j][i] = X[i][j]\n\nfor r in result:\n   print(r)\n</code></pre> <pre><code>''' Program to transpose a matrix using list comprehension'''\n\nX = [[12,7],\n    [4 ,5],\n    [3 ,8]]\n\nresult = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]\n\nfor r in result:\n   print(r)\n</code></pre>"},{"location":"python_tutorials/List/#38-python-program-to-multiply-two-matrices","title":"38. Python Program to Multiply Two Matrices","text":"<p>Matrix Multiplication using Nested Loop</p> <p>Program to multiply two matrices using nested loops</p> <pre><code># 3x3 matrix\n\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\n# 3x4 matrix\n\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\n# result is 3x4\n\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n\n# iterate through rows of X\n\nfor i in range(len(X)):\n\n# iterate through columns of Y\n\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\n\nfor r in result:\n   print(r)\n</code></pre> <p>Matrix Multiplication Using Nested List Comprehension</p> <pre><code># Program to multiply two matrices using list comprehension\n\n# 3x3 matrix\nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n\n# 3x4 matrix\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n\n# result is 3x4\nresult = [[sum(a*b for a,b in zip(X_row,Y_col)) for Y_col in zip(*Y)] for X_row in X]\n\nfor r in result:\n   print(r)\n</code></pre>"},{"location":"python_tutorials/List/#50-python-program-to-access-index-of-a-list-using-for-loop","title":"50. Python Program to Access Index of a List Using for Loop","text":"<pre><code>data = [\"a\", \"b\", \"c\"]\nfor i in range(len(data)): \n    print(i, data[i])\n</code></pre> <pre><code>my_list = [21, 44, 35, 11]\n\nfor index, val in enumerate(my_list):\n    print(index, val)\n</code></pre>"},{"location":"python_tutorials/List/#51-python-program-to-flatten-a-nested-list","title":"51. Python Program to Flatten a Nested List","text":"<pre><code>my_list = [[1], [2, 3], [4, 5, 6, 7]]\n\nflat_list = [num for sublist in my_list for num in sublist]\nprint(flat_list)\n</code></pre> <pre><code># Example 2: Using Nested for Loops (non pythonic way)\nmy_list = [[1], [2, 3], [4, 5, 6, 7]]\n\nflat_list = []\nfor sublist in my_list:\n    for num in sublist:\n        flat_list.append(num)\n\nprint(flat_list)\n</code></pre> <pre><code># Example 3: Using itertools package\nimport itertools\n\nmy_list = [[1], [2, 3], [4, 5, 6, 7]]\n\nflat_list = list(itertools.chain(*my_list))\nprint(flat_list)\n</code></pre> <pre><code># Example 4: Using sum()\nmy_list = [[1], [2, 3], [4, 5, 6, 7]]\n\nflat_list = sum(my_list, [])\nprint(flat_list)\n</code></pre> <pre><code>from functools import reduce\n\nmy_list = [[1], [2, 3], [4, 5, 6, 7]]\nreduce(lambda x,y: x+y, my_list)\n</code></pre>"},{"location":"python_tutorials/List/#52-python-program-to-slice-lists","title":"52. Python Program to Slice Lists","text":"<p>The format for list slicing is [start:stop:step].</p> <pre><code>my_list = [1, 2, 3, 4, 5]\n\nprint(my_list[2:])\n</code></pre> <pre><code>my_list = [1, 2, 3, 4, 5]\n\nprint(my_list[::2])\n</code></pre>"},{"location":"python_tutorials/List/#55-python-program-to-check-if-a-list-is-empty","title":"55. Python Program to Check If a List is Empty","text":"<pre><code># Example 1: Using Boolean operation\nmy_list = []\nif not my_list:\n    print(\"the list is empty\")\n</code></pre> <pre><code># Example 2: Using len()\nmy_list = []\nif len(my_list) == 0:\n    print(\"the list is empty\")\n</code></pre> <pre><code># Example 3: Comparing with []\nmy_list = []\nif my_list == []:\n    print(\"The list is empty\")\n</code></pre>"},{"location":"python_tutorials/List/#58-python-program-to-concatenate-two-lists","title":"58. Python Program to Concatenate Two Lists","text":"<pre><code># Example 1: Using + operator\nlist_1 = [1, 'a']\nlist_2 = [3, 4, 5]\n\nlist_joined = list_1 + list_2\nprint(list_joined)\n</code></pre> <pre><code># Example 2: Using iterable unpacking operator *\nlist_1 = [1, 'a']\nlist_2 = range(2, 4)\n\nlist_joined = [*list_1, *list_2]\nprint(list_joined)\n</code></pre> <pre><code># Example 3: With unique values\nlist_1 = [1, 'a']\nlist_2 = [1, 2, 3]\n\nlist_joined = list(set(list_1 + list_2))\nprint(list_joined)\n</code></pre> <pre><code># Example 4: Using extend()\nlist_1 = [1, 'a']\nlist_2 = [1, 2, 3]\n\nlist_2.extend(list_1)\nprint(list_2)\n</code></pre>"},{"location":"python_tutorials/List/#60-python-program-to-split-a-list-into-evenly-sized-chunks","title":"60. Python Program to Split a List Into Evenly Sized Chunks","text":"<pre><code># Example 1: Using yield\ndef split(list_a, chunk_size):\n\n  for i in range(0, len(list_a), chunk_size):\n    yield list_a[i:i + chunk_size]\n\nchunk_size = 2\nmy_list = [1,2,3,4,5,6,7,8,9]\nprint(list(split(my_list, chunk_size)))\n</code></pre> <p>[[1, 2], [3, 4], [5, 6], [7, 8], [9]]</p> <pre><code>chunk_size = 2\nlist_chunked = [my_list[i:i + chunk_size] for i in range(0, len(my_list), chunk_size)]\nprint(list_chunked)\n</code></pre> <pre><code># Example 2: Using numpy\nimport numpy as np\n\nmy_list = [1,2,3,4,5,6,7,8,9]\nprint(np.array_split(my_list, 5))\n</code></pre>"},{"location":"python_tutorials/List/#64-python-program-to-get-the-last-element-of-the-list","title":"64. Python Program to Get the Last Element of the List","text":"<pre><code>my_list = ['a', 'b', 'c', 'd', 'e']\n\n# print the last element\nprint(my_list[-1])\n</code></pre> <pre><code>my_list[len(my_list)- 1]\n</code></pre>"},{"location":"python_tutorials/List/#85-python-program-to-iterate-through-two-lists-in-parallel","title":"85. Python Program to Iterate Through Two Lists in Parallel","text":"<pre><code># Example 1: Using zip\nlist_1 = [1, 2, 3, 4]\nlist_2 = ['a', 'b', 'c']\n\nfor i, j in zip(list_1, list_2):\n    print(i, j)\n</code></pre> <pre><code># loop until the longer list stops\nfor i,j in itertools.zip_longest(list_1,list_2):\n    print(i,j)\n</code></pre>"},{"location":"python_tutorials/List/#95-python-program-to-remove-duplicate-element-from-a-list","title":"95. Python Program to Remove Duplicate Element From a List","text":"<pre><code>l=[1,21,2,1,2,21,12,34,] \nl1=set(l)\n\nl1\n</code></pre> <p>{1, 2, 12, 21, 34}</p> <pre><code># Example 2: Remove the items that are duplicated in two lists\nlist_1 = [1, 2, 1, 4, 6]\nlist_2 = [7, 8, 2, 1]\n\nprint(list(set(list_1) ^ set(list_2)))\n</code></pre> <p>[4, 6, 7, 8]</p> <pre><code>l=[1,21,2,1,2,21,12,34,] \nl1=[]\n\nfor x in l:\n    if x not in l1:\n        l1.append(x) \n\nprint(l1)\n</code></pre> <p>[1, 21, 2, 12, 34]</p> <pre><code>l=[1,21,2,1,2,21,12,34,] \nl1= []\n\n[l1.append(x) for x in l if x not in l1]\n\nprint(l1)\n</code></pre> <pre><code>l=[1,21,2,1,2,21,12,34] \nl1= []\n\nl1 = []\nl3 = [l1.append(x)  if x not in l1 else x for x in l]\n\nprint(l1)\nl3\n</code></pre> <p>[1, 21, 2, 12, 34] [None, None, None, 1, 2, 21, None, None]</p>"},{"location":"python_tutorials/Package/","title":"PACKAGES","text":""},{"location":"python_tutorials/Package/#functions","title":"Functions","text":"<ul> <li>A Group of repeatedly required lines.</li> <li>Code reusability</li> </ul>"},{"location":"python_tutorials/Package/#modules","title":"Modules","text":"<ul> <li>Python files</li> <li>A group of functions, variables, classes saved to a file.</li> </ul>"},{"location":"python_tutorials/Package/#packages_1","title":"Packages","text":"<ul> <li>A collection of related modules into a folder</li> <li>A collection of related modules into a single unit.</li> <li>It is an encapsulation mechanism to group related modules into a single unit.</li> <li>package is nothing but folder or directory</li> <li> <ul> <li>Any folder or directory contains init.py file, is considered as a Python package.</li> </ul> </li> <li>This file can be empty.</li> <li>A package can contain sub packages also.</li> </ul> <p>Note:</p> <ul> <li>From pythin 3.3  version onwords, it is not mandatory <code>__init__.py</code> (optional)</li> <li>but Good to use it</li> </ul>"},{"location":"python_tutorials/Package/#the-main-advantages-of-package-are","title":"The main advantages of package are","text":"<ol> <li>We can resolve naming conflicts</li> <li>We can identify our components uniquely</li> <li>It improves the modularity of the application</li> <li>It improves readability and maintainability of the application</li> </ol> <p>Get tree directory</p> <pre><code>tree /f`\n   Eg 1: D:\\Python_cla&gt;\n            |-test.py\n            |-pack1\n              |-module1.py\n              |-__init__.py\n</code></pre>"},{"location":"python_tutorials/Package/#libray-vs-package-vs-module-vs-function","title":"Libray vs Package vs Module vs Function","text":"<ul> <li>Function: A Group of repeatedly required lines of code.</li> <li>Module: A group of functions, variables, classes saved to a file.</li> <li>Packages: A group of related modules into a single unit. It contains sub packages.</li> <li>Library: A group of packages. Note: Summary diagram of a library, packages, modules which contains functions, classes and variables. </li> </ul>"},{"location":"python_tutorials/Package/#importance-of-initpy","title":"Importance of init.py","text":"<p>At the time of using a package, If we want to perform any initialization activities automatically, then we have to go for init.py</p>"},{"location":"python_tutorials/Package/#need-of-installing-a-package","title":"Need of installing a package","text":"<ul> <li>If we want to use a packages, compulsory it should be available in the current working directory.</li> <li>To make package available through out our system then we have to install that package.</li> </ul>"},{"location":"python_tutorials/Package/#exec","title":"exec()","text":"<ul> <li>Execute the given source in the context of globals and locals.  </li> <li>The source may be a string representing one or more Python statements or a code object as returned by compile()</li> </ul> <pre><code>exec(\"\"\" \n        import string\n        print(string.ascii_letters) \"\"\")\n</code></pre> <p>Once we are installed, we can access that package from anywhere in our system.</p>"},{"location":"python_tutorials/Package/#how-to-install-a-package","title":"How to install a package","text":"<p>setuptools package</p> <p>setup.py :-&gt; setup()</p>"},{"location":"python_tutorials/Package/#pip","title":"pip","text":"<p>pip is a python package management system to install and mange software written in python</p> <ul> <li>pip =&gt; Python</li> <li>npm =&gt; JavaScript</li> <li>apt =&gt; Ubuntu</li> <li>yum =&gt; redhat linux</li> </ul> <p>pip install .</p> <ul> <li>Where setup.py is located</li> </ul> <p>eg: way-1 pip install setuptools :=&gt; not a inbuilt module</p> <ol> <li> <p>using built package <code>pip install --upgrade build</code></p> </li> <li> <p>code</p> <p><code>py    from setuptools import setup setup(     name='mypackage',     version='0.0.1',     install_requires=[         'requests',         'importlib-metadata; python_version&lt;\"3.10\"',     ], )</code></p> </li> <li> <p>python -m build</p> </li> <li>installtion</li> </ol> <pre><code>python setup.py install \n        or  \npip install .\n        or\npip install dist\\ashish-0.0.1-py3-none-any.whl\n</code></pre> <p>Note:  recommend users to expose as much as possible configuration in a more declarative way via the pyproject.toml or setup.cfg, and keep the setup.py minimal</p> <p>way-2 easy way     - from setuptools import setup</p> <pre><code>setup(\n    name='ashish',\n    version='0.0.1',\n    packages=['ashish'],\n    install_requires=[],\n)\n</code></pre> <ul> <li><code>pip install ashish</code></li> </ul> <p>3rd way an Alternative way     - from setuptools import setup, find_packages</p> <pre><code>setup(\n    name='ashish',\n    version='0.0.1',\n    packages=find_packages(),  # __init__.py is mandatory for this\n    install_requires=[],\n)\n</code></pre> <ul> <li><code>pip install ashish</code></li> </ul> <p>we can give url also</p>"},{"location":"python_tutorials/Package/#pyprojecttoml","title":"pyproject.toml","text":"<p>it will also work</p> <pre><code>[project]\nname = \"ashish\"\nversion = \"0.0.1\"\ndependencies = []\n</code></pre> <ul> <li>python -m build</li> <li>pip install .</li> </ul> <p>can we</p>"},{"location":"python_tutorials/Package/#setupcfg","title":"setup.cfg","text":"<pre><code>[metadata]\nname = mypackage\nversion = 0.0.1\n\n[options]\ninstall_requires =\n    requests\n    importlib-metadata; python_version&lt;\"3.10\n</code></pre>"},{"location":"python_tutorials/RE/","title":"Regular Expression","text":"<ul> <li>If you want to represent a group of string according to a particular format/pattern, then we should go for Regular Expression.</li> <li>i.e Regular Expression is a declaration  mechanism to represent a group of strings according to a perticulat format / pattern.</li> </ul>"},{"location":"python_tutorials/RE/#examples","title":"EXAMPLES","text":""},{"location":"python_tutorials/RE/#q1-write-a-regular-expression-to-represent-all-mobile-numbers","title":"Q1. Write a regular expression to represent all mobile numbers","text":"<ul> <li><code>[6-9][0-9]{9}</code></li> </ul>"},{"location":"python_tutorials/RE/#q2-write-a-regular-expression-to-represent-all-mail-ids","title":"Q2. Write a regular expression to represent all mail ids","text":"<ul> <li>``</li> </ul>"},{"location":"python_tutorials/RE/#application-areas-of-regular-expression","title":"Application areas of Regular Expression","text":"<ol> <li>Pattern Matching Applications<ul> <li>Ctrl+f =&gt; In window</li> <li>grep =&gt; Linux</li> </ul> </li> <li>To perform validations / To develop validation frameworks.</li> <li>To develop translators like complier, interpreter, assembler etc.<ul> <li>compiler design<ul> <li>lexical Analysis</li> <li>syntax Analysis</li> <li>sematic Analysis</li> <li>Intermediate code Generator</li> <li>code Optimiztion</li> <li>Target code Generator</li> </ul> </li> </ul> </li> <li>To develop digital circuts like incrementer</li> <li>To develop communicator protocol TCP/IP,UDP,HTTP etc.</li> </ol> <p>re =&gt; module ( several functions) (java.util.regex package)</p>"},{"location":"python_tutorials/RE/#methods","title":"Methods","text":""},{"location":"python_tutorials/RE/#1-compile","title":"1. compile()","text":"<p>Returns Module contains compile() Function to compile a Pattern into RegexObject.</p> <p><code>pattern = re.compile(\"ab\")</code></p>"},{"location":"python_tutorials/RE/#patteren-matching-application","title":"Patteren Matching Application","text":"<p>Search pattern: ab target string: abaabababa 0,3,5, =&gt;ab total =&gt; 3 times</p> <pre><code>import re\n- Compiler String into pattern object\n- Convert string into patteren object\n\npattern = re.compile('ab')\n\nReturn iterator to find pattern in the target\nmatcher = pattern.finditer('abaabababa') # one by one\nmatcher\n\ncount = 0\nfor match in matcher:\n    print(match.start())\n    count+=1\n\nprint(f'The Number of occurence: {count}')\n\n# ouput\n# 0\n# 3\n# 5\n# 7\n</code></pre> <p>matcher</p> <ul> <li>Start() =&gt; returns start index of the match</li> <li>end() =&gt; return end + 1 index of the match</li> <li>group() =&gt; return matched string</li> </ul>"},{"location":"python_tutorials/RE/#character-classes","title":"Character classes","text":"<p>We can use character classes to search a group of charaters</p> <ul> <li>[abc] =&gt; a or b or c</li> <li>[^abc] =&gt; Expect a and b and c</li> <li>[a-z] =&gt; any lower case alphabet symbol</li> <li>[A-Z] =&gt; Any Uppercase alphabet symbol</li> <li>[a-zA-Z] =&gt; Any alphabet symbol</li> <li>[0-9] =&gt; Any digit</li> <li>[0-9a-zA-Z] =&gt; Any alphanumeric character (Special character)</li> <li>[^0-9a-zA-Z] = &gt; Except alphanumeric character (Special character)</li> </ul>"},{"location":"python_tutorials/RE/#_1","title":"re","text":"<ul> <li>Any digit 0 to 9</li> <li>('\\d) =&gt; short cut</li> </ul>"},{"location":"python_tutorials/RE/#predifinded-character-classes","title":"Predifinded character classes","text":"<ul> <li>\\d =&gt; Any digit 0 to 9 [0-9]</li> <li>\\D =&gt; Any character except digit [^0-9]</li> <li>\\w =&gt; Any Word character [0-9a-zA-Z]</li> <li>\\W =&gt; Any character except alphanumeric character (special character)</li> <li>\\s =&gt; Sppecial character</li> <li>\\S =&gt; Except space character</li> <li>. =&gt; Any character including special character also</li> </ul> <p>```py title=\" import re matcher = re.finditer(' ','abb7@k 9 yYz')</p> <p>count= 0 for match in matcher:     print(f'{match.start()}........{match.group()}')     count= count+1</p> <p>print(f\"The number of occurences: {count}\")</p>"},{"location":"python_tutorials/RE/#6","title":"6........","text":""},{"location":"python_tutorials/RE/#8","title":"8........","text":""},{"location":"python_tutorials/RE/#the-number-of-occurences-2","title":"The number of occurences: 2","text":"<pre><code>### Quantifiers\n\nWe can use quantifiers to specifig the number of occurences to match\n\n- a =&gt; exactly one 'a'\n- a+ =&gt; AtlEAST One 'a'\n- a* =&gt; rv = r+ U {E} any number of a's including zero number\n- a? =&gt; Atmost one a\n- a{m} =&gt; Exactly m number of a\n- a{m,n} =&gt; minimum m number of a's and maximium n number of a's\n\n### Important function of re module\n\n1. match()\n2. fullmatch()\n3. search()\n4. findall()\n5. finditer()\n6. sub()\n7. subn()\n8. split()\n9. compile()\n\n#### 1. match()\n\n- We can use match() function to check wheater the given pattern present at beginning of the target string or not?\n- If match is available then we will get match object, otherwise we will get None.\n\n```py title=\"\"\nimport re\n\np = input(\"Enter patter to check!!! \")\nm = re.match(p,'abcdefgh')\n\nif m is not None:\n    print(f\"Target string with {m.group()}\")\nelse:\n    print(f\"Target string not start with {p}\")\n\n\n# Enter patter to check!!!  abc\n# Target string with abc\n</code></pre> <pre><code>import re\n\np = input(\"Enter patter to check!!! \")\nm = re.match(p,'abcdefgh')\n\nif m:\n    print(f\"Target string with {m.group()}\")\nelse:\n    print(f\"Target string not start with {p}\")\n\n# Enter patter to check!!! ashish\n# Target string not start with ashish\n</code></pre> <pre><code>import re\n\np = input(\"Enter patter to check!!! \")\nm = re.match(p,'abcdefgh')\n\nif m:\n    print(f\"Target string with {m.group()}\")\nelse:\n    print(f\"Target string not start with {p}\")\n</code></pre>"},{"location":"python_tutorials/RE/#2-fullmatch","title":"2. Fullmatch()","text":"<ul> <li>We can use fullmatch() function to check wheather total target string matched with given patteren or not</li> <li>If matched then we will gett match object otheruse we will get None.</li> <li><code>m = re.fullmatch(p,\"abcdefgh\")</code></li> </ul> <pre><code>import re\n\nnum = input(\"Enter Mobile Number to validate:!\")\n# patteren = \"[6-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\npatteren = \"[6-9][0-9]{9}\"\n\nmatch = re.fullmatch(patteren,num)\n\nif match:\n    print(\"valid 10 - digit mobile numder\")\nelse:\n    print(\"Invalid 10 - digit mobile number\")\n\n\n# Enter Mobile Number to validate:! 9815039236\n# valid 10 - digit mobile numder\n\n# Enter Mobile Number to validate:! 1234567891\n# Invalid 10 - digit mobile number\n</code></pre>"},{"location":"python_tutorials/RE/#4-findall","title":"4. findall()","text":"<ul> <li>To find all occurrences of the match</li> <li>This function returns list object which contains all occurrences.</li> </ul> <pre><code>import re\n\nl = re.findall('[0-9]', 'a7b9k2@5kmn4')\nprint(l)\n\n# ['7', '9', '2', '5', '4']\n</code></pre>"},{"location":"python_tutorials/RE/#5-finditer","title":"5. finditer()","text":"<ul> <li>Return iterator yielding a matching object for each match</li> <li>On match object, we can call start(), end(), group() matches()</li> </ul> <pre><code>import re\n\nmatcher = re.finditer('[0-9]',\"a7b9k2@skmn4\")\nfor match in matcher:\n    print(f\"{match.start()}.....{match.group()}\")\n\n# 1.....7\n# 3.....9\n# 5.....2\n# 11.....4\n</code></pre>"},{"location":"python_tutorials/RE/#6-sub","title":"6. sub()","text":"<ul> <li>sub means substitution or replacement.</li> <li><code>re.sub('pattern, replacement_string, target_string')</code></li> </ul> <pre><code>import re\n\ns = re.sub('[0-9]','#','a7b9kz@5kmn4')\ns\n'a#b#kz@#kmn#'\n</code></pre>"},{"location":"python_tutorials/RE/#7-subn","title":"7. subn()","text":"<ul> <li>It is exactly same as sub() except that it can also returns the number of replacements.</li> <li>Return type is touple</li> <li>(result string, number of replacements)</li> </ul> <pre><code>import re\n\nt = re.subn('[0-9]','#','a7b9kz@5kmn4')\n\nprint(t)\nprint('The Result string',t[0])\nprint('The number of replacement',t[1])\n\n# ('a#b#kz@#kmn#', 4)\n# The Result string a#b#kz@#kmn#\n# The number of replacement 4\n</code></pre>"},{"location":"python_tutorials/RE/#8-split","title":"8. split()","text":"<p>We can use split() function to split target string acc to the pattern</p> <pre><code>import re\n\nl = re.split('-','27-11-2020')\nprint(l)\n\nfor s in l:\n    print(s)\n\n\n# ['27', '11', '2020']\n# 27\n# 11\n# 2020\n</code></pre> <ol> <li>match() = &gt; To check wheather the given target string start with specificed pattern or not</li> <li>fullmatch() = &gt; To check wheather total string matched patteren or not</li> <li>Search() = &gt; To retuen first occurrence of the match</li> <li>findall() = &gt; To return all matches</li> <li>finditer() = &gt; To return iterator object which yields match object</li> <li>sub() = &gt; To replace every occurence of the patteren with provided replacement string</li> <li>subn() = &gt; Same as sub() but also returns the number of occurences</li> <li>split() = &gt; To split the target string on given patteren</li> </ol>"},{"location":"python_tutorials/RE/#symbol-and-symbol","title":"^ symbol and $ symbol","text":"<ul> <li><code>^</code> symbol = start with</li> <li><code>re.search('[^ab],target string')</code> ==&gt; not</li> <li><code>re.search('^ab,target string')</code> ==&gt; start with</li> </ul> <pre><code>import re\nmatch = re.search('^learn','learn python is very easy!!')\n\nif match is not None:\n    print('Target string start with our pattern')\nelse:\n    print(\"Taerget string not start with out patteren\")\n</code></pre>"},{"location":"python_tutorials/RE/#symbol","title":"$ symbol","text":"<p><code>$</code> means end with</p> <pre><code>import re\n\nmatch = re.search('easy$',\"learn python is very easy\")\n\nif match:\n    print('Target string end with our pattern')\nelse:\n    print(\"Taerget string not end with out patteren\")\n</code></pre> <pre><code>import re\n\nmatch = re.search('Easy$',\"learn python is very easy\")\n\nif match:\n    print('Target string end with our pattern')\nelse:\n    print(\"Taerget string not end with out patteren\")\n</code></pre> <pre><code>import re\n\nmatch = re.search('EASY$',\"learn python is very easy\",re.IGNORECASE)\n\nif match:\n    print('Target string end with our pattern')\nelse:\n    print(\"Taerget string not end with out patteren\")\n</code></pre>"},{"location":"python_tutorials/RE/#write-a-regular-expression-to-represent-all-yava-lang-identifier","title":"Write a Regular Expression to represent all YAVA lang identifier?","text":"<p>Rule:</p> <ol> <li>The allowed charaters are a-z,A-Z,0-9,#</li> <li>The first character should be lowercase alphabet symbol from a to k</li> <li>the scond character shoild be a digit divisible by 3</li> <li>The length of identifier should be atkeast 2 a9cd#3</li> </ol> <ul> <li><code>[a-k][0369][a-zA-Z0-9#]*</code></li> <li><code>[a-zA-Z0-9#]*</code> = &gt; We can take character any number of time including zero times also</li> <li><code>+=</code> &gt; We can take character alteast once</li> <li><code>?</code> =&gt; atmost once (either onetime pr zerotimes)</li> </ul> <pre><code>import re\n\ntarget = input(\"Enter any identifier to check \")\n\npattern = \"[a-k][0369][a-zA-Z0-9#]*\"\nmatch = re.fullmatch(pattern,target)\n\nif match:\n    print(\"valid identifier \")\n\nelse:\n    print(\"Invlid identifer \")\n</code></pre>"},{"location":"python_tutorials/RE/#3-write-a-regular-expression-to-represent-all-10-digit-mobile-numbers","title":"3 Write a regular expression to represent all 10 digit mobile numbers","text":"<ol> <li>The number should contains exactly 10 digits</li> <li>The first should be from 6 to 9 only.</li> </ol> <ul> <li><code>[6-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]</code></li> <li><code>[6-9][0-9]{9} | 0[6-9][0-9]{9} | 91[6-9][0-9]{9}</code></li> <li><code>(091)? [6-9][0-9]{9}</code></li> </ul>"},{"location":"python_tutorials/RE/#wap-to-extract-all-mobile-numbers-present-in-inputtxt-where-numbers-are-mixed-with-normal-text-data","title":"WAP to extract all mobile numbers present in input.txt where numbers are mixed with normal text data?","text":"<pre><code>import re\n\nf1 = open('input.txt', 'r')\nf2 = open('mobile_number.txt','w')\n\npattern = '(0 | 91)?[6-9][0-9]{9}'\n\nfor line in f1:\n    matcher = re.finditer(pattern,line)\n\n    for match in matcher:\n        f2.write(match.group() + '\\n')\n\n\nf1.close()\nf2.close()\n\nprint(\"Extraction complete open file to see results\")\n</code></pre> mobile number<pre><code>import re\n\nmobile_regex = r'\\b(?:\\+?91|0)?[-]?\\(?[6789]\\d{2}\\)?[-]?\\d{3}[-]?\\d{4}\\b'\n\nwith open('input.txt', 'r') as file:\n    data = file.read()\n    # Find all matches of mobile numbers in the data\n    mobile_numbers = re.findall(mobile_regex, data)\n\n# Print the extracted mobile numbers\nfor number in mobile_numbers:\n    print(number)\n\nprint(\"Extraction complete. Open file to see results.\")\n</code></pre>"},{"location":"python_tutorials/RE/#wap-to-check-wheather-given-car-registration-number-is-valid-telangana-state-registration-number-or-not","title":"WAP to check wheather given car registration number is valid Telangana state registration Number or Not?","text":"Chical registration<pre><code>import re\n\nnum = input(\"Enter vehicle Registration no to validate \").upper()\n\npatteren = \"TS[012][0-9][A-Z][A-Z][0-4]{4}\"\n\nmatcher = re.fullmatch(patteren,num)\n\nif matcher:\n    print(\"Valid Vehicale Registration Number\")\nelse:\n    print(\"Invalid Vehicale Registration Number\")\n</code></pre>"},{"location":"python_tutorials/RE/#wap-to-check-wheater-the-given-mail-id-is-valid-or-not","title":"WAP to check wheater the given mail id is valid or not?","text":"valid mail id code<pre><code>import re\n\nnum = input(\"Enter mail \")\n\npatteren = \"[a-zA-Z0-9][a-zA-Z0-9._]*@gmail.com\"\n\nmatcher = re.fullmatch(patteren,num)\n\nif matcher:\n    print(\"valid mail \")\nelse:\n    print(\"Invalid mail\")\n</code></pre>"},{"location":"python_tutorials/RE/#q-sort-the-list-using-re","title":"Q sort the list using re","text":"<p>file_paths = [     'static\\pdf\\01 Adsolut initiatie\\page_1.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_10.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_11.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_12.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_13.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_14.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_15.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_16.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_17.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_18.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_19.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_2.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_20.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_21.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_22.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_23.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_24.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_25.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_26.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_27.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_28.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_29.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_3.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_30.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_4.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_5.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_6.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_7.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_8.pdf',     'static\\pdf\\01 Adsolut initiatie\\page_9.pdf' ]</p> todo shorting remove more then one space<pre><code>import re\n\ndef split_by_spaces(text):\n    # Use regex to split by one or more spaces\n    split_text = re.split(r'\\s+', text.strip())  # Strip leading/trailing whitespace\n    return split_text\n\n# Example usage\noriginal_text = \"This   is  an example    string with  multiple spaces.\"\nsplit_result = split_by_spaces(original_text)\n\nprint(f\"Original Text: '{original_text}'\")\nprint(f\"Split Result: {split_result}\")\n\n# Original Text: 'This   is  an example    string with  multiple spaces.'\n# Split Result: ['This', 'is', 'an', 'example', 'string', 'with', 'multiple', 'spaces.'\n</code></pre>"},{"location":"python_tutorials/RE/#program-to-find-only-digit-numbers","title":"Program to find Only digit Numbers","text":"Only digit allowed program<pre><code>import re\n\ndef remove_str_special_char(strings: str):\n    l = re.findall(r'\\d', strings)\n    print(l)\n\nremove_str_special_char(\"a7b9k2@5kmn4\")\ndef remove_str_special_char_0(strings: str):\n    l = re.findall(r'\\D', strings)\n    print(l)\n\nremove_str_special_char_0(\"a7b9k2@5kmn4\")\ndef remove_str_special_char_1(strings: str):\n    matcher = re.finditer('[0-9]',strings)\n    for match in matcher:\n        print(f\"{match.group()}\")\n\nremove_str_special_char_1(\"a7b9k2@skmn4\")\n\n\ndef extract_digits(strings: str):\n    # Remove all non-digit characters and keep only the digits\n    digits = re.sub(r'\\D', '', strings)\n    print(digits)\n\nextract_digits(\"a7b9k2@5kmn4\")\n</code></pre>"},{"location":"python_tutorials/RE/#date-parser","title":"Date parser","text":"<pre><code>from dateutil import parser\n\ndef validate_date(date_string: str):\n    try:\n        # Try parsing the date string\n        parsed_date = parser.parse(date_string)\n        return True  # If no exception occurs, the date is valid\n    except (ValueError, TypeError):\n        return False  # If parsing fails, return False\n\n# Test cases\nprint(validate_date(\"2024-11-25\"))  # Valid date\nprint(validate_date(\"11/25/2024\"))  # Valid date\nprint(validate_date(\"25-11-2024\"))  # Valid date\nprint(validate_date(\"2024-02-30\"))  # Invalid date\nprint(validate_date(\"V 2024-02-30\"))  # Invalid date\nprint(validate_date(\"a2024-02-30\"))  # Invalid date\n</code></pre>"},{"location":"python_tutorials/Random/","title":"Random module","text":""},{"location":"python_tutorials/Random/#examples","title":"EXAMPLES","text":""},{"location":"python_tutorials/Random/#7-python-program-to-generate-a-random-number","title":"7. Python Program to Generate a Random Number","text":"<pre><code># Program to generate a random number between 0 and 9\n\n# importing the random module\nimport random\n\nprint(random.randint(0,9))\n</code></pre> <pre><code>from random import randint,random\n\nrandint(1,11)\n</code></pre> <pre><code>from random import randint,random\n\nrandint(1,11)\n</code></pre> <pre><code>random_float = random()*10\nrandom_float\n</code></pre>"},{"location":"python_tutorials/Random/#66-python-program-to-randomly-select-an-element-from-the-list","title":"66. Python Program to Randomly Select an Element From the List","text":"<pre><code># Example 1: Using random module\nimport random\n\nmy_list = [1, 'a', 32, 'c', 'd', 31]\nprint(random.choice(my_list))\n</code></pre> <pre><code># Example 2: Using secrets module\nimport secrets\n\nmy_list = [1, 'a', 32, 'c', 'd', 31]\nprint(secrets.choice(my_list))\n</code></pre> <pre><code>import random\n\nmy_list = [1, 'a', 32, 'c', 'd', 31]\nprint(random.choices(my_list))\n</code></pre> <pre><code>import random\n\nmy_list = [1, 'a', 32, 'c', 'd', 31]\nprint(random.choices(my_list,k = 2))\n</code></pre>"},{"location":"python_tutorials/Serialization/","title":"SERIALIZATION","text":"<p><code>Employee.py</code></p> <p>Employee Class will look like this</p> <pre><code>class Employee:\n def __init__(self,eno,ename,esal,eaddr):\n  self.eno = eno\n  self.ename = ename\n  self.esal = esal\n  self.eaddr = eaddr\n\n def display(self):\n  print(f'eno:{self.eno} ename: {self.ename} esal: {self.esal} eaddr: {self.eaddr}')\n</code></pre>"},{"location":"python_tutorials/Serialization/#deserialization","title":"Deserialization","text":"<ul> <li>loads() --&gt; Converting JSON string to python dict</li> <li>load() --&gt; Reading json from a file and conveting that json into python dict</li> </ul>"},{"location":"python_tutorials/Serialization/#serialization_1","title":"serialization","text":"<ul> <li>dump() --&gt; from python dict to json and write json to file</li> <li>dumps() --&gt; from pyhton dict to json string</li> </ul> <pre><code>import json\n\nemployee = {\n    'name':'ashish',\n    'age':25,\n    'salary':25000.00,\n    'isMarried':False,\n    'girlFriend':True,\n    'ex':None\n}\n\n# serialization from python dict obj to json_string\njson_string = json.dumps(employee,indent=4,sort_keys=True)\nprint(json_string)\n\n# serialization from python dict object to json file\nwith open('emp.json','w') as f:\n json.dump(employee,f,indent=4)\n\n# deserialization json_string to python dict\npy_dict = json.loads(json_string)\nprint(py_dict)\n\nwith open('emp.json','r') as f:\n emp_dict = json.load(f)\nprint(emp_dict)\n</code></pre>"},{"location":"python_tutorials/Serialization/#custom-object-serialization","title":"custom object serialization","text":"<pre><code>import json\n\nclass Employee:\n def __init__(self,eno,ename,esal,eaddr):\n  self.eno = eno\n  self.ename = ename\n  self.esal = esal\n  self.eaddr = eaddr\n\n def display(self):\n  print(f'eno:{self.eno} ename: {self.ename} esal: {self.esal} eaddr: {self.eaddr}')\n\ne = Employee(100,\"Ashish\",90000,\"patiala\")\nemp_dict = e.__dict__\nprint(emp_dict)\n\n# serialization\nwith open('emp.json','w') as f:\n json.dump(emp_dict,f,indent=4)\n\n# deserialization\nwith open('emp.json','r') as f:\n d= json.load(f)\nprint(type(d))\n\nnewemp = Employee(d['eno'],d['ename'],d['esal'],d['eaddr'])\n\nnewemp.display()\n</code></pre>"},{"location":"python_tutorials/Serialization/#yaml-sweialization","title":"YAML Sweialization","text":"<pre><code># YAML Ain't Markup Language \n# Yet Another Markup Language\n# more readable and ligt weight then json\n\nfrom pyaml import yaml\n\nemp_dict  = {\n    'Person 1': {'age': 20, 'city': 'New York', 'hobbies': ['reading', 'hiking', 'coding']},\n    'Person 2': {'age': 21, 'city': 'New York', 'hobbies': ['reading', 'hiking', 'coding']},\n    'Person 3': {'age': 22, 'city': 'New York', 'hobbies': ['reading', 'hiking', 'coding']}\n}\n\n\n\n\n\n# serialization from dict object to yaml string\nyaml_string = yaml.dump(emp_dict)\nprint(yaml_string)\n\n# dump() to serialize from python dict object to yaml string/file\n# serialization to yaml file\nwith open('emp.yaml','w') as f:\n yaml.dump(emp_dict,f)\n\n# Deserilaization from yaml string to python dict\ned = yaml.safe_load(yaml_string)\nfor k,v in ed.items():\n print(f'{k} --&gt; {v}')\n\n# Deserialization from yaml file\nwith open('emp.yaml','r') as f:\n ed2 = yaml.safe_load(f)\n print(ed2)\nprint(type(ed2))\nprint(ed2)\n</code></pre>"},{"location":"python_tutorials/Serialization/#pickl-serialization","title":"PICKL Serialization","text":"<pre><code>import json\nimport pickle\nfrom Employee import Employee\n\ne = Employee(100,\"ashish\",1000.00,\"punjab\")\n\n# serialaization of employee object\nwith open('emp.ser','wb') as f:\n  pickle.dump(e,f)\n  print('Object Serilaization Complete')\n\n# Deserializarion of employee object\nwith open('emp.ser','rb') as f:\n  emp = pickle.load(f)\n  print('Oject Deserialization Complete')\n\nprint('printing Employee Information')\nemp.display()\n</code></pre>"},{"location":"python_tutorials/Serialization/#json-pickle","title":"JSON PICKLE","text":"<pre><code># encode() -&gt; To convert an object to json_string\n# decode() -&gt; To convert json_string to orignal object\n# pip install jsonpickle\nimport json\nimport jsonpickle\nclass Employee:\n def __init__(self,eno,ename,esal,eaddr):\n  self.eno = eno\n  self.ename = ename\n  self.esal = esal\n  self.eaddr = eaddr\n\n def display(self):\n  print(f'eno:{self.eno} ename: {self.ename} esal: {self.esal} eaddr: {self.eaddr}')\n\ne = Employee(100,\"ashish\",100000.00,\"patiala\")\n\n# serialization\njson_string = jsonpickle.encode(e)\nprint(json_string)\n\n# serialization with file\nwith open('empkl.json','w') as f:\n f.write(json_string)\n\n# deserialization\nnewemp = jsonpickle.decode(json_string)\nnewemp.display()\n\n# deserialization from file\nwith open('empkl.json','r') as f:\n json_string = f.readline()\nnewe = jsonpickle.decode(json_string)\nnewe.display()\n</code></pre>"},{"location":"python_tutorials/Set/","title":"Set","text":""},{"location":"python_tutorials/Set/#set-data-structure","title":"Set Data Structure","text":"<ul> <li>If we want to represent a group of unique values as a single entity then we should go for set.</li> <li>Duplicates are not allowed.</li> <li>Insertion order is not preserved.But we can sort the elements.</li> <li>Indexing and slicing not allowed for the set.</li> <li>Heterogeneous elements are allowed.</li> <li>Set objects are mutable i.e once we creates set object we can perform any changes in that object based on our requirement.</li> <li>We can represent set elements within curly braces and with comma seperation</li> <li>We can apply mathematical operations like union,intersection,difference etc on set objects.</li> </ul>"},{"location":"python_tutorials/Set/#creation-of-set-objects","title":"Creation of Set objects","text":"<pre><code>s={10,20,30,40}\nprint(s)\nprint(type(s))\n\n# Output\n# {40, 10, 20, 30}\n# &lt;class 'set'&gt;\n</code></pre> <p>We can create set objects by using set() function s=set(any sequence)</p> <pre><code># Eg 1:\n1. l = [10,20,30,40,10,20,10]\n2. s=set(l)\n3. print(s) # {40, 10, 20, 30}\n\n# Eg 2:\n1. s=set(range(5))\n2. print(s) #{0, 1, 2, 3, 4}\n</code></pre> <p>Note: While creating empty set we have to take special care. Compulsory we should use set() function.</p> <p>s={} ==&gt;It is treated as dictionary but not empty set.</p> <pre><code># Eg:\ns={}\nprint(s)\nprint(type(s))\n\n# Output\n# {}\n# &lt;class 'dict'&gt;\n\n# Eg:\n s=set()\n print(s)\n print(type(s))\n\n#  Output\n#  set()\n#  &lt;class 'set'&gt;\n</code></pre>"},{"location":"python_tutorials/Set/#important-functions-of-set","title":"Important functions of set","text":""},{"location":"python_tutorials/Set/#1-addx","title":"1. add(x)","text":"<p>Adds item x to the set</p> <pre><code># Eg:\n1. s={10,20,30}\n2. s.add(40);\n3. print(s) #{40, 10, 20, 30}\n2. update(x,y,z):\n</code></pre> <p>To add multiple items to the set. Arguments are not individual elements and these are Iterable objects like List,range etc. All elements present in the given Iterable objects will be added to the set.</p> <pre><code># Eg:\n1. s={10,20,30}\n2. l=[40,50,60,10]\n3. s.update(l,range(5))\n4. print(s)\n\n# Output\n7. {0, 1, 2, 3, 4, 40, 10, 50, 20, 60, 30}\n</code></pre>"},{"location":"python_tutorials/Set/#q-what-is-the-difference-between-add-and-update-functions-in-set","title":"Q. What is the difference between add() and update() functions in set?","text":"<p>We can use add() to add individual item to the Set,where as we can use update() function to add multiple items to Set. add() function can take only one argument where as update() function can take any number of arguments but all arguments should be iterable objects.</p>"},{"location":"python_tutorials/Set/#q-which-of-the-following-are-valid-for-set-s","title":"Q. Which of the following are valid for set s?","text":"<ol> <li>s.add(10)</li> <li>s.add(10,20,30) TypeError: add() takes exactly one argument (3 given)</li> <li>s.update(10) TypeError: 'int' object is not iterable</li> <li>s.update(range(1,10,2),range(0,10,2))</li> </ol>"},{"location":"python_tutorials/Set/#3-copy","title":"3. copy()","text":"<p>Returns copy of the set. It is cloned object.</p> <pre><code>s={10,20,30}\ns1=s.copy()\nprint(s1)\n</code></pre>"},{"location":"python_tutorials/Set/#4-pop","title":"4. pop()","text":"<p>It removes and returns some random element from the set.</p> <pre><code>s={40,10,30,20}\n print(s)\n print(s.pop())\n print(s)\n\n#  Output\n#  {40, 10, 20, 30}\n#  40\n#  {10, 20, 30}\n</code></pre>"},{"location":"python_tutorials/Set/#5-removex","title":"5. remove(x)","text":"<p>It removes specified element from the set. If the specified element not present in the Set then we will get KeyError</p> <pre><code>s={40,10,30,20}\ns.remove(30)\nprint(s) # {40, 10, 20}\ns.remove(50) ==&gt;KeyError: 50\n</code></pre>"},{"location":"python_tutorials/Set/#6-discardx","title":"6. discard(x)","text":"<p>It removes the specified element from the set. If the specified element not present in the set then we won't get any error.</p> <pre><code>s={10,20,30}\ns.discard(10)\nprint(s) ===&gt;{20, 30}\ns.discard(50)\nprint(s) ==&gt;{20, 30}\n</code></pre> <p>Q. What is the difference between remove() and discard() functions in Set? Q. Explain differences between pop(),remove() and discard() functionsin Set?</p>"},{"location":"python_tutorials/Set/#q1-what-is-the-difference-between-remove-and-discard-functions-in-a-set","title":"\ud83d\udd39 Q1: What is the difference between <code>remove()</code> and <code>discard()</code> functions in a <code>set</code>?","text":"Feature <code>remove()</code> <code>discard()</code> Purpose Removes a specific element Also removes a specific element Error Handling Raises <code>KeyError</code> if element not found Does not raise an error Use Case Use when you are sure element exists Use when element may or may not exist"},{"location":"python_tutorials/Set/#example","title":"\u2705 Example","text":"<pre><code>s = {1, 2, 3}\n\ns.remove(2)     # Works fine\ns.discard(3)    # Works fine\ns.remove(4)     # \u274c Raises KeyError\ns.discard(4)    # \u2705 Does nothing\n</code></pre>"},{"location":"python_tutorials/Set/#q2-explain-differences-between-pop-remove-and-discard-in-a-set","title":"\ud83d\udd39 Q2: Explain differences between <code>pop()</code>, <code>remove()</code>, and <code>discard()</code> in a <code>set</code>","text":"Function Behavior Removes... Raises Error if Not Found Return Value <code>pop()</code> Removes and returns an arbitrary element Random element \u274c Only if set is empty \u2714\ufe0f The removed item <code>remove(x)</code> Removes element <code>x</code> Specific element \u2714\ufe0f Yes (<code>KeyError</code>) \u274c Returns <code>None</code> <code>discard(x)</code> Removes element <code>x</code> Specific element \u274c No error if not found \u274c Returns <code>None</code>"},{"location":"python_tutorials/Set/#example_1","title":"Example","text":"<pre><code>s = {10, 20, 30}\n\nprint(s.pop())     # Removes and prints a random element\n\ns.remove(20)       # Removes 20\ns.discard(40)      # Does nothing, no error\n\ns.remove(40)       # \u274c Raises KeyError\n</code></pre>"},{"location":"python_tutorials/Set/#summary","title":"Summary","text":"<ul> <li>Use <code>remove()</code> if you're sure the item exists.</li> <li>Use <code>discard()</code> if the item may not be in the set.</li> <li>Use <code>pop()</code> to remove and get a random item (often used when order doesn't matter).</li> </ul> <p>7.clear(): To remove all elements from the Set.</p> <pre><code> s={10,20,30}\n print(s) #  {10, 20, 30}\n\n s.clear()\n print(s) #  set()\n</code></pre>"},{"location":"python_tutorials/Set/#mathematical-operations-on-the-set","title":"Mathematical operations on the Set","text":"<ol> <li> <p>union():</p> <p>x.union(y) ==&gt;We can use this function to return all elements present in both sets x.union(y) or x|y</p> <p>Eg:</p> <pre><code>x={10,20,30,40}\ny={30,40,50,60}\n\nprint(x.union(y)) #{10, 20, 30, 40, 50, 60}\nprint(x|y) #{10, 20, 30, 40, 50, 60}\n</code></pre> </li> <li> <p>intersection():</p> <p>x.intersection(y) or x&amp;y Returns common elements present in both x and y</p> <p>Eg:</p> <pre><code>x={10,20,30,40}\ny={30,40,50,60}\n\nprint(x.intersection(y)) #{40, 30}\nprint(x&amp;y) #{40, 30}\n</code></pre> </li> <li> <p>difference():</p> <p><code>x.difference(y) or x-y</code></p> <p>returns the elements present in x but not in y</p> <p>Eg:</p> <pre><code>x={10,20,30,40}\ny={30,40,50,60}\nprint(x.difference(y)) #{10, 20}\nprint(x-y) #{10, 20}\nprint(y-x) #{50, 60}\n</code></pre> </li> <li> <p>symmetric_difference():</p> <p><code>x.symmetric_difference(y) or x^y</code></p> <p>Returns elements present in either x or y but not in both Eg:</p> <pre><code>x={10,20,30,40}\ny={30,40,50,60}\nprint(x.symmetric_difference(y)) #{10, 50, 20, 60}\nprint(x^y) #{10, 50, 20, 60}\n</code></pre> <p>Membership operators: (in , not in)</p> <pre><code>s=set(\"durga\")\n\nprint(s)  # {'u', 'g', 'r', 'd', 'a'}\nprint('d' in s) # True\nprint('z' in s)  # False\n</code></pre> <p>Set Comprehension:</p> <p>Set comprehension is possible.</p> <pre><code>s={x*x for x in range(5)}\nprint(s) #{0, 1, 4, 9, 16}\ns={2**x for x in range(2,10,2)}\nprint(s) #{16, 256, 64, 4}\n\n### set objects won't support indexing and slicing:\n# Eg:\ns={10,20,30,40}\nprint(s[0]) # ==&gt;TypeError: 'set' object does not support indexing\nprint(s[1:3]) # ==&gt;TypeError: 'set' object is not subscriptable\n</code></pre> <p>Q.Write a program to eliminate duplicates present in the list? Approach-1:</p> <pre><code>l=eval(input(\"Enter List of values: \"))\ns=set(l)\nprint(s)\n\nEnter List of values: [10,20,30,10,20,40]\n{40, 10, 20, 30}\n</code></pre> <p>Approach-2:</p> <pre><code>l=eval(input(\"Enter List of values: \"))\nl1=[]\nfor x in l:\n    if x not in l1:\n        l1.append(x)\nprint(l1)\nEnter List of values: [10,20,30,10,20,40]\n[10, 20, 30, 40]\n</code></pre> <p>Q. Write a program to print different vowels present in the given word?</p> <pre><code>w=input(\"Enter word to search for vowels: \")\ns=set(w)\nv={'a','e','i','o','u'}\nd=s.intersection(v)\n\nprint(\"The different vowel present in\",w,\"are\",d)\n\nEnter word to search for vowels: durga\nThe different vowel present in durga are {'u', 'a'}\n</code></pre> </li> </ol>"},{"location":"python_tutorials/Set/#42-python-program-to-illustrate-different-set-operations","title":"42. Python Program to Illustrate Different Set Operations","text":"<pre><code># Python Program to Illustrate Different Set Operations\n\n# Define two sets\nset1 = {1, 2, 3, 4, 5}\nset2 = {4, 5, 6, 7, 8}\n\nprint(\"Set 1:\", set1)\nprint(\"Set 2:\", set2)\n\n# Union of sets\nunion_set = set1 | set2\nprint(\"\\nUnion of Set1 and Set2:\", union_set)\n\n# Intersection of sets\nintersection_set = set1 &amp; set2\nprint(\"Intersection of Set1 and Set2:\", intersection_set)\n\n# Difference of sets\ndifference_set1 = set1 - set2\ndifference_set2 = set2 - set1\nprint(\"Difference of Set1 - Set2:\", difference_set1)\nprint(\"Difference of Set2 - Set1:\", difference_set2)\n\n# Symmetric Difference of sets\nsymmetric_difference_set = set1 ^ set2\nprint(\"Symmetric Difference of Set1 and Set2:\", symmetric_difference_set)\n\n# Subset and Superset\nprint(\"\\nIs Set1 subset of Set2?\", set1.issubset(set2))\nprint(\"Is Set1 superset of Set2?\", set1.issuperset(set2))\n\n# Disjoint sets\nprint(\"Are Set1 and Set2 disjoint?\", set1.isdisjoint(set2))\n</code></pre>"},{"location":"python_tutorials/decorator/","title":"Decorator","text":""},{"location":"python_tutorials/decorator/#what-is-a-decorator-in-python","title":"What is a Decorator in Python?","text":"<p>A decorator in Python is a function that takes another function as input and extends or modifies its behavior without modifying its actual code. Decorators are often used to add functionalities like logging, authentication, or timing to functions.</p>"},{"location":"python_tutorials/decorator/#how-decorators-work","title":"How Decorators Work","text":"<p>Decorators use the concept of higher-order functions, meaning they take a function as input, add extra behavior, and return a new function.</p> <p>Basic Structure of a Decorator</p> <pre><code>def my_decorator(func):\n    def wrapper():\n        print(\"Something before the function runs\")\n        func()\n        print(\"Something after the function runs\")\n    return wrapper\n</code></pre> <p>Now, you can apply this decorator to a function:</p> <pre><code>@my_decorator\ndef say_hello():\n    print(\"Hello, World!\")\n\nsay_hello()\nOutput\nSomething before the function runs\nHello, World!\nSomething after the function runs\n</code></pre>"},{"location":"python_tutorials/decorator/#example-1-logging-with-a-decorator","title":"Example 1: Logging with a Decorator","text":"<pre><code>def log_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(f\"Calling function: {func.__name__} with arguments {args} {kwargs}\")\n        result = func(*args, **kwargs)\n        print(f\"Function {func.__name__} returned {result}\")\n        return result\n    return wrapper\n\n@log_decorator\ndef add(a, b):\n    return a + b\n\nprint(add(5, 3))\nOutput\n\nCalling function: add with arguments (5, 3) {}\nFunction add returned 8\n</code></pre>"},{"location":"python_tutorials/decorator/#example-2-timing-a-function-execution","title":"Example 2: Timing a Function Execution","text":"<pre><code>import time\n\ndef timer_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"Function {func.__name__} took {end_time - start_time:.5f} seconds to execute\")\n        return result\n    return wrapper\n\n@timer_decorator\ndef slow_function():\n    time.sleep(2)\n    print(\"Finished execution\")\n\nslow_function()\n</code></pre> <p>Output</p> <p>Finished Function slow_function took 2.00045 seconds to execute</p>"},{"location":"python_tutorials/decorator/#example-3-checking-user-authentication","title":"Example 3: Checking User Authentication","text":"<pre><code>def authenticate(func):\n    def wrapper(user):\n        if user != \"admin\":\n            print(\"Access denied!\")\n            return\n        return func(user)\n    return wrapper\n\n@authenticate\ndef dashboard(user):\n    print(f\"Welcome to the dashboard, {user}!\")\n\ndashboard(\"guest\")  # Output: Access denied!\ndashboard(\"admin\")  # Output: Welcome to the dashboard, admin!\nChaining Multiple Decorators\n</code></pre> <p>You can apply multiple decorators to a function:</p> <pre><code>@timer_decorator\n@log_decorator\ndef multiply(a, b):\n    return a * b\n\nprint(multiply(4, 5))\n</code></pre> <p>This will first log the function call, then measure its execution time.</p>"},{"location":"python_tutorials/fstring/","title":"F-String","text":""},{"location":"python_tutorials/fstring/#string-formating-techniques","title":"String Formating techniques","text":"<ol> <li><code>%</code> - formatting =&gt; 1.0v</li> <li><code>str.formate()</code> =&gt; 2.6 Best for Dictionary</li> <li><code>f-string</code> =&gt; 3.6 Higly recommened because of concise code, readabilty,speed</li> </ol>"},{"location":"python_tutorials/fstring/#timeit-module","title":"timeit module","text":"<ul> <li>python inbulit module</li> <li>By using timeit module, we can measure execution tiome of small coding snippets</li> </ul> <p>t = timeit.timeit(code,numbeeer =1000)</p> <ul> <li>numbers =1000 =&gt; execute ccode with number 10000 of times PVM take hwo much time it will retuen in sec</li> </ul>"},{"location":"python_tutorials/fstring/#example","title":"example","text":"<pre><code>import timeit\nt= timeit.timeit('print(\"hello\")',number=1000)\nprint(f'The time taken {t} sec')\n</code></pre>"},{"location":"python_tutorials/fstring/#handling-quotes-in-f-sting","title":"Handling quotes in f-sting","text":"<pre><code>subject ='math'\na = 'a'\nprint(f''' The class of {subject} by \"{a}\" too good''')\n</code></pre>"},{"location":"python_tutorials/fstring/#processing-dictionary-data-by-f-string","title":"Processing dictionary data by f-string","text":"<p>performance wise f-string is grater Higly recommended to use f-string</p>"},{"location":"python_tutorials/fstring/#how-to-define-multi-line-f-string","title":"How to define multi line f-string","text":"<pre><code>name = \"ashish\"\nage = 26\n\nmessage = f'''\n    name: {name},\n    age: {age}\n    '''\nprint(message)\n</code></pre>"},{"location":"python_tutorials/fstring/#python-f-string-calling-a-function","title":"Python f-string calling a function","text":"<p>we can call function directly from f-string</p> <pre><code>print(f'Name: {name.upper()}')\ndef mymax(a,b):\n    max = a if a&gt;b else b\n    return max\n\na = input(\"a \")\nb = input(\"b \")\n\nprint(f'The max of {a} and {b} is {mymax(a,b)}')\nhelp(__repr__)\n</code></pre> <p><code>__repr__</code> =&gt; String to Object <code>__str__</code>  =&gt; Object to string</p>"},{"location":"python_tutorials/fstring/#python-f-string-for-objects","title":"Python f-string for objects","text":"<ul> <li><code>str.format()</code> method will always call str() method only.</li> <li>but in f-string, we can call either str() or repr() based on our requirment</li> </ul> <pre><code>class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __repr__(self):\n        return f\"Person(name={self.name}, age={self.age})\"\n\n    def __str__(self):\n        return f\"{self.name}, {self.age} years old\"\n\n# Creating an instance of the Person class\n\nperson = Person(\"John\", 30)\n\n# Using f-string with __repr__()\n\nprint(f\"Representation of person: {person!r}\")\n\n# Using f-string with __str__()\n\nprint(f\"String representation of person: {person}\")\n</code></pre> <p>The repr() method returns a string representation suitable for debugging and development. It is often used with !r in f-strings to call repr() explicitly.</p> <p>The str() method returns a more user-friendly string representation. When using f-strings, the default string conversion is the same as calling str()</p>"},{"location":"python_tutorials/fstring/#python-38-version-enhasment-related-to-f-string","title":"python 3.8 version enhasment  related to f-string","text":"<ul> <li>We can use = symbol f-string for self documentating expressions and it is useful for debugging purposes.</li> </ul> <pre><code>x = 10\ny = 10\nprint(f'{x = }')  # =&gt; print(f'x = {x}')\nprint(f'{y = }')  # =&gt; print(f'y = {y}')\n</code></pre> <ul> <li>We can also use walrus operator (<code>:=</code>) inside f-string:</li> </ul> <pre><code>import math\nhalf_radious = 10\n\nprint(f'The Area of circle with radius {(r := 2 * half_radious)} is {math.pi ** r*r }')\n\n# *__Note:__* `()` -&gt; This is important in walrous operator in this example other wise we will get error.\n\nprint(f'The Area of circle with radius {r := 2 * half_radious} is {math.pi ** r*r }')\n</code></pre> <ul> <li>f - string can in python 3.6 version but <code>=</code> and <code>:=</code> operator are allowed inside f-string in python 3.8 version</li> <li><code>%</code> -&gt; formating and <code>str.formate()</code> Not Recommanded. f string</li> </ul> <ul> <li>has performance</li> <li>concise</li> <li>less verbose</li> <li>more readable</li> </ul> <pre><code>class Student:\n    def __init__(self, name, rollno, marks):\n        self.name = name\n        self.rollno = rollno\n        self.marks = marks\n    def __str__(self):\n        return f'Name: {self.name}, RollNo: {self.rollno}, Marks: {self.marks}'\n\n    def __repr__(self):\n        return f'Student Name: {self.name}, Student RollNo: {self.rollno}, Student Marks: {self.marks}'\n\ns = Student('ashish',101,80)\nprint('Information-------&gt; {}'.format(s))\nprint(f'Information-------&gt; {s}')\nprint(f'Information-------&gt; {s!r}')\n</code></pre>"},{"location":"python_tutorials/fstring/#expression-inside-f-string","title":"Expression inside f-string","text":"<p>We can pass expression inside f-string and those expressions will be evaluated at runtime {8*8} print({8*8})</p>"},{"location":"python_tutorials/fstring/#how-to-use-curly-braces-inside-f-string","title":"How to use curly braces inside f-string","text":"<ul> <li>{ =&gt; replacement operator</li> <li>{{=&gt; it is simple of '{'</li> </ul> <pre><code>print(f'{{ is special symbol ')\n\nprint(f'{{{ is special symbol ')\nn=1000000000\nprint(f'{n:_}')\nn=1000000000\nprint(f'{n:,}')\nn=1000000000\nprint(f'{n:-}')\nn: int = 1_000_000_000\nprint(n)\nn: float = 1e9\nprint(n)\nvar: str = 'var'\n\nprint(f'{var: &gt; 20}:')\nprint(f'{var: &lt; 20}:')\nvar: str = 'var'\n\nprint(f'{var:&gt;20}:')\nprint(f'{var:&lt;20}:')\nprint(f'{var:20}:')\nprint(f'{var:^20}:')\n\n# fill element\n\nvar: str = 'var'\n\nprint(f'{var:_&gt;20}:')\nprint(f'{var:#&lt;20}:')\nprint(f'{var:|^20}:')\nprint(f'{var:*^20}:')\n</code></pre> <pre><code>from datetime import datetime\n\nnow: datetime = datetime.now()\n\nprint(f'{now:%d.%m.%y (%H:%M:%S)}')\nprint(f'{now:%c}') #local date and time\nprint(f'{now:%I%p}') #12 p.m\nn: float = 1234.5678\nprint(round(n, 2))\nn: float = 1234.5678\n\nprint(f'Result: {n:.2f}')\nprint(f'Result: {n:.0f}')\n\nprint(f'Result: {n:,.3f}')\nprint(f'Result: {n:_.3f}')\n\na: int = 5\nb: int = 10\n\nmy_var: str = \"ashish\"\n\nprint(f'{a + b = }')\n</code></pre> <pre><code>import string\n\nprint(string.ascii_letters)\nprint(string.digits)\nprint(string.punctuation)\nprint(string.printable)\n\n#### Sort below string\n\nfile_paths = [\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_1.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_10.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_11.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_12.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_13.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_14.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_15.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_16.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_17.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_18.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_19.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_2.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_20.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_21.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_22.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_23.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_24.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_25.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_26.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_27.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_28.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_29.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_3.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_30.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_4.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_5.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_6.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_7.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_8.pdf',\n    'static\\\\pdf\\\\01 Adsolut initiatie\\\\page_9.pdf'\n]\n\nfrom faker import Faker\nfake = Faker()\n\nhelp(fake.phone_number)\nfaker.providers.phone_number()\n</code></pre>"},{"location":"python_tutorials/function/","title":"Functions","text":"<ul> <li>If a group of statments is repeatedly required then it not recommmended to write theses stements everytime serately.</li> <li>We have to define these statments as a single unit and we can call that unit any number of times  based on our requirment without rewriting.</li> <li>This unit is nothing but function</li> </ul> <p>The main advantage of a function is code resablity.</p> <p>Note: In other languages functions are know as methods, procdures, subroutins etc</p> <p>Python supports two types of function</p> <ol> <li>built in dunctions</li> <li>User defined dunction</li> </ol>"},{"location":"python_tutorials/function/#1-build-in-functions","title":"1. Build in functions","text":"<p>THe functions which are coming along with python software automatically, are called build in functions or predefined functions</p> <p>eg:</p> <pre><code>id()\ntype()\ninput()\neval()\n</code></pre> <p>etc..</p>"},{"location":"python_tutorials/function/#2-user-defined-functions","title":"2. User Defined functions","text":"<p>The functions which are developed by programmer explicity to business requirments are called user defined functions:</p> <p>Syntax to create user defined functions:</p> <pre><code>def sunction_name(paramerters):\n    \"\"\"\n    doc string\n    \"\"\"\n    pass\n    return value # optional\n</code></pre> <p>While creating function awe can use 2 keywords</p> <ol> <li>def (mandatory)</li> <li>return (optional)</li> </ol>"},{"location":"python_tutorials/function/#1-write-a-function-to-print-hello-usinf-dunction","title":"1. Write a function to print Hello usinf dunction","text":"<pre><code>def wish():\n    print(\"Helow Good Morning\")\n\nwish()\nwish()\nwish()\n</code></pre>"},{"location":"python_tutorials/function/#parameters-arguments","title":"Parameters / Arguments","text":"<p>Paramerters are inputs to the function.</p> <ul> <li>If a function contains paramerters thrn at the time of calling, compulsory we should provide values otherwise we will get error.</li> </ul>"},{"location":"python_tutorials/function/#write-a-function-to-take-name-of-student-as-input-and-print-widsh-msg-by-name","title":"Write a function to take name of student as input and print widsh msg by name","text":"<pre><code>def wish(name):\n    print(f\"Hello, {name} Good Morning\")\n\nwidh(\"AShish\")\nwidh(\"Bindra\")\n</code></pre>"},{"location":"python_tutorials/function/#return-statement","title":"Return statement","text":"<p>Function can take input values as paramters and executes busines logic and return output to caller with return statement.</p> <pre><code>def add(x,y):\n    return x + y\n\nre = add(10 + 20)\nprint(f\"The sum is {re}\")\n</code></pre> <p>If we are not writing return statemetn then default return value is None</p>"},{"location":"python_tutorials/function/#write-a-function-to-find-factorial-of-given-number","title":"Write a function to find factorial of given number?","text":"<pre><code>def fact(num):\n    reult = 1\n    while num &gt;=1:\n        result = result * num\n        num = num - 1\n\n    return result\n\nfact(5)\n</code></pre>"},{"location":"python_tutorials/function/#returning-multiple-values-from-a-function","title":"Returning multiple values from a function","text":"<p>Python, a function can return any number of values</p> <pre><code>def sum_sub(a,b):\n    sum = a + b\n    sub = a - b\n\n    return sum, sub\n\nx, y = sum_sub(100,50)\n\nprint(\"The sum is:\", x)\n</code></pre>"},{"location":"python_tutorials/function/#types-of-arguments","title":"Types of arguments","text":""},{"location":"python_tutorials/function/#def-f1ab","title":"```def f1(a,b):","text":""},{"location":"python_tutorials/function/#-","title":"------","text":"<p>f1(10,20) <pre><code>a,b are formal arguments where as 10,20 are actual arguments\n\nThere are 4 types are actual arguments are allowed in Python.\n\n1. positional arguments\n2. keyword arguments\n3. default arguments\n4. Variable length arguments\n\n---\n\n1. positional arguments:\n\nThese are the arguments passed to function in correct positnal order\n\n```py\n\ndef sub(a, b):\n    print(a-b)\n\nsub(100,200)\nsub(200,100)\n</code></pre></p> <p>The number of arguments and position of arguments must be matched. If we change the order then result may be changed.</p> <p>If we change the number of arguments then we will get error.</p> <ol> <li>keyword arguments: We can pass argument values by keyword i.e by parameter name.</li> </ol> <pre><code>def wish(name,msg):\n    print(\"Hello\",name,msg)\nwish(name=\"Ashish\",msg=\"Good Morning\")\nwish(msg=\"Good Morning\",name=\"ashish\")\n</code></pre> <p>Here the order of arguments is not important but number of arguments must be matched</p> <p>We can use both positional and keyword arguments simultaneously. But first we have to take positional arguments and then keyword arguments,otherwise we will get syntaxerror.</p> <pre><code>def wish(name,msg):\nprint(\"Hello\",name,msg)\nwish(\"Durga\",\"GoodMorning\") ==&gt;valid\nwish(\"Durga\",msg=\"GoodMorning\") ==&gt;valid\nwish(name=\"Durga\",\"GoodMorning\") ==&gt;invalid\n</code></pre>"},{"location":"python_tutorials/logging/","title":"LOGGING","text":""},{"location":"python_tutorials/logging/#what-the-need-of-logging","title":"What the need of logging","text":"<ul> <li>log file</li> <li>log book</li> <li>log table</li> <li>log libray</li> <li>log lab</li> <li>log office</li> </ul> <p>computer lab log book:</p> <p>S.no, Date, Name, RollNo, login time, desk no/pc no, logout</p> <ol> <li>traking</li> <li>debugging</li> </ol> <p>debugging =&gt; to identifying the bug and fix the bug</p> <p>Note: It is higly recommended to sotre complete application flow and exception information to a file. This process is called logging</p> <p>The main advantages of logging are:</p> <ol> <li>We can use log files performing debugging.</li> <li>we can provide statistic like number of request per day etc.</li> </ol> <p>logging is language in dependent concept</p>"},{"location":"python_tutorials/logging/#loggin-levels","title":"loggin Levels","text":"<ul> <li>CRITICAL --&gt; 50</li> <li>ERROR    --&gt; 40</li> <li>WARNING  --&gt; 30</li> <li>INFO     --&gt; 20</li> <li>DEBUG    --&gt; 10</li> </ul>"},{"location":"python_tutorials/logging/#default-logging-level-warning","title":"default logging level : WARNING","text":""},{"location":"python_tutorials/logging/#the-main-advantages-of-logging-are","title":"The main advantages of logging are","text":"<ul> <li>We can use log file performing debugging</li> <li>We can provide statiistic number of request per day etc</li> </ul> <p>It is higly recommended to store compile application flow and Exception information to a file</p>"},{"location":"python_tutorials/logging/#implement-logging","title":"Implement logging","text":"<p>module: logging</p>"},{"location":"python_tutorials/logging/#logging-level","title":"logging level","text":"<p>depending on type of information, logging data is divided into the following levels in python.</p> <ol> <li>CRITICAL =&gt; 50 (in java we use fateral)<ul> <li>Respresents a very serious problem that need high attention</li> </ul> </li> <li>ERROR = &gt; 40<ul> <li>Represents a serious error</li> </ul> </li> <li>WARNING =&gt; 30 (An alert to programmer)<ul> <li>Represents a warning message, some cation needed.It is alert to the programmer</li> </ul> </li> <li>INFO =&gt; 20<ul> <li>Represents a message with some importasnt information</li> </ul> </li> <li>DEBUG =&gt; 10<ul> <li>Represent a message which can be used for dubugging</li> </ul> </li> <li>NOTSET =&gt; 0<ul> <li>Represents logging level not set</li> </ul> </li> </ol> <p>Default logging level: WARNING</p>"},{"location":"python_tutorials/logging/#how-to-implement-logging","title":"How to implement logging","text":"<ul> <li>Create log file to store our log messages, we have to specift level</li> <li>basicConfig() funvtion of logging module</li> <li><code>logging.basicConfig(filename='log.txt', level = logging.warning)</code></li> <li><code>logging.basicConfig(filename='log.txt', level = 30)</code></li> <li>automatically file will be create 30 or higger  will be shown</li> </ul> <p>DEBUG(20) ==&gt; INFO(20) ==&gt; WARNING(30) =&gt; ERROR(40) ==&gt; CRITICSL(50)</p>"},{"location":"python_tutorials/logging/#write-information","title":"Write Information","text":"<pre><code>import logging\n\nlogging.debug(message)\nlogging.info(message)\nlogging.warning(message)\nlogging.error(message)\nlogging.critical(message)\n</code></pre>"},{"location":"python_tutorials/logging/#write-a-python-program-to-create-a-log-file-and-write-warning-and-higher-level-message","title":"Write a python program to create a log file and write WARNING and Higher level message?","text":"<ul> <li>If we are not specifing file name : console</li> <li>By default in log file data will be appended</li> <li>Instead of appending if we wan't overwrite</li> <li>filemode = 'w'</li> <li>filemode = 'a'</li> <li>default value for file mode: a means append</li> </ul> <pre><code>import logging\n\nlogging.basicConfig(filename='log.txt',level=logging.WARNING,filemode='w')\n\nlogging.debug('Debug message')\nlogging.info('Info message')\nlogging.warning('Warning message')\nlogging.error('Error message')\nlogging.critical('Critical message')\n</code></pre> <p>o/p  </p> <pre><code>- WARNING:root:Warning message\n- ERROR:root:Error message\n- CRITICAL:root:Critical message\n</code></pre>"},{"location":"python_tutorials/logging/#how-to-format-log-messages","title":"How to format log messages?","text":"<ul> <li>default format of log message</li> <li>level:name of loger:message</li> <li>if we want to formate, we should go for :formate armument</li> <li><code>logging.basicConfig(formate='%(level-name)s') %(message)s</code></li> </ul>"},{"location":"python_tutorials/logging/#q-how-to-add-timestamp-in-log-message","title":"Q How to add TimeStamp in log message?","text":"<p><code>logging.basicConfig(format = '%(asctime)S %(levelname)s')</code></p>"},{"location":"python_tutorials/logging/#q-how-to-change-data-and-time-formate","title":"Q How to change data and time formate?","text":"<p><code>logging.basicConfig(format = '%(asctime)S %(levelname)s'),datefmt=(%d/%m/%Y %I: %M: %S %P)</code></p> <ul> <li>%P =&gt; P.M/A.M</li> <li>%I =&gt; 12 Hour time scale</li> <li>%H =&gt; 12 hour time scale</li> <li>Y =&gt; capital</li> </ul>"},{"location":"python_tutorials/logging/#q-how-to-write-python-program-exception-to-log-file","title":"Q How to write python program exception to log file?","text":"<p>Note : log may not work on jupyter</p> <pre><code>import logging\n\nlogging.basicConfig(filename=\"exception_zero.log\",format = '%(asctime)s %(levelname)s',filemode='w')\n\nlogging.info('New Request Come')\ntry:\n    x=int(input(\"enter x \"))\n    y=int(input(\"enter y \"))\n    print(x/y)\nexcept ZeroDivisionError as msg:\n    logging.exception(msg)\n    print(msg)\n\nexcept TypeError as msg:\n    logging.exception(msg)\n    print(\"value id in string\")\n\nexcept ValueError as msg:\n    logging.exception(msg)\n    print(\"please enter in interge or float\")\n\nlogging.info('Request Complete!!')\n</code></pre> <pre><code>import logging\n\nlogging.basicConfig(\n    filename='mylog.txt',\n    level=logging.DEBUG, #Debug or high level recomended\n    format = '%(asctime)s %(levelname)s %(message)s', datefmt= ('%d/%m/%Y %I: %M: %S %P'),\n    filemode='a')\n\nlogging.debug('Debug message')\nlogging.info('Info message')\nlogging.warning('Warning message')\nlogging.error('Error message')\nlogging.critical('Critical message')\n</code></pre> <p>level.INFO:root:info message</p> <ul> <li>root =&gt; logger name</li> <li>info message =&gt;  message</li> <li>logging.debug('') =&gt; 10 =&gt; lower level</li> </ul> <p>Note:</p> <ul> <li>Defautl logger is root logger</li> <li>If we not specifiy file name data will writen to console</li> </ul>"},{"location":"python_tutorials/logging/#loggin-levels-chart","title":"loggin Levels chart","text":"<ul> <li>CRITICAL =&gt; 50</li> <li>ERROR    =&gt; 40</li> <li>WARNING  =&gt; 30</li> <li>INFO     =&gt; 20</li> <li>DEBUG    =&gt; 10</li> </ul> <p>default logging level : WARNING</p> <p>The main advantages of logging are</p> <ul> <li>We can use log file performing debugging</li> <li>We can provide statiistic number of request per day etc</li> </ul>"},{"location":"python_tutorials/logging/#it-is-higly-recommended-to-store-compile-application-flow-and-exception-information-to-a-file","title":"It is higly recommended to store compile application flow and Exception information to a file","text":""},{"location":"python_tutorials/logging/#problems-with-root-logger","title":"Problems with root logger","text":"<ul> <li>Root logger can handle either console or file but not simantiously</li> <li>Root logger is the default logger</li> </ul>"},{"location":"python_tutorials/logging/#problems","title":"Problems","text":"<ol> <li>Once we set basic configuration the that configuration is final and we cannot change.</li> <li>It will always work only one handler either file or console but not both simantiously.</li> <li>It is not possible to configure logger with different configuation at different level.</li> <li>We cannot specifiy multiple log files for multiple modules/classes/metods</li> </ol> <p>To overcome these problems we should go for our own customized logger</p>"},{"location":"python_tutorials/logging/#customized-logger-ceration-and-usage","title":"Customized logger ceration and usage","text":"<ol> <li> <p>Creation of logger object and set log level</p> <pre><code>import logging\nlogger = logging.getLogger('demologger')\nlogger.setLevel(logging.DEBUG)\n</code></pre> </li> <li> <p>Creation of Handler Object:</p> <ul> <li>There are multiple types of handler like stramHandler, FileHandler etc</li> <li>Stream Handler =Write massage to console</li> </ul> <pre><code>consoleHandler = logging.StreamHandler()\n\n\n# By default logger level is Handler level\n\nconsoleHandler.setLevel(logging.INFO)\n</code></pre> </li> <li> <p>Creation of formatter Object</p> <pre><code>formatter = logging.Formatter('%(asctime)s:%(name)s: %(levelname)s: %(message)s',datefmt = '%d-%m-%Y %I:%M:%S %p')\n\n# %(name)s =&gt; logger name\n</code></pre> </li> <li> <p>Add Formatter to Handler</p> <pre><code>consoleHandler.setFormatter(formatter)\n</code></pre> </li> <li> <p>Add Handler to logger</p> <pre><code>logger.addHandler(consoleHandler)\n</code></pre> </li> <li> <p>Write message by using logger object</p> <pre><code>logger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n</code></pre> </li> </ol> <p>Note:</p> <ul> <li>By Default logger level will be available to handler. But we can define our own level at handler level which will be the final for that handler</li> <li>Handler level should be supported by logger</li> <li>i.e logger log level should be lower than handler other wise only logger log level will be considered</li> </ul>"},{"location":"python_tutorials/logging/#fiile-handler","title":"fiile handler","text":"<pre><code>import logging\nlogger = logging.getLogger('demologger')\nlogger.setLevel(logging.DEBUG)\n\nfileHandler = logging.FileHandler('abc.log',mode='a')\nfileHandler.setLevel(logging.ERROR)\n\nformatter = logging.Formatter('%(asctime)s:%(name)s: %(levelname)s: %(message)s',datefmt = '%d-%m-%Y %I:%M:%S %p')\n\nfileHandler.setFormatter(formatter)\n\nlogger.addHandler(fileHandler)\n\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n\n# for both console &amp; filr handler\n\nimport logging\nlogger = logging.getLogger('demologger')\nlogger.setLevel(logging.INFO)\n\nfileHandler = logging.FileHandler('file1.log',mode='a')\nfileHandler.setLevel(logging.ERROR)\n\nconsoleHandler = logging.StreamHandler()\nconsoleHandler.setLevel(logging.INFO)\n\nformatter = logging.Formatter('%(asctime)s:%(name)s: %(levelname)s: %(message)s',datefmt = '%d-%m-%Y %I:%M:%S %p')\n\nfileHandler.setFormatter(formatter)\nconsoleHandler.setFormatter(formatter)\n\nlogger.addHandler(fileHandler)\nlogger.addHandler(consoleHandler)\n\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n</code></pre>"},{"location":"python_tutorials/logging/#use-multiple-log-files-for-multiple-module","title":"Use multiple log files for multiple module","text":"<p>Use separate log file for every module</p> <p></p> <pre><code>#### Student.py\n\nimport logging\n\nlogger = logging.getLogger('studentLogger')\nlogger.setLevel(logging.DEBUG)\n\nfileHandler = logging.FileHandler('student.log', mode='a')\n\n# fileHandler = logging.FileHandler('student.log',mode = 'a')\n\nfileHandler.setLevel(logging.ERROR)\n\n# formatter = logging.Formatter('%(asctime)s:%(name)s: %(levelname)s: %(message)s',datefmt = '%d-%m-%Y %I:%M:%S %p')\n\n# formatter = logging.Formatter('%(asctime)s - %(name)s - %(message)s',datefmt = '%d - %m - %Y %I:%M:%S %p')\n\nfileHandler.setFormatter(formatter)\nlogger.addHandler(fileHandler)\n\nlogger.debug('deug message from student')\nlogger.info('Info message from student')\nlogger.warning('Warning message from student')\nlogger.error('Error message from student')\nlogger.critical('Critical message from student')\n\n#### test.py\n\nimport logging\nimport student\n\nlogger = logging.getLogger('testlogger')\nlogger.setLevel(logging.DEBUG)\n\nfileHandler = logging.FileHandler('test.log',mode = 'a')\nfileHandler.setLevel(logging.DEBUG)\n\nformatter = logging.Formatter('%(asctime)s-%(name)s-%(message)s',\n                              datefmt = '%d-%m-%y %I:%M:%S %p')\n\nfileHandler.setFormatter(formatter)\nlogger.addHandler(fileHandler)\n\nlogger.debug('deug message from test')\nlogger.info('Info message from test')\nlogger.warning('Warning message from test')\nlogger.error('Error message from test')\nlogger.critical('Critical message from test')\n</code></pre>"},{"location":"python_tutorials/logging/#generic-custom-logger","title":"Generic Custom logger","text":"<p>Importance of inspect module: (Required to define Generic custom logger, python inbuilt)</p> <ul> <li>inspect =&gt; Inspection</li> <li>from which module / function call is coming</li> <li>stack[0] =&gt; reciver info</li> <li>stack[1] =&gt; caller info</li> </ul> <pre><code># demo.py\n\nimport inspect\ndef get_info():\n    print(inspect.stack()[0])\n    print(inspect.stack()[1])\nget_info()\n\n# demo.py\n\nimport inspect\ndef get_info():\n    # print(inspect.stack()[0])\n    # print(inspect.stack()[1])\n    print(\"caller Module Name\",inspect.stack()[1][1])\n    print(\"caller Function Name\",inspect.stack()[1][3])\nget_info()\n\n# student.py\n\nfrom demo import getInfo\ndef student_f1():\n    get_info()\nstudent_f1()\n</code></pre>"},{"location":"python_tutorials/logging/#creation-of-generic-logger-and-usage","title":"Creation of generic logger and usage","text":"<pre><code># Generic logger template\n\nimport logging\nimport inspect\n\ndef get_custom_logger(level):\n    function_name = inspect.stack()[1][3]\n    logger_name = function_name + '_logger'\n\n    logger = logging.getLogger(logger_name)\n\n    logger.setLevel(level)\n\n    file_handler = logging.FileHandler(\"genric_log.log\", mode='a')\n    file_handler.setLevel(level)\n\n    formatter = logging.Formatter('%(asctime)s:%(name)s: %(levelname)s: %(message)s',datefmt = '%d-%m-%Y %I:%M:%S %p')\n    file_handler.setFormatter(formatter)\n\n    logger.addHandler(file_handler)\n\n    return logger\n\ndef log_student():\n    logger = get_custom_logger(logging.ERROR)\n\n    logger.debug('debug message')\n    logger.info('info message')\n    logger.warning('warn message')\n    logger.error('error message')\n    logger.critical('critical message')\n</code></pre>"},{"location":"python_tutorials/logging/#log_student","title":"log_student()","text":"<p>Need of separating logger configurations into a file or json or yml</p> <ol> <li>We can perform changes very easily.</li> <li>Reusability of configurations.</li> <li>Length of the code will be reduced and readabilty will be impoved.</li> </ol>"},{"location":"python_tutorials/logging/#logging-configinit","title":"logging-config.init","text":""},{"location":"python_tutorials/oops/","title":"OPPS","text":"<p>It a pholosy to write code with phelspy</p>"},{"location":"python_tutorials/oops/#examples","title":"EXAMPLES","text":""},{"location":"python_tutorials/oops/#74-python-program-to-get-the-class-name-of-an-instance","title":"74. Python Program to Get the Class Name of an Instance","text":"<p>```py title =\"Example 1: Using class.name\" class Vehicle:     def name(self, name):         return name</p> <p>v = Vehicle() print(v.class.name) ```</p>"},{"location":"python_tutorials/os/","title":"Os","text":""},{"location":"python_tutorials/os/#working-with-directories","title":"Working with Directories","text":"<p>It is very common requirement to perform operations for directories like</p> <ol> <li>To know current working directory</li> <li>To create a new directory</li> <li>To remove an existing directory</li> <li>To rename a directory</li> <li>To list contents of the directory etc...</li> </ol> <p>To perform these operations, Python provides inbuilt module os,which contains several functions to perform directory related operations.</p>"},{"location":"python_tutorials/os/#q1-to-know-current-working-directory","title":"Q1. To Know Current Working Directory","text":"<pre><code>import os \n\ncwd = os.getcwd() \nprint(\"Current Working Directory:\",cwd) # C:\\Users\\Bindra\\Desktop\\TODO\\python_programing\n</code></pre>"},{"location":"python_tutorials/os/#q2-to-create-a-sub-directory-in-the-current-working-directory","title":"Q2. To Create a Sub Directory in the Current Working Directory","text":"<pre><code>import os \n\nos.mkdir(\"mysub\")\nprint(\"mysub directory created in cwd\")\n</code></pre>"},{"location":"python_tutorials/os/#q3-to-create-a-sub-directory-in-mysub-directory","title":"Q3. To Create a Sub Directory in mysub Directory","text":"<ul> <li>cwd |-mysub |-mysub2</li> </ul> <pre><code>import os\n\nos.mkdir(\"mysub/mysub2\") \nprint(\"mysub2 created inside mysub\")\n</code></pre>"},{"location":"python_tutorials/os/#q4-to-create-multiple-directories-like-sub1-in-that-sub2-in-that-sub3","title":"Q4. To Create Multiple Directories like sub1 in that sub2 in that sub3","text":"<pre><code>import os \n\nos.makedirs(\"sub1/sub2/sub3\") \nprint(\"sub1 and in that sub2 and in that sub3 directories created\")\n</code></pre>"},{"location":"python_tutorials/os/#q5-to-remove-a-directory","title":"Q5. To Remove a Directory","text":"<pre><code>import os \n\nos.rmdir(\"mysub/mysub2\") \nprint(\"mysub2 directory deleted\")\n</code></pre>"},{"location":"python_tutorials/os/#q6-to-remove-multiple-directories-in-the-path","title":"Q6. To Remove Multiple Directories in the Path","text":"<pre><code>import os \n\nos.removedirs(\"sub1/sub2/sub3\") \nprint(\"All 3 directories sub1,sub2 and sub3 removed\")\n</code></pre>"},{"location":"python_tutorials/os/#q7-to-rename-a-directory","title":"Q7. To Rename a Directory","text":"<pre><code>import os \n\nos.rename(\"mysub\",\"newdir\") \nprint(\"mysub directory renamed to newdir\")\n</code></pre>"},{"location":"python_tutorials/os/#q8-to-know-contents-of-directory","title":"Q8. To know Contents of Directory","text":"<ul> <li>OS Module provides listdir() to list out the contents of the specified directory.</li> <li>It won't display the contents of sub directory.</li> </ul> <pre><code>import os \nprint(os.listdir(\".\"))\n</code></pre> <ul> <li>The above program display contents of current working directory but not contents of sub directories.</li> <li>If we want the contents of a directory including sub directories then we should go for walk() function.</li> </ul>"},{"location":"python_tutorials/os/#q9-to-know-contents-of-directory-including-sub-directories","title":"Q9. To Know Contents of Directory including Sub Directories","text":"<p>-We have to use walk() function</p> <ul> <li>[Can you please walk in the directory so that we can aware all contents of that directory]</li> <li>os.walk(path, topdown = True, onerror = None, followlinks = False)</li> <li>It returns an Iterator object whose contents can be displayed by using for loop</li> <li>path : Directory Path. cwd means . -topdown = True : Travel from top to bottom</li> <li>onerror = None : On error detected which function has to execute.</li> <li>followlinks = True : To visit directories pointed by symbolic links</li> </ul> Eg: To display all contents of Current working directory including sub directories:<pre><code>import os \nfor dirpath,dirnames,filenames in os.walk('.'):\n    print(\"Current Directory Path:\",dirpath) \n    print(\"Directories:\",dirnames)\n    print(\"Files:\",filenames) \n    print()\n</code></pre> <p>Note: To display contents of particular directory, we have to provide that directory name as argument to walk() function.</p> <p><code>os.walk(\"directoryname\")</code></p>"},{"location":"python_tutorials/os/#q-what-is-the-difference-between-listdir-and-walk-functions","title":"Q. What is the difference between listdir() and walk() Functions?","text":"<p>In the case of listdir(), we will get contents of specified directory but not sub directory contents. But in the case of walk() function we will get contents of specified directory and its sub directories also.</p>"},{"location":"python_tutorials/os/#running-other-programs-from-python-program","title":"Running Other Programs from Python Program","text":"<p>OS Module contains system() function to run programs and commands. It is exactly same as system() function in C language.</p> <ul> <li><code>os.system(\"commad string\")</code></li> <li>The argument is any command which is executing from DOS.</li> </ul> <pre><code>import os \n\nos.system(\"dir *.py\")\nos.system(\"py abc.py\")\n</code></pre>"},{"location":"python_tutorials/os/#how-to-get-information-about-a-file","title":"How to get Information about a File","text":"<p>We can get statistics of a file like size, last accessed time,last modified time etc by using stat() function of os module.</p> <ul> <li><code>stats = os.stat(\"abc.txt\")</code></li> </ul>"},{"location":"python_tutorials/os/#the-statistics-of-a-file-includes-the-following-parameters","title":"The statistics of a file includes the following parameters","text":"<ol> <li>st_mode: Protection Bits</li> <li>st_ino: Inode number</li> <li>st_dev: Device</li> <li>st_nlink: Number of Hard Links</li> <li>st_uid: User id of Owner</li> <li>st_gid: Group id of Owner</li> <li>st_size: Size of File in Bytes</li> <li>st_atime: Time of Most Recent Access</li> <li>st_mtime: Time of Most Recent Modification</li> <li>st_ctime: Time of Most Recent Meta Data Change</li> </ol> <p>Note: st_atime, st_mtime and st_ctime returns the time as number of milli seconds since Jan 1st 1970, 12:00 AM. By using datetime module from timestamp() function, we can get exact date and time.</p>"},{"location":"python_tutorials/os/#q-to-print-all-statistics-of-file-abctxt","title":"Q. To Print all Statistics of File abc.txt","text":"<pre><code>import os \n\nstats=os.stat(\"if.txt\") \nprint(stats)\n</code></pre>"},{"location":"python_tutorials/os/#q-to-print-specified-properties","title":"Q. To Print specified Properties","text":"<pre><code>import os \nfrom datetime import * \n\nstats=os.stat(\"if.txt\")\n\nprint(\"File Size in Bytes:\",stats.st_size)\nprint(\"File Last Accessed Time:\",datetime.fromtimestamp(stats.st_atime)) \n\nO/P\nFile Size in Bytes: 90\nFile Last Accessed Time: 2024-09-11 12:56:36.763284\nFile Last Modified Time: 2024-04-12 15:26:52.562774\n</code></pre>"},{"location":"python_tutorials/os/#assignment","title":"Assignment","text":""},{"location":"python_tutorials/os/#81-python-program-to-get-line-count-of-a-file","title":"81. Python Program to Get Line Count of a File","text":"<pre><code>with open(\"data_file.txt\") as f:\n    for i, l in enumerate(f):\n        pass\ni + 1\n</code></pre> <pre><code># Example 2: Using list comprehension\nnum_of_lines = sum(1 for l in open('data_file.txt'))\n\nprint(num_of_lines)\n</code></pre>"},{"location":"python_tutorials/os/#82-python-program-to-find-all-file-with-txt-extension-present-inside-a-directory","title":"82. Python Program to Find All File with .txt Extension Present Inside a Directory","text":"<p>os.chdir(\"my_dir\") sets the current working directory to /my_dir.</p> <ul> <li> <p>Using a for loop, you can search for files with .txt extension using glob().</p> </li> <li> <p>denotes all files with a given extension</p> </li> </ul> <pre><code># Example 1: Using glob\nimport glob, os\n\nos.chdir(\"my_dir\")\n\nfor file in glob.glob(\"*.txt\"):\n    print(file)\n</code></pre> <pre><code># Example 2: Using os\nimport os\n\nfor file in os.listdir(\"my_dir\"):\n    if file.endswith(\".txt\"):\n        print(file)\n</code></pre> <pre><code># Using os.walk\nimport os\n\nfor root, dirs, files in os.walk(\"my_dir\"):\n    for file in files:\n        if file.endswith(\".txt\"):\n            print(file)\n</code></pre>"},{"location":"python_tutorials/os/#83-python-program-to-get-file-creation-and-modification-date","title":"83. Python Program to Get File Creation and Modification Date","text":"<pre><code># Example 1: Using os module\nimport os.path, time\n\nfile = pathlib.Path('data_file.txt')\nprint(\"Last modification time: %s\" % time.ctime(os.path.getmtime(file)))\nprint(\"Last metadata change time or path creation time: %s\" % time.ctime(os.path.getctime(file)))\n</code></pre>"},{"location":"python_tutorials/os/#getmtime-gives-the-last-modification-time-whereas-getctime-gives-the-last-metadata-change-time-in-linuxunix-and-path-creation-time-in-windows","title":"getmtime() gives the last modification time whereas getctime() gives the last metadata change time in Linux/Unix and path creation time in Windows","text":"<pre><code># Example 2: Using stat() method\nimport datetime\nimport pathlib\n\nfname = pathlib.Path('data_file.txt')\nprint(\"Last modification time: %s\" % datetime.datetime.fromtimestamp(fname.stat().st_mtime))\nprint(\"Last metadata change time or path creation time: %s\" % datetime.datetime.fromtimestamp(fname.stat().st_ctime))\n</code></pre>"},{"location":"python_tutorials/os/#84-python-program-to-get-the-full-path-of-the-current-working-directory","title":"84. Python Program to Get the Full Path of the Current Working Directory","text":"<pre><code># Example 1: Using pathlib module\nimport pathlib\n\n# path of the given file\nprint(pathlib.Path(\"my_file.txt\").parent.absolute())\n\n# current working directory\nprint(pathlib.Path().absolute())\n</code></pre> <pre><code># Example 2: Using os module\nimport os\n\n# path of the given file\nprint(os.path.dirname(os.path.abspath(\"my_file.txt\")))\n\n# current working directory\nprint(os.path.abspath(os.getcwd()))\n</code></pre>"},{"location":"python_tutorials/os/#86-python-program-to-check-the-file-size","title":"86. Python Program to Check the File Size","text":"<pre><code>import os \n\nfilepath = \"data_file.txt\"\nfile_size = os.path.getsize(filepath)\nfile_size\n</code></pre> <pre><code># Example 1: Using os module\nimport os\n\nfile_stat = os.stat(filepath)\nprint(file_stat.st_size)\n\nfile_stat\n</code></pre> <pre><code># Example 2: Using pathlib module\nfrom pathlib import Path\n\nfile = Path(filepath)\nprint(file.stat().st_size)\n</code></pre>"},{"location":"python_tutorials/secrete/","title":"Secrete key","text":"<pre><code>import secrets\n\ngenerated_key = secrets.token_urlsafe(length)\n</code></pre> <p>output is like</p> <p>X3wljSGR2QK9GOkwaBCPee</p> <p>Recommended length should be more like more than 100</p>"},{"location":"python_tutorials/string/","title":"String","text":""},{"location":"python_tutorials/string/#string-data-type","title":"STRING DATA TYPE","text":"<p>The most commonly used object in any project and in any programming language is String</p>"},{"location":"python_tutorials/string/#how-to-define-multi-line-string-literals","title":"How to define multi-line String Literals?","text":"<p>We can define multi-line String literals by using triple single or double quotes.</p> <pre><code>multi_line_str = \"\"\"Any sequence of characters \nwithin either single quotes \nor double quotes is considered \nas a String.\"\"\"\nprint(multi_line_str)\n</code></pre>"},{"location":"python_tutorials/string/#how-to-access-characters-of-a-string","title":"How to Access Characters of a String?","text":"<p>We can access characters of a string by using the following ways.</p> <ol> <li>By using index</li> <li>By using slice operator</li> </ol>"},{"location":"python_tutorials/string/#1-accessing-characters-by-using-index","title":"1) Accessing Characters By using Index","text":"<ul> <li>Python supports both +ve and -ve Index.</li> </ul> <pre><code>name = \"Ashish Bindra\"\n\nprint(name[0]) # A\nprint(name[5]) # h\nprint(name[-1]) # a\nprint(name[20])\nIndexError: string index out of range\n</code></pre>"},{"location":"python_tutorials/string/#2-accessing-characters-by-using-slice-operator","title":"2) Accessing Characters by using Slice Operator","text":"<ul> <li>Syntax:  name bEginindex:endindex:step]</li> <li>Begin Index: From where we have to consider slice (substring)</li> <li>End Index: We have to terminate the slice (substring) at endindex-1</li> <li>Step: Incremented Value.</li> </ul> <pre><code>str1 = \"Learning Python is very very easy!!!\"\n\nprint(str1[1:7:1]) # earnin\nprint(str1[1:7])   # earnin\nprint(str1[1:7:2]) # eri\nprint(str1[:7])    # Learnin\nprint(str1[7:])    # g Python is very very easy!!!\nprint(str1[::])    # Learning Python is very very easy!!!\nprint(str1[:])     # Learning Python is very very easy!!!\nprint(str1[::-1])  # !!!ysae yrev yrev si nohtyP gninraeL\n</code></pre>"},{"location":"python_tutorials/string/#mathematical-operators-for-string","title":"Mathematical Operators for String","text":"<p>We can apply the following mathematical operators for Strings.</p> <p>1) * operator for concatenation 2) * operator for repetition</p> <pre><code>print(\"Hello\" + \"World\") # HelloWorld\nprint(\"Hi\"*2)            # HiHi\n</code></pre>"},{"location":"python_tutorials/string/#note","title":"Note","text":"<p>1) To use + operator for Strings, compulsory both arguments should be str type. 2) To use * operator for Strings, compulsory one argument should be str and other argument should be int.</p>"},{"location":"python_tutorials/string/#q-write-a-program-to-access-each-character-of-string-in-forward-and-backward-direction-by-using-while-loop","title":"Q) Write a Program to access each Character of String in Forward and Backward Direction by using while Loop?","text":"<pre><code>s = \"Learning Python is very easy !!!\" \nn = len(s) \ni = 0 \n\nprint(\"Forward direction\") \n\nwhile i&lt;n: \n    print(s[i],end=' ') \n    i +=1 \n\nprint(\"\\n\\nBackward direction\") \ni = -1 \n\nwhile i &gt;= -n: \n    print(s[i],end=' ') \n    i = i-1\n\n\n# o/p\n# Forward direction\n# L e a r n i n g   P y t h o n   i s   v e r y   e a s y   ! ! ! \n\n# Backward direction\n# ! ! !   y s a e   y r e v   s i   n o h t y P   g n i n r a e L\n</code></pre> <p>Alternative ways:</p> <pre><code>s = \"Learning Python is very easy !!!\" \n\nprint(\"Forward direction\") \nfor i in s[::]: \n    print(i,end=' ') \n\nprint(\"\\nBackward direction\")\nfor i in s[::-1]: \n    print(i,end=' ')\n</code></pre>"},{"location":"python_tutorials/string/#checking-membership","title":"Checking Membership","text":"<p>We can check whether the character or string is the member of another string or not by using in and not in operators.</p> <pre><code>str1 = 'durga' \n\nprint('d' in str1) # True\nprint('z' in str1) # False\n</code></pre> <pre><code>str1 = input(\"Enter main string: \") \nsubs = input(\"Enter sub string: \") \n\nif subs in str1: \n    print(f\"\\\"{subs}\\\" is found in main string\") \nelse: \n    print(f\"\\\"{subs}\\\" is not found in main string\")\n# Enter main string: Ashish Bindra\n# Enter sub string: sh\n# \"sh\" is found in main string\n</code></pre>"},{"location":"python_tutorials/string/#comparison-of-strings","title":"Comparison of Strings","text":"<ul> <li>We can use comparison operators (&lt;, &lt;=, &gt;, &gt;=) and equality operators (==, !=) for strings.</li> <li>Comparison will be performed based on alphabetical order.</li> </ul> <pre><code>s1=input(\"Enter first string: \") \ns2=input(\"Enter Second string: \") \n\nif s1==s2: \n    print(\"Both strings are equal\") \nelif s1&lt;s2: \n    print(\"First String is less than Second String\") \nelse: \n    print(\"First String is greater than Second String\")\n</code></pre> <p>o/p Enter first string: durga Enter Second string: durga Both strings are equal</p>"},{"location":"python_tutorials/string/#removing-spaces-from-the-string","title":"Removing Spaces from the String","text":"<p>We can use the following 3 methods</p> <p>1) rstrip(): To remove spaces at right hand side 2) lstrip(): To remove spaces at left hand side 3) strip(): To remove spaces both sides</p> <pre><code>city=input(\"Enter your city Name: \") \nscity=city.strip() \n\nif scity=='Hyderabad': \n    print(\"Hello Hyderbadi..Adab\") \nelif scity=='Chennai': \n    print(\"Hello Madrasi...Vanakkam\") \nelif scity==\"Bangalore\": \n    print(\"Hello Kannadiga...Shubhodaya\") \nelse: \n    print(\"your entered city is invalid\")\n\n# Enter your city Name:Bangalore \n# Hello Kannadiga...Shubhodaya\n</code></pre>"},{"location":"python_tutorials/string/#finding-substrings","title":"Finding Substrings","text":"<p>We can use the following 4 methods</p> <p>For forward direction:</p> <p>1) find() 2) index()</p> <p>For backward direction:</p> <p>1) rfind() 2) rindex()</p>"},{"location":"python_tutorials/string/#find","title":"find()","text":"<p>s.find(substring)</p> <p>Returns index of first occurrence of the given substring. If it is not available then we will get -1.</p> <pre><code>s=\"Learning Python is very easy\" \n\nprint(s.find(\"Python\")) #9 \nprint(s.find(\"Java\")) # -1 \nprint(s.find(\"r\"))#3 \nprint(s.rfind(\"r\"))#21\n</code></pre>"},{"location":"python_tutorials/string/#sfindsubstringbeginend","title":"s.find(substring,bEgin,end)","text":"<p>It will always search from bEgin index to end-1 index.</p> <pre><code>s=\"durgaravipavanshiva\" \n\nprint(s.find('a'))#4 \nprint(s.find('a',7,15))#10\nprint(s.find('z',7,15))#-1\n</code></pre>"},{"location":"python_tutorials/string/#index","title":"index()","text":"<p>index() method is exactly same as find() method except that if the specified substring is not available then we will get ValueError.</p> <pre><code>s=input(\"Enter main string:\") \nsubs=input(\"Enter sub string:\") \n\ntry: \n    n=s.index(subs) \nexcept ValueError: \n    print(\"substring not found\") \nelse: \n    print(\"substring found\")\n</code></pre> <p>o/p Enter main string:learning python is very easy Enter sub string:python substring found</p>"},{"location":"python_tutorials/string/#counting-substring-in-the-given-string","title":"Counting substring in the given String","text":"<p>We can find the number of occurrences of substring present in the given string by using count() method.</p> <ol> <li>s.count(substring): It will search through out the string.</li> <li>s.count(substring, bEgin, end): It will search from bEgin index to end-1 index.</li> </ol> <pre><code>s=\"abcabcabcabcaddab\" \n\nprint(s.count('a'))     # 6  \nprint(s.count('ab'))    # 5\nprint(s.count('abc'))   # 4\nprint(s.count('a',3,7)) # 2\n</code></pre>"},{"location":"python_tutorials/string/#replacing-a-string-with-another-string","title":"Replacing a String with another String","text":"<p>s.replace(oldstring, newstring) inside s, every occurrence of old String will be replaced with new String.</p> eg 1<pre><code>s = \"Learning Python is very difficult\"\n\ns1 = s.replace(\"difficult\",\"easy\") \nprint(s1) # Learning Python is very easy\n</code></pre> Eg 2: All occurrences will be replaced<pre><code>s = \"ababababababab\" \n\nreplace_str = s.replace(\"a\",\"b\") \nprint(replace_str)\n</code></pre>"},{"location":"python_tutorials/string/#q-string-objects-are-immutable-then-how-we-can-change-the-content-by-using-replace-method","title":"Q) String Objects are Immutable then how we can change the Content by using replace() Method","text":"<ul> <li>Once we creates string object, we cannot change the content.This non changeable behaviour is nothing but immutability.</li> <li>If we are trying to change the content by using any method, then with those changes a new object will be created and changes won't be happend in existing object.</li> <li>Hence with replace() method also a new object got created but existing object won't be changed.</li> </ul> we can see new object which was created because of replace() method.<pre><code>str1 = \"abab\" \nstr2 = str1.replace(\"a\",\"b\") \n\nprint(str1,\"is available at :\",id(str1)) \nprint(str2,\"is available at :\",id(str2))\n</code></pre> <p>o/p</p> <pre><code>abab is available at : 2604224914096&lt;br&gt;\nbbbb is available at : 2604225153904\n</code></pre>"},{"location":"python_tutorials/string/#splitting-of-strings","title":"Splitting of Strings","text":"<ul> <li>We can split the given string according to specified seperator by using split() method.</li> <li>l = s.split(seperator)</li> <li>The default seperator is space. The return type of split() method is List.</li> </ul> <pre><code>s=\"durga software solutions\" \n\nl=s.split() \nfor x in l: \n    print(x)\n# o/p\n# durga\n# software\n# solutions\n</code></pre> <pre><code>date = \"22-07-2024\" \ndate_list = date.split('-') \n\nfor val in date_list: \n    print(val)\n# o/p\n# 22\n# 07\n# 2024\n</code></pre>"},{"location":"python_tutorials/string/#joining-of-strings","title":"Joining of Strings","text":"<p>We can join a Group of Strings (List OR Tuple) wrt the given Seperator.</p> <ul> <li>s = seperator.join(group of strings)</li> </ul> <pre><code>names = ('sunny', 'bunny', 'chinny') \nlist_name = '-'.join(names) \nprint(list_name) # sunny-bunny-chinny\n</code></pre>"},{"location":"python_tutorials/string/#changing-case-of-a-string-we-can-change-case-of-a-string-by-using-the-following-4-methods","title":"Changing Case of a String: We can change case of a string by using the following 4 methods","text":"<ol> <li>upper(): To convert all characters to upper case</li> <li>lower(): To convert all characters to lower case</li> <li>swapcase(): Converts all lower case characters to upper case and all upper case characters to lower case</li> <li>title(): To convert all character to title case. i.e first character in every word should be upper case and all remaining characters should be in lower case.</li> <li>capitalize(): Only first character will be converted to upper case and all remaining characters can be converted to lower case</li> <li>casefold(): Return a version of the string suitable for caseless comparisons.</li> </ol> <pre><code>line = 'learning Python is very Easy' \n\nprint(line.upper())      # LEARNING PYTHON IS VERY EASY\nprint(line.lower())      # learning python is very easy\nprint(line.swapcase())   # LEARNING pYTHON IS VERY eASY\nprint(line.title())      # Learning Python Is Very Easy\nprint(line.capitalize()) # Learning python is very easy\nprint(line.casefold())   # learning python is very easy\n</code></pre>"},{"location":"python_tutorials/string/#checking-starting-and-ending-part-of-the-string","title":"Checking Starting and Ending Part of the String","text":"<p>Python contains the following methods for this purpose</p> <ol> <li>s.startswith(substring)</li> <li>s.endswith(substring)</li> </ol> <pre><code>line = 'learning Python is very easy' \n\nprint(line.startswith('learning')) # True\nprint(line.endswith('learning'))   # False\nprint(line.endswith('easy'))       # True\n</code></pre>"},{"location":"python_tutorials/string/#to-check-type-of-characters-present-in-a-string-python-contains-the-following-methods-for-this-purpose","title":"To Check Type of Characters Present in a String: Python contains the following methods for this purpose","text":"<ol> <li>isalnum(): Returns True if all characters are alphanumeric( a to z , A to Z ,0 to9 )</li> <li>isalpha(): Returns True if all characters are only alphabet symbols(a to z,A to Z)</li> <li>isdigit(): Returns True if all characters are digits only( 0 to 9)</li> <li>islower(): Returns True if all characters are lower case alphabet symbols</li> <li>isupper(): Returns True if all characters are upper case aplhabet symbols</li> <li>istitle(): Returns True if string is in title case</li> <li>isspace(): Returns True if string contains only spaces</li> </ol> <pre><code>print('Durga786'.isalnum()) # True \nprint('durga786'.isalpha()) # False\nprint('durga'.isalpha()) # True \nprint('durga'.isdigit()) # False \nprint('786786'.isdigit()) # True \nprint('abc'.islower()) # True \nprint('Abc'.islower()) # False \nprint('abc123'.islower()) # True \nprint('ABC'.isupper()) # True \nprint('Learning python is Easy'.istitle()) # False \nprint('Learning Python Is Easy'.istitle()) # True\nprint(' '.isspace()) # True\n</code></pre> demo.py<pre><code>s=input(\"Enter any character:\")\n\nif s.isalnum():\n    print(\"Alpha Numeric Character\") \n    if s.isalpha(): \n        print(\"Alphabet character\") \n        if s.islower(): \n            print(\"Lower case alphabet character\") \n        else:\n            print(\"Upper case alphabet character\") \n    else: \n        print(\"it is a digit\") \nelif s.isspace():\n    print(\"It is space character\") \nelif not s.isalnum():\n    print(\"it is a float\")\nelse:\n    print(\"Non Space Special Character\")\n</code></pre>"},{"location":"python_tutorials/string/#important-programs-regarding-string-concept","title":"Important Programs regarding String Concept","text":""},{"location":"python_tutorials/string/#q1-write-a-program-to-reverse-the-given-string","title":"Q1) Write a Program to Reverse the given String","text":"<ul> <li>Input: durga</li> <li>Output: agrud</li> </ul> 1st way<pre><code>str1 = input(\"Enter Some String: \") # ashish\nprint(str1[::-1]) # hsihsa\n</code></pre> 2st way<pre><code>str1 = input(\"Enter Some String: \") # Python\nprint(''.join(reversed(str1))) # nohtyP\n</code></pre> 3st way<pre><code>str1 = input(\"Enter Some String: \") # Python\n\ni = len(str1) - 1 \ntarget='' \n\nwhile i &gt;= 0: \n    target = target + str1[i] \n    i = i - 1 \n\nprint(target) # nohtyP\n</code></pre> <p>\"4st way\"</p> 4st way<pre><code>s = \"hello\"\nreversed_s = \"\"\n\nfor char in s:\n    reversed_s = char + reversed_s\n\nprint(reversed_s)  # Output: \"olleh\"\n</code></pre> <p>\"Using a List Comprehension</p> Using a List Comprehension<pre><code>s = \"hello\"\nreversed_s = ''.join([s[i] for i in range(len(s)-1, -1, -1)])\nprint(reversed_s)  # Output: \"olleh\"\n</code></pre> Using Recursion<pre><code>def reverse_recursive(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_recursive(s[1:]) + s[0]\n\ns = \"hello\"\nreversed_s = reverse_recursive(s)\nprint(reversed_s)  # Output: \"olleh\"\n</code></pre> Using reduce() from functools<pre><code>from functools import reduce\n\ns = \"hello\"\nreversed_s = reduce(lambda acc, char: char + acc, s)\nprint(reversed_s)  # Output: \"olleh\"\n</code></pre>"},{"location":"python_tutorials/string/#q2-program-to-reverse-order-of-words","title":"Q2) Program to Reverse Order of Words","text":"<ul> <li>Input: Learning Python is very Easy</li> <li>Output: Easy Very is Python Learning</li> </ul> <p>```py \"</p> <p>line=input(\"Enter Some String: \")  # Learning Python is very Easy</p> <p>list_line = line.split() l1 = []  i = len(list_line) - 1  </p> <p>while i &gt;= 0:      l1.append(list_line[i])      output = ' '.join(l1)      i = i - 1 </p> <p>print(output) # Easy very is Python Learning <pre><code>```py\nline=input(\"Enter Some String: \")  # Learning Python is very Easy\n\nlist_line = line.split()  \nlist_line.reverse()\n\nprint(\" \".join(list_line)) # Easy very is Python Learning\n</code></pre></p>"},{"location":"python_tutorials/string/#write-a-program-to-find-the-number-of-occurrences-of-each-character-present-in-the-given-string","title":"Write a Program to find the Number of Occurrences of each Character present in the given String?","text":"<ul> <li>Input: ABCABCABBCDE</li> <li>Output: A-3,B-4,C-3,D-1,E-1</li> </ul> <pre><code>str1 = input(\"Enter the Some String: \") \n\nd = {} \nfor x in str1: \n    if x in d.keys(): \n        d[x] = d[x] + 1  \n    else: \n        d[x] = 1\n\nfor k, v in d.items(): \n        print(f\"{k} = {v} Times\")\n</code></pre> <pre><code>Enter the Some String: Ashsih\nA = 1 Times\ns = 2 Times\nh = 2 Times\ni = 1 Times\n</code></pre>"},{"location":"python_tutorials/string/#assignment-question-answers","title":"Assignment Question / Answers","text":""},{"location":"python_tutorials/string/#66-python-program-to-print-output-without-a-newline","title":"66. Python Program to Print Output Without a Newline","text":"<pre><code>name = \"ashish\"\nprint(name,end=\"\")\n</code></pre>"},{"location":"python_tutorials/string/#77-python-program-to-trim-whitespace-from-a-string","title":"77. Python Program to Trim Whitespace From a String","text":"strip()<pre><code>str1 = \" Python Program  \"\nstr1.strip()\n</code></pre> ltrip()<pre><code>str1= \" Python Program \"\nstr1.lstrip()\n</code></pre> rtrip()<pre><code>str1= \"Python Program  \"\nstr1.rstrip()\n</code></pre>"},{"location":"python_tutorials/string/#71-python-program-to-create-a-long-multiline-string","title":"71. Python Program to Create a Long Multiline String","text":"<pre><code># Example 1: Using triple quotes\nmy_string = '''The only way to\nlearn to program is\nby writing code.'''\n\nprint(my_string)\n</code></pre> <pre><code># Example 2: Using parentheses and a single/double quotes\nmy_string = (\"The only way to \\n\"\n         \"learn to program is \\n\"\n         \"by writing code.\")\n\nprint(my_string)\n</code></pre>"},{"location":"python_tutorials/string/#41-python-program-to-sort-words-in-alphabetic-order","title":"41. Python Program to Sort Words in Alphabetic Order","text":"way1<pre><code># Program to sort alphabetically the words form a string provided by the user\n\nmy_str = \"Hello this Is an Example With cased letters\"\n\n# To take input from the user\n#my_str = input(\"Enter a string: \")\n\n# breakdown the string into a list of words\nwords = [word.lower() for word in my_str.split()]\n\n# sort the list\nwords.sort()\n\n# display the sorted words\n\nprint(\"The sorted words are:\")\nfor word in words:\n   print(word)\n</code></pre> way 2<pre><code>s = \"v a\"\nss = s.split()\nss.sort()\nss\n</code></pre> way2<pre><code>names = \"jashan himanshu ashish\"\nlist_names = names.split(\" \")\n\nnames = \" \".join(sorted(list_names))\n\nprint(names)\n</code></pre>"},{"location":"python_tutorials/string/#91-python-program-to-capitalize-the-first-character-of-a-string","title":"91. Python Program to Capitalize the First Character of a String","text":"<pre><code>s = \"ashish\"\n\ns.capitalize()\n</code></pre>"},{"location":"python_tutorials/string/#67-python-program-to-check-if-a-string-is-a-number-float","title":"67. Python Program to Check If a String Is a Number (Float)","text":"way 1<pre><code>def is_float(value):\n    try:\n        float(value)\n        return True\n    except ValueError:\n        return False\n\ntest_string1 = \"123.45\"\n\nprint(f\"Is '{test_string1}' a float? {is_float(test_string1)}\")\n</code></pre> way 2<pre><code>type(is_float) == type(3.9)\n\ntype(is_float) == type(float())\n</code></pre> way 3<pre><code>input_str = input(\"Enter somthing!! \").strip()\n\nif input_str.isalpha():\n    print(\"you enter alphabet which is string!!\")\nelif input_str.isdigit():\n    print(\"String is a int!!\")\nelse:\n    print(\"String is float or punctuation!!\")\n</code></pre> way 4<pre><code>input_str = input(\"Enter somthing!! \").strip()\n\ntry:\n    input_str =  eval(input_str)\n    if isinstance(input_str,int):\n        print(\"you entered int\")\n    elif isinstance(input_str,float):\n        print(\"you entered float\")\nexcept (NameError,SyntaxError):\n    print(\"this is string \")\n</code></pre> way 5<pre><code>input_str = input(\"Enter some string \")\n\ntry:\n    input_str = eval(input_str)\n\n    if  type(input_str) == type(int()):\n        print(\"You entered an int\")\n\n    elif type(input_str) == type(float()):\n        print(\"You entered a float\")\nexcept (NameError,SyntaxError):\n    print(\"This is string \")\n</code></pre>"},{"location":"python_tutorials/string/#39-python-program-to-check-whether-a-string-is-palindrome-or-not","title":"39. Python Program to Check Whether a String is Palindrome or Not","text":"way 1<pre><code>s = \"madam\"\n\n\"palindrome\" if ''.join(reversed(s)) == s else \"not palindrome\"\n</code></pre> way 2<pre><code>s= \"level\"\n\nif s==s[::-1]: \n    print('The given string is palindrome') \nelse: \n    print('The given string is not palindrome')\n</code></pre> way 3<pre><code># Program to check if a string is palindrome or not\n\nmy_str = 'aIbohPhoBiA'\n\n# make it suitable for caseless comparison\nmy_str = my_str.casefold()\n\n# reverse the string\nrev_str = reversed(my_str)\n\n# check if the string is equal to its reverse\nif list(my_str) == list(rev_str):\n   print(\"The string is a palindrome.\")\nelse:\n   print(\"The string is not a palindrome.\")\n</code></pre> way 4<pre><code>my_str = 'aIbohPhoBiA'.lower()\nrev_str = \"\"\n\nfor s in my_str:\n    rev_str=s + rev_str\nprint(my_str,id(my_str))\nprint(rev_str,id(rev_str))\n\nif rev_str == my_str:\n    print(\"The string is a palindrome.\")\nelse: \n    print(\"The string is not a palindrome.\")\n</code></pre> way 5<pre><code>my_str = 'pabap'.lower()\n\nif len(my_str)==1 :\n    print(\"The string is a palindrome.\")\nelse:\n    for i in range(0,len(my_str)//2):\n        if my_str[i] != my_str[-1-i]:\n            print(\"The string not is a palindrome.\",my_str[-1-i])\n            break    \n    else:\n         print(\"The string is a palindrome.\")\n</code></pre>"},{"location":"python_tutorials/string/#40-python-program-to-remove-punctuations-from-a-string","title":"40. Python Program to Remove Punctuations From a String","text":"<pre><code># define punctuation\npunctuations = '''!()-[]{};:'\"\\,&lt;&gt;./?@#$%^&amp;*_~'''\n\nmy_str = \"Hello!!!, he said ---and went.\"\n\n# To take input from the user\n# my_str = input(\"Enter a string: \")\n\n# remove punctuation from the string\nno_punct = \"\"\nfor char in my_str:\n   if char not in punctuations:\n       no_punct = no_punct + char\n\n# display the unpunctuated string\nprint(no_punct)\n</code></pre> Using str.translate() with string.punctuation<pre><code>import string\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('', '', string.punctuation))\n\n# Example usage\ntext = \"Hello, World! How's everything?\"\ncleaned_text = remove_punctuation(text)\nprint(cleaned_text)  # Output: Hello World Hows everything\n</code></pre> Using str.replace()<pre><code>def remove_punctuation(text):\n    punctuations = '''!()-[]{};:'\"\\,&lt;&gt;./?@#$%^&amp;*_~'''\n    for char in punctuations:\n        text = text.replace(char, \"\")\n    return text\n\n# Example usage\ntext = \"Hello, World! How's everything?\"\nprint(remove_punctuation(text))\n</code></pre> Using Regular Expressions<pre><code>import re\n\ndef remove_punctuation(text):\n    return re.sub(r'[^\\w\\s]', '', text)\n\n# Example usage\ntext = \"Hello, World! How's everything?\"\nprint(remove_punctuation(text))\n</code></pre>"},{"location":"python_tutorials/string/#43-python-program-to-count-the-number-of-each-vowel","title":"43. Python Program to Count the Number of Each Vowel","text":"way-1<pre><code>s = \"ashish Bindru\"\nv=\"aeiou\" \n\nfor w in v:\n    print(s.count(w))\n# print(\"The different vowel present in\",w,\"are\",d)\n</code></pre> way-2<pre><code>w = \"ashish Bindru\"\n\ns=set(w) \n\nv={'a','e','i','o','u'} \nd=s.intersection(v) \n\nprint(\"The different vowel present in\",w,\"are\",d)\n</code></pre> way-3<pre><code>vowels = { \"a\":0, \"e\":0, \"i\":0, \"o\":0, \"u\":0 }\ns = \"ashish Bindru\"\n\nvowels = {word: s.count(word) for word in 'aeiou'}\nprint(vowels)\n</code></pre> way-4<pre><code>vowels = { \"a\":0, \"e\":0, \"i\":0, \"o\":0, \"u\":0 }\n\ns = \"ashish Bindru\"\n\nvowels =  {word:s.count(word) for word in s if word in vowels}\n\nprint(vowels)\n</code></pre> way-5<pre><code>vowels = { \"a\":0, \"e\":0, \"i\":0, \"o\":0, \"u\":0 }\n\ns = \"ashish Bindru\"\n\nfor word in s:\n    if word in vowels:\n        vowels[word]+=1\n\nprint(vowels)\n</code></pre> way-6<pre><code># Program to count the number of each vowels\n\n# string of vowels\nvowels = 'aeiou'\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\n# make it suitable for caseless comparisions\nip_str = ip_str.casefold()\n\n# make a dictionary with each vowel a key and value 0\ncount = {}.fromkeys(vowels,0)\n\n# count the vowels\nfor char in ip_str:\n   if char in count:\n       count[char] += 1\n\nprint(count)\n</code></pre> way-7<pre><code># Using a list and a dictionary comprehension\n# Using dictionary and list comprehension\n\nip_str = 'Hello, have you tried our tutorial section yet?'\n\n# make it suitable for caseless comparisions\nip_str = ip_str.casefold()\n\n# count the vowels\ncount = {x:sum([1 for char in ip_str if char == x]) for x in 'aeiou'}\n\nprint(count)\n</code></pre>"},{"location":"python_tutorials/string/#47-python-program-to-create-pyramid-patterns","title":"47. Python Program to Create Pyramid Patterns","text":"way-1<pre><code>n=7\nfor i in range(1,n+1):\n    print(\" \"*(n-i),end=\"\")\n\n    for j in range(1,i+1):\n        print(\"*\",end=\" \")\n\n    print()\n</code></pre> way-2<pre><code>k = 0\nrows = 7\nfor i in range(1, rows+1):\n    for space in range(1, (rows-i)+1):\n        print(end=\"  \")\n\n    while k!=(2*i-1):\n        print(\"* \", end=\"\")\n        k += 1\n\n    k = 0\n    print()\n</code></pre>"},{"location":"python_tutorials/string/#61-python-program-to-parse-a-string-to-a-float-or-int","title":"61. Python Program to Parse a String to a Float or Int","text":"Example 1: Parse string into integer<pre><code>balance_str = \"1500\"\nbalance_int = int(balance_str)\n\n# print the type\nprint(type(balance_int))\n\n# print the value\nprint(balance_int)\n</code></pre> Example 2: Parse string into float<pre><code>balance_str = \"1500.4\"\nbalance_float = float(balance_str)\n\n# print the type\nprint(type(balance_float))\n\n# print the value\nprint(balance_float)\n</code></pre> Example 3: A string float numeral into integer<pre><code>balance_str = \"1500.34\"\nbalance_int = int(float(balance_str))\n\n# print the type\nprint(type(balance_int))\n\n# print the value\nprint(balance_int)\n</code></pre>"},{"location":"python_tutorials/string/#63-python-program-to-convert-string-to-datetime","title":"63. Python Program to Convert String to Datetime","text":"<pre><code>from datetime import datetime\n\nmy_date_string = \"Mar 11 2011 11:31AM\"\n\ndatetime_object = datetime.strptime(my_date_string, '%b %d %Y %I:%M%p')\n\nprint(type(datetime_object))\nprint(datetime_object)\n</code></pre> <pre><code>from dateutil import parser\n\ndate_time = parser.parse(\"Mar 11 2011 11:31AM\")\n\nprint(date_time)\nprint(type(date_time))\n</code></pre>"},{"location":"python_tutorials/string/#65-python-program-to-get-a-substring-of-a-string","title":"65. Python Program to Get a Substring of a String","text":"<pre><code># Using String slicing\nmy_string = \"I love python.\"\n\n# prints \"love\"\nprint(my_string[2:6])\n\n# prints \"love python.\"\nprint(my_string[2:])\n\n# prints \"I love python\"\nprint(my_string[:-1])\n</code></pre> <pre><code>my_string.find(\"love\")\n</code></pre> <pre><code>my_string.index(\"love\")\n</code></pre>"},{"location":"python_tutorials/string/#68-python-program-to-count-the-occurrence-of-an-item-in-a-list","title":"68. Python Program to Count the Occurrence of an Item in a List","text":"way-1<pre><code>numbers = [1, 2, 3, 2, 4, 2, 5]\nitem = 2\ncount = 0\n\nfor element in numbers:\n    if element == item:\n        count += 1\n\nprint(f\"{element_to_count} occurs {count} times in the list.\")\n</code></pre> way-2<pre><code>numbers = [1, 2, 3, 2, 4, 2, 5]\n\ncount_num = set(numbers)\n\nfor n in count_num:\n    if numbers.count(n):\n        print(f\"{n} occures {numbers.count(n)}\")\n</code></pre> way-3<pre><code>numbers = [1, 2, 3, 2, 4, 2, 5]\n\nl1 = []\nl2 = []\nfor num in numbers:\n    if num not in l1:\n        l1.append(num)\n    else:\n        l2.append(num)\n\n\nl1,l2\n</code></pre> way-4<pre><code>from collections import Counter\n\nmy_list = [1, 2, 3, 4, 2, 2, 5, 6, 5, 3]\n\noccurrences = Counter(my_list)\noccurrences\n</code></pre> way-5<pre><code># Using count() method\nfreq = ['a', 1, 'a', 4, 3, 2, 'a'].count('a')\nprint(freq)\n</code></pre>"},{"location":"python_tutorials/string/#87-python-program-to-reverse-a-number","title":"87. Python Program to Reverse a Number","text":"way-1<pre><code>n = 12345\nstr(n)[::-1]\n</code></pre> way-2<pre><code>n = 12345343\n\nnew =0\nwhile n:\n    r =n%10\n    new = new * 10 +r\n    n = n//10\nnew\n</code></pre> way-3<pre><code>n = 12345\n\ns =''.join(reversed(str(n)))\ns\n</code></pre>"},{"location":"python_tutorials/string/#90-python-program-to-check-if-two-strings-are-anagram","title":"90. Python Program to Check If Two Strings are Anagram","text":"<p>Two strings are said to be anagrams iff both are having same content irrespective of characters position.</p> way-1<pre><code>s1 = \"papa\"\ns2 = \"appa\"\n\nif sorted(s1) == sorted(s2):\n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings aren't anagrams.\") \n</code></pre> way-2<pre><code>s1 = \"\".join(sorted(s1))\ns2 = \"\".join(sorted(s2))\n\nif s1 is s2:\n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings aren't anagrams.\") \nprint(s1,s2)\n</code></pre> way-3<pre><code>from collections import Counter\n\n# Function to check if two strings are anagrams\ndef are_anagrams(str1, str2):\n    # Anagrams must have the same length\n    if len(str1) != len(str2):\n        return False\n    print(Counter(str1))\n    # Compare character counts using Counter\n    return Counter(str1) == Counter(str2)\nare_anagrams(\"lazy\",\"zaly\")\n</code></pre>"},{"location":"python_tutorials/string/#92-python-program-to-compute-all-the-permutation-of-the-string","title":"92. Python Program to Compute all the Permutation of the String","text":"<p>Permutation is the method of selecting elements from a set in different ways.</p> <p>For example: the number of ways in which characters from yup can be selected are</p> <ul> <li>yup, ypu, uyp, upy, puy, pyu, and not selecting any</li> </ul> way-1<pre><code>def get_permutation(string, i=0):\n\n    if i == len(string):     \n        print(\"\".join(string))\n\n    for j in range(i, len(string)):\n\n        words = [c for c in string]\n\n        # swap\n        words[i], words[j] = words[j], words[i]\n\n        get_permutation(words, i + 1)\n\nprint(get_permutation('yup'))\n</code></pre> way-2<pre><code>for p in permutations('pro'):\n    print(p)\n</code></pre> way-3<pre><code>from itertools import permutations\n\nwords = [''.join(p) for p in permutations('pro')]\n\nprint(words)\n</code></pre>"},{"location":"python_tutorials/string/#94-python-program-to-count-the-number-of-occurrence-of-a-character-in-string","title":"94. Python Program to Count the Number of Occurrence of a Character in String","text":"way-1<pre><code>count = 0 \n\nmy_string = \"ashish bindra\"\nmy_char = \"r\"\n\nfor i in my_string:\n    if i == my_char:\n        count += 1\n\nprint(count)\n</code></pre> way-2<pre><code>print(my_string.count(my_char))\n</code></pre> way-3<pre><code>s = \"ashish bindra\"\nd={}\n\nfor x in s: \n    if x in d.keys(): \n        d[x]=d[x]+1 \n    else: \n        d[x]=1\n\nfor k,v in d.items():\n    print(f\"{k} = {v} Times\")\n</code></pre>"},{"location":"python_tutorials/string/#96-python-program-to-convert-bytes-to-a-string","title":"96. Python Program to Convert Bytes to a String","text":"<pre><code>byte_data = b'Hello, World!'\nprint(type(byte_data))\n\nstring_data = byte_data.decode('utf-8')\nprint(type(string_data))\n\nvalue = bytes(\"ashish\".encode())\n\nprint(value, type(value))\n</code></pre>"},{"location":"python_tutorials/terminal/","title":"Terminal","text":""},{"location":"python_tutorials/terminal/#62-python-program-to-print-colored-text-to-the-terminal","title":"62. Python Program to Print Colored Text to the Terminal","text":"<pre><code># Example 1: Using ANSI escape sequences\nprint('\\x1b[38;2;5;86;243m' + 'Programiz' + '\\x1b[0m')\n</code></pre>"},{"location":"python_tutorials/terminal/#lets-understand-the-escape-code-x1b382586243m","title":"Let's understand the escape code \\x1b[38;2;5;86;243m","text":"<ul> <li>\\x1b calls a function. You can also use \\033 for the same purpose.</li> <li>38;2;r;g;b helps to set RGB color. 5;86;243 are the rgb color for blue (the color of the logo of Programiz).</li> <li>m is the function name. Here, m means SGR (Select Graphics Rendition) function.</li> </ul> <pre><code># Example 2: Using python module termcolor\nfrom termcolor import colored\n\nprint(colored('ashish', 'blue'))\n</code></pre> <pre><code># Example 2: Using python module termcolor\nfrom termcolor import colored\n\nprint(colored('bindra', 'green'))\n</code></pre>"},{"location":"python_tutorials/time/","title":"TIME","text":""},{"location":"python_tutorials/time/#examples","title":"EXAMPLES","text":""},{"location":"python_tutorials/time/#73-python-program-to-measure-the-elapsed-time-in-python","title":"73. Python Program to Measure the Elapsed Time in Python","text":"<pre><code># Example 1: Using time module\nimport time\n\n# Save timestamp\nstart = time.time()\n\nprint(23*2.3)\n\n# Save timestamp\nend = time.time()\n\nprint(end - start)\n</code></pre> <pre><code># Example 2: Using timeit module\nfrom timeit import default_timer as timer\n\nstart = timer()\n\nprint(23*2.3)\n\nend = timer()\nprint(end - start)\n</code></pre>"},{"location":"python_tutorials/time/#93-python-program-to-create-a-countdown-timer","title":"93. Python Program to Create a Countdown Timer","text":"<pre><code>import time\n\ndef countdown(time_sec):\n    while time_sec:\n        mins, secs = divmod(time_sec, 60)\n#         print(mins,secs)\n        timeformat = '{:02d}:{:02d}'.format(mins, secs)\n        print(timeformat, end='\\r')\n        time.sleep(1)\n        time_sec -= 1\n\n    print(\"stop\")\n\ncountdown(5)\n</code></pre> <pre><code>import time\n\nn = 5\nwhile n:\n\n    print(n,end=\"\\r\")\n    time.sleep(1)\n    n-=1\nprint(\"0\")\n</code></pre>"},{"location":"python_tutorials/unittest/","title":"UNITTEST","text":""},{"location":"python_tutorials/unittest/#how-to-perform-unittesting-in-python","title":"How to perform unittesting in python","text":"<ul> <li>module name: unittest (predefine in python)</li> <li>class name: TestCase</li> <li>instance methods: contains 3 instance method</li> </ul> <ol> <li>setUp() --&gt;open browser , database connectivity</li> <li>test()</li> <li> <p>tearDown() --&gt; close connection,close browser</p> </li> <li> </li> </ol> <ul> <li>for all test method setUPClass will execute only one</li> </ul> <ol> <li> </li> </ol>"},{"location":"python_tutorials/unittest/#setupclasscls","title":"setUpClass(cls)","text":""},{"location":"python_tutorials/unittest/#teardownclasscls","title":"tearDownClass(cls)","text":"<ul> <li>tearDownClass(cls) will execute only once</li> <li>these two method are class level methods</li> </ul>"},{"location":"python_tutorials/unittest/#manual-testing-","title":"manual testing ---","text":"<pre><code>- google search functionality (manually use application and after that use Excel shell )\n- test no , testing steps, expected Result, original result, status\n</code></pre>"},{"location":"python_tutorials/unittest/#automation-testing-","title":"Automation Testing ---","text":"<pre><code>- Selenium(automation), QTP(these day gone ), Load Runner( performance automation),epl,self\n- python/java/ruby script program to perform these activities automatically\n</code></pre>"},{"location":"python_tutorials/unittest/#unit-testing-api","title":"Unit testing api","text":"<p>module: unittesting class: TestCase</p> <p>instance methods:    setUp() --&gt; Before every test method    test_method()    tearDown() --&gt; After every test method</p> <p>class methods:</p> <p>setUpClass() --&gt; before executing all test method of a TestCase Class    tearDownClass() --&gt; after executing all test method of a TestCase class</p> <ul> <li>TestSuite --&gt; Collection of testcases</li> <li> <p>By using unittest framework we can execute a group of test cases which nothing test suite.</p> </li> <li> <p>compulsory all test class method will execute in alphabetical order</p> </li> <li>it the biggest limitation is that it is not follow top to bottom approach</li> </ul>"},{"location":"python_tutorials/unittest/#limitation-of-unittesting","title":"Limitation Of unittesting","text":"<ol> <li>Test result will be display to console only and it is not possible to generate reports</li> <li>unittest framework always execute test methods in alphabetical order only, and it is not possible to customize execution order</li> <li>As the part of batch execution(TestSuite), all test methods from the specified TestCase classes will be executed, and it is not possible to specify particular methods.</li> <li>In unittesting only limited setUp and tearDown methods are available.</li> <li>If we want to perform any activity before executing testsuite and after executing testsuite, unittest framework does not define any methods.</li> </ol> <p>To overcome more advance framework which is pytest</p>"},{"location":"tool/Facker/","title":"FACKER","text":"<p>To genrate facker utilti</p> <p><code>facker.py</code></p> <pre><code>import re\nimport string\n\nfrom random import shuffle\nfrom random import randint\nfrom random import choice\nfrom random import choices\n\n# from datetime import datetime\nimport requests\nfrom faker import Faker\n\n# Initialize Faker\nfake = Faker()\n\ncredit_card_types = ['Visa', 'MasterCard', 'American Express', 'Discover']\n\n# List of some currency symbols\ncurrency_symbols = [\n    '$',  # US Dollar\n    '\u20ac',  # Euro\n    '\u00a5',  # Japanese Yen\n    '\u00a3',  # British Pound\n    'A$',  # Australian Dollar\n    'C$',  # Canadian Dollar\n    'CHF',  # Swiss Franc\n    '\u20a3',  # French Franc (historical)\n    '\u20a4',  # Pound Sterling (historical)\n    '\u20bd',  # Russian Ruble\n    '\u20b9',  # Indian Rupee\n    '\u20a9',  # South Korean Won\n    '\u20aa',  # Israeli New Shekel\n    '\u0e3f',  # Thai Baht\n    '\u20b2',  # Paraguayan Guarani\n    '\u20ad',  # Laotian Kip\n    '\u20a8'  # Pakistani Rupee\n]\n\n# List of custom nice-day messages\nmessages = [\n    \"Wishing you a great day.\",\n    \"Hope you have a wonderful day.\",\n    \"Enjoy your day!\",\n    \"Have a pleasant day.\",\n    \"May your day be fantastic.\",\n    \"Have a lovely day ahead.\",\n    \"I hope your day goes well.\",\n    \"Have an awesome day.\",\n    \"Make it a great day.\",\n    \"Hope your day is filled with joy.\"\n]\ngrating = choice(messages)\nletters = string.ascii_uppercase + string.digits\n\n\ndef payment_detail():\n    \"\"\"\n    Generate fake payment information\n    \"\"\"\n    payment_info = {\n        \"PaymentMethod\": \"Credit Card\",\n        \"CreditCardType\": choice(credit_card_types),  # Randomly choose a credit card type\n        \"CreditCardNumber\": fake.credit_card_number(card_type=\"visa\"),  # Generate a Visa card number\n        \"WorldpayTransactionID\": fake.uuid4()  # Generate a random UUID for the transaction ID\n    }\n    return payment_info\n\n\ndef gen_company_billing():\n\n    # Generate fake billing information\n    billing_info = {\n        \"Name\": fake.name(),\n        \"Company\": fake.company(),\n        \"Address\": fake.street_address(),\n        \"City\": fake.city(),\n        \"State\": fake.state_abbr(),  # Use state abbreviation\n        \"ZipCode\": fake.zipcode(),\n        \"Country\": fake.country(),\n        \"PhoneNumber\": re.sub(r'x.*', '', fake.phone_number()).strip(),\n        \"BillingDate\": fake.date_this_year().strftime('%B %d, %Y')  # Generates a random date within the current year\n    }\n\n    return billing_info\n\n\ndef item_detail(item=6):\n    fake_project_items = [fake.bs() for _ in range(randint(2, item))]  # 5 fake project items\n    items = []\n    currency = choice(currency_symbols)\n    for item in fake_project_items:\n        sku = \"\".join(choices(letters, k=7))\n        qty = randint(1, 50)\n        items.append({\n            \"itemName\": item,\n            \"sku\": sku,\n            \"quantity\": qty,\n            \"currency\": currency,\n            \"total\": qty * randint(50, 800)\n        })\n    return items\n\n\ndata = (\n    string.ascii_letters,\n    string.punctuation,\n    string.digits,\n    string.ascii_lowercase,\n    string.punctuation,\n    string.ascii_uppercase,\n    string.punctuation,\n    string.hexdigits,\n    string.ascii_letters,\n)\n\n\ndef password_generator():\n    password_list = []\n\n    for pwd in data:\n        psd = choices(pwd, k=2)\n        password_list.extend(psd)\n\n    shuffle(password_list)\n\n    return ''.join(password_list)\n\n\n# Function to download a random image from Lorem Picsum\ndef download_random_image(image_size=(800, 600)):\n    width, height = image_size\n    url = f'https://picsum.photos/{width}/{height}'\n\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        # URL might redirect to the actual image URL\n        actual_url = response.url\n        image_id = actual_url.split('/')[-3]\n        save_image(actual_url, image_id)\n    else:\n        print(f\"Failed to fetch image. Status code: {response.status_code}\")\n\n\n# Function to download image from a given URL\ndef save_image(url, image_id):\n    response = requests.get(url)\n    if response.status_code == 200:\n        with open(f'{image_id}.jpg', 'wb') as f:\n            f.write(response.content)\n        print(f\"Image {image_id} downloaded successfully.\")\n    else:\n        print(f\"Failed to download image. Status code: {response.status_code}\")\n\n\ndef number_generated(number=100, weight=None, k=11):\n    random_numbers = list(range(0, number + 1))\n    weights = [1] * (number + 1)\n    if weight:\n        weights[weight] = 100\n\n    num = choices(random_numbers, weights=weights, k=k)\n    return num\n\n\ndef faker_data(number=1):\n    fk = Faker('en_IN')\n    faker_list = []\n\n    for _ in range(0, number):\n        sample_data = fk.simple_profile()\n        faker_list.append(sample_data)\n    return faker_list\n\n\ndef generate_credit_card_details():\n\n    card_info = {\n        \"Card Holder Name\": fake.name(),\n        \"Card Number\": fake.credit_card_number(),\n        \"Expiration Date\": fake.credit_card_expire(),\n        \"Security Code (CVV)\": fake.credit_card_security_code(),\n        \"Card Type\": fake.credit_card_provider()\n    }\n    return card_info\n</code></pre> <pre><code>import docx\n\n# Load the document\ndoc = docx.Document('attendance.docx')\ndoc_2 = docx.Document(\"./MCA SECTION A(1st year) Workshop day 1 attendence.docx\")\n\n# # Read all paragraphs\n# for para in doc.paragraphs:\n#     print(para.text)\n\nMCA_1_SEC_B = {}\n\n# Iterate over each table in the document\nfor table in doc.tables:\n    for row in table.rows:\n        # Extract each cell's text in the row\n        row_data = [cell.text for cell in row.cells]\n\n        if row_data[1]:\n            MCA_1_SEC_B[row_data[1]] = row_data[2]\n\nprint(MCA_1_SEC_B)\nMCA_1_SEC_A = {}\n\nfor table in doc_2.tables:\n    for row in table.rows[1:]:\n        # Extract each cell's text in the row\n        row_data = [cell.text for cell in row.cells]\n\n        if row_data[0]:\n            MCA_1_SEC_A[row_data[0]] = row_data[1]\nprint(MCA_1_SEC_A)\n</code></pre>"},{"location":"tool/Facker/#to-populate-fake-student-information","title":"To Populate fake student information","text":"<pre><code># import random\nfrom random import choice\n\ndata = {'24071247': 'AMANJOT KAUR', '24071249': 'NANDITA', '24071251': 'AMANDEEP SINGH', '24071253': 'KHUSHBOO',\n        '24071254': 'MANPREET KAUR', '24071255': 'SHARNJEET KAUR', '24071256': 'KULDEEP SINGH',\n        '24071258': 'AMANDEEP SINGH', '24071261': 'MAMTA', '24071263': 'VARINDER KAUR', '24071264': 'NIKITA RANI',\n        '24071265': 'ISHA SAINI', '24071268': 'ABHINEET MIROCK', '24071269': 'JASPREET KAUR',\n        '24071270': 'GARIMA SHARMA', '24071272': 'KANIKA BHATIA', '24071273': 'YOGITA SHARMA', '24071274': 'MUSKAN',\n        '24071276': 'ARPANPREET KAUR', '24071277': 'ARUSHI THAKUR', '24071278': 'AASTHA SHARMA',\n        '24071279': 'ANJALI THAKUR', '24071280': 'URVI BANSAL', '24071281': 'NAMAN SHARMA', '24071282': 'SARBJEET KAUR',\n        '24071284': 'SIMRAN DHANJU', '24071285': 'JASHANPREET KAUR', '24071286': 'SUKHDEEP SINGH'}\n\ndata_1 = {'1': 'JASKARN SINGH', '2': 'KIRANDEEP KAUR', '3': 'JASMEET KAUR', '4': 'MANJINDER SINGH',\n          '5': 'SIMARNOOR KAUR', '6': 'JASHANPREET SINGH', '7': 'TANVEER SINGH REEHAL', '8': 'ALISHA RANI',\n          '9': 'JASKARAN SINGH', '10': 'HIMANSHU SAGGU', '11': 'SIMRANJEET KAUR', '12': 'KOMALPREET KAUR',\n          '13': 'NANDINI GABA', '14': 'REETIKA JASWAL', '15': 'JASHANJOT KAUR', '16': 'PURVAK', '17': 'JASKIRAT KAUR',\n          '18': 'RIYA', '19': 'BABITA SHARMA', '20': 'SAMANPREET SINGH', '21': 'ALISH', '22': 'PARVEEN KAUR',\n          '23': 'BHAVNA', '24': 'HARDEEP SINGH', '25': 'JASWINDER SINGH', '26': 'JAHNVI', '27': 'PARBHJOT KAUR',\n          '28': 'SUKHVEER KAUR', '29': 'ARSHDEEP SINGH', '30': 'JASMEEN KAUR', '31': 'VASUDEV SHARMA',\n          '32': 'AMNINDER SINGH', '33': 'NAUNIDHI'}\n\nrole_number = list(data.keys())\n\nname_sec_a = list(data.values())\nname_sec_b = list(data_1.values())\n\nnames_list = name_sec_a + name_sec_b\n\n\ndef random_name_sec_a():\n    return choice(name_sec_a)\n\n\ndef random_name_sec_b():\n    return choice(name_sec_b)\n\n\ndef random_name_mca():\n    return choice(names_list)\n\n\ndef random_roll_number():\n    choice(list(data.keys()))\n</code></pre>"},{"location":"tool/pytest/","title":"PyTest Framework","text":"<p>Advanced version of unittest framework built on top of unittest framework</p> <p>pip install pytest</p>"},{"location":"tool/pytest/#pytest-naming-rules","title":"Pytest Naming Rules","text":"<ol> <li>File Name should start or end with 'test'    - test_google_search.py    - google_search_test.py</li> <li>Class Name should start with 'Test'    - TestGoogleSearch.py    - TestCaseDemo</li> <li>test method name should start with 'test_'    - test_method1()    - test_method2()</li> </ol> <p>Q. How to run test scripts</p> <p>py.test it execute all those scripts prest in the folder to run a particular test script py.test filename</p> <p>By default, pytest won't test and won't display print statement on console <code>-s</code> to display print statement in other languages like java <code>-v</code> used for verbose output <code>py.test -s filename</code> -&gt; pretreatment out we can see <code>py.test -s -v filename</code> -&gt; every detail will show</p> <p>-s ==&gt; meant for print statement output -v ==&gt; meant for verbose</p> <p>pytest: there are no setUp(), tearDown(), setUpClass() and tearDownClass()</p>"},{"location":"tool/pytest/#q-how-to-implement-setup-method-in-pytest","title":"Q How to implement setUp() method in pytest","text":"<p>By using some decorator</p> <p>@pytest.fixture() -&gt; to implement setup machina we can implement setUp() by using <code>@pytest.fixture()</code> decorator</p>"},{"location":"tool/pytest/#how-to-implement-teatdown-machanism","title":"How to implement teatDown() machanism","text":"<p>@pytest.fixture() ==&gt; meant for setUp mechanism @pytest.yield_fixture() ==&gt; meant for both setUp and tearDown `</p> <pre><code>@pytest.yield_fixture()\ndef ma():\n   setUp activity\n   yield\n   tearDown activity`\n\n@pytest.yield_fixture() is deprecated use @pytest.fixture() instead with yield\n</code></pre>"},{"location":"tool/pytest/#how-to-implement-setupclass-and-teardownclass-in-pytest","title":"How to implement setUpClass() and tearDownClass() in pytest","text":"<p>@pytest.yield_fixture(scope='module')</p>"},{"location":"tool/pytest/#how-to-implement-setupteardown-and-setupclassteardownclass-functionality-simultaneously-in-pytest","title":"How to implement setUp,tearDown and setUpClass,tearDownClass functionality simultaneously in pytest","text":"<p>link</p> <p><code>conftest.py</code></p> <p>code re-usability common setUp and tearDown activities, we have to define in this file automatically available for all test scripts</p> <p>Various possible ways to run pytest scripts</p> <ol> <li>py.test -v -s    - to run all methods present in all test scripts of current working directory</li> <li>py.test -v -s test.py    - to run all test methods of a particular test scripts</li> <li>py.test -v -s test.py test1.py    - to run multiple test scripts</li> <li>py.test -v -s test.py test1.py::test_method    - To run a particular test method</li> </ol> <p>it will follow top to down approach</p> <p>How to customize order of tests in pytest</p> <p>we have to install module pytest-ordering</p> <p><code>@pytest.mark.run(order=n)</code> in unittesting this type of facility not define</p>"}]}